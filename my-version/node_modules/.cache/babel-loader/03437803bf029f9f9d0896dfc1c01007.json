{"ast":null,"code":"import macro from 'vtk.js/Sources/macros';\nimport { registerViewConstructor } from 'vtk.js/Sources/Rendering/Core/RenderWindow';\nimport vtkForwardPass from 'vtk.js/Sources/Rendering/WebGPU/ForwardPass';\nimport vtkWebGPUBuffer from 'vtk.js/Sources/Rendering/WebGPU/Buffer';\nimport vtkWebGPUDevice from 'vtk.js/Sources/Rendering/WebGPU/Device';\nimport vtkWebGPUHardwareSelector from 'vtk.js/Sources/Rendering/WebGPU/HardwareSelector';\nimport vtkWebGPUViewNodeFactory from 'vtk.js/Sources/Rendering/WebGPU/ViewNodeFactory';\nimport vtkRenderPass from 'vtk.js/Sources/Rendering/SceneGraph/RenderPass';\nimport vtkRenderWindowViewNode from 'vtk.js/Sources/Rendering/SceneGraph/RenderWindowViewNode';\nimport HalfFloat from 'vtk.js/Sources/Common/Core/HalfFloat';\nconst {\n  vtkErrorMacro\n} = macro; // const IS_CHROME = navigator.userAgent.indexOf('Chrome') !== -1;\n\nconst SCREENSHOT_PLACEHOLDER = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  width: '100%',\n  height: '100%'\n}; // ----------------------------------------------------------------------------\n// vtkWebGPURenderWindow methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPURenderWindow(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPURenderWindow');\n\n  publicAPI.getViewNodeFactory = () => model.myFactory; // Auto update style\n\n\n  const previousSize = [0, 0];\n\n  function updateWindow() {\n    // Canvas size\n    if (model.renderable) {\n      if (model.size[0] !== previousSize[0] || model.size[1] !== previousSize[1]) {\n        previousSize[0] = model.size[0];\n        previousSize[1] = model.size[1];\n        model.canvas.setAttribute('width', model.size[0]);\n        model.canvas.setAttribute('height', model.size[1]);\n        publicAPI.recreateSwapChain();\n      }\n    } // ImageStream size\n\n\n    if (model.viewStream) {\n      // If same size that's a NoOp\n      model.viewStream.setSize(model.size[0], model.size[1]);\n    } // Offscreen ?\n\n\n    model.canvas.style.display = model.useOffScreen ? 'none' : 'block'; // Cursor type\n\n    if (model.el) {\n      model.el.style.cursor = model.cursorVisibility ? model.cursor : 'none';\n    } // Invalidate cached DOM container size\n\n\n    model.containerSize = null;\n  }\n\n  publicAPI.onModified(updateWindow);\n\n  publicAPI.recreateSwapChain = () => {\n    if (model.context) {\n      model.context.unconfigure();\n      model.presentationFormat = navigator.gpu.getPreferredCanvasFormat(model.adapter);\n      /* eslint-disable no-undef */\n\n      /* eslint-disable no-bitwise */\n\n      model.context.configure({\n        device: model.device.getHandle(),\n        format: model.presentationFormat,\n        alphaMode: 'premultiplied',\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_DST,\n        width: model.size[0],\n        height: model.size[1]\n      });\n      model._configured = true;\n    }\n  };\n\n  publicAPI.getCurrentTexture = () => model.context.getCurrentTexture(); // Builds myself.\n\n\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNodes(model.renderable.getRenderersByReference());\n      publicAPI.removeUnusedNodes();\n      publicAPI.initialize();\n    } else if (model.initialized) {\n      if (!model._configured) {\n        publicAPI.recreateSwapChain();\n      }\n\n      model.commandEncoder = model.device.createCommandEncoder();\n    }\n  }; // publicAPI.traverseRenderers = (renPass) => {\n  //   // iterate over renderers\n  //   const numlayers = publicAPI.getRenderable().getNumberOfLayers();\n  //   const renderers = publicAPI.getChildren();\n  //   for (let i = 0; i < numlayers; i++) {\n  //     for (let index = 0; index < renderers.length; index++) {\n  //       const renNode = renderers[index];\n  //       const ren = publicAPI.getRenderable().getRenderers()[index];\n  //       if (ren.getDraw() && ren.getLayer() === i) {\n  //         renNode.traverse(renPass);\n  //       }\n  //     }\n  //   }\n  // };\n\n\n  publicAPI.initialize = () => {\n    if (!model.initializing) {\n      model.initializing = true;\n\n      if (!navigator.gpu) {\n        vtkErrorMacro('WebGPU is not enabled.');\n        return;\n      }\n\n      publicAPI.create3DContextAsync().then(() => {\n        model.initialized = true;\n\n        if (model.deleted) {\n          return;\n        }\n\n        publicAPI.invokeInitialized();\n      });\n    }\n  };\n\n  publicAPI.setContainer = el => {\n    if (model.el && model.el !== el) {\n      if (model.canvas.parentNode !== model.el) {\n        vtkErrorMacro('Error: canvas parent node does not match container');\n      } // Remove canvas from previous container\n\n\n      model.el.removeChild(model.canvas); // If the renderer has previously added\n      // a background image, remove it from the DOM.\n\n      if (model.el.contains(model.bgImage)) {\n        model.el.removeChild(model.bgImage);\n      }\n    }\n\n    if (model.el !== el) {\n      model.el = el;\n\n      if (model.el) {\n        model.el.appendChild(model.canvas); // If the renderer is set to use a background\n        // image, attach it to the DOM.\n\n        if (model.useBackgroundImage) {\n          model.el.appendChild(model.bgImage);\n        }\n      } // Trigger modified()\n\n\n      publicAPI.modified();\n    }\n  };\n\n  publicAPI.getContainer = () => model.el;\n\n  publicAPI.getContainerSize = () => {\n    if (!model.containerSize && model.el) {\n      const {\n        width,\n        height\n      } = model.el.getBoundingClientRect();\n      model.containerSize = [width, height];\n    }\n\n    return model.containerSize || model.size;\n  };\n\n  publicAPI.getFramebufferSize = () => model.size;\n\n  publicAPI.create3DContextAsync = async () => {\n    // Get a GPU device to render with\n    model.adapter = await navigator.gpu.requestAdapter({\n      powerPreference: 'high-performance'\n    });\n\n    if (model.deleted) {\n      return;\n    } // console.log([...model.adapter.features]);\n\n\n    model.device = vtkWebGPUDevice.newInstance();\n    model.device.initialize(await model.adapter.requestDevice());\n\n    if (model.deleted) {\n      model.device = null;\n      return;\n    } // model.device.getHandle().lost.then((info) => {\n    //   console.log(`${info.message}`);\n    //   publicAPI.releaseGraphicsResources();\n    // });\n\n\n    model.context = model.canvas.getContext('webgpu');\n  };\n\n  publicAPI.releaseGraphicsResources = () => {\n    const rp = vtkRenderPass.newInstance();\n    rp.setCurrentOperation('Release');\n    rp.traverse(publicAPI, null);\n    model.adapter = null;\n    model.device = null;\n    model.context = null;\n    model.initialized = false;\n    model.initializing = false;\n  };\n\n  publicAPI.setBackgroundImage = img => {\n    model.bgImage.src = img.src;\n  };\n\n  publicAPI.setUseBackgroundImage = value => {\n    model.useBackgroundImage = value; // Add or remove the background image from the\n    // DOM as specified.\n\n    if (model.useBackgroundImage && !model.el.contains(model.bgImage)) {\n      model.el.appendChild(model.bgImage);\n    } else if (!model.useBackgroundImage && model.el.contains(model.bgImage)) {\n      model.el.removeChild(model.bgImage);\n    }\n  };\n\n  async function getCanvasDataURL() {\n    let format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : model.imageFormat;\n    // Copy current canvas to not modify the original\n    const temporaryCanvas = document.createElement('canvas');\n    const temporaryContext = temporaryCanvas.getContext('2d');\n    temporaryCanvas.width = model.canvas.width;\n    temporaryCanvas.height = model.canvas.height;\n    const result = await publicAPI.getPixelsAsync();\n    const imageData = new ImageData(result.colorValues, result.width, result.height); // temporaryCanvas.putImageData(imageData, 0, 0);\n\n    temporaryContext.putImageData(imageData, 0, 0); // Get current client rect to place canvas\n\n    const mainBoundingClientRect = model.canvas.getBoundingClientRect();\n    const renderWindow = model.renderable;\n    const renderers = renderWindow.getRenderers();\n    renderers.forEach(renderer => {\n      const viewProps = renderer.getViewProps();\n      viewProps.forEach(viewProp => {\n        // Check if the prop has a container that should have canvas\n        if (viewProp.getContainer) {\n          const container = viewProp.getContainer();\n          const canvasList = container.getElementsByTagName('canvas'); // Go throughout all canvas and copy it into temporary main canvas\n\n          for (let i = 0; i < canvasList.length; i++) {\n            const currentCanvas = canvasList[i];\n            const boundingClientRect = currentCanvas.getBoundingClientRect();\n            const newXPosition = boundingClientRect.x - mainBoundingClientRect.x;\n            const newYPosition = boundingClientRect.y - mainBoundingClientRect.y;\n            temporaryContext.drawImage(currentCanvas, newXPosition, newYPosition);\n          }\n        }\n      });\n    });\n    const screenshot = temporaryCanvas.toDataURL(format);\n    temporaryCanvas.remove();\n    publicAPI.invokeImageReady(screenshot);\n  }\n\n  publicAPI.captureNextImage = function () {\n    let format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'image/png';\n    let {\n      resetCamera = false,\n      size = null,\n      scale = 1\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (model.deleted) {\n      return null;\n    }\n\n    model.imageFormat = format;\n    const previous = model.notifyStartCaptureImage;\n    model.notifyStartCaptureImage = true;\n    model._screenshot = {\n      size: !!size || scale !== 1 ? size || model.size.map(val => val * scale) : null\n    };\n    return new Promise((resolve, reject) => {\n      const subscription = publicAPI.onImageReady(imageURL => {\n        if (model._screenshot.size === null) {\n          model.notifyStartCaptureImage = previous;\n          subscription.unsubscribe();\n\n          if (model._screenshot.placeHolder) {\n            // resize the main canvas back to its original size and show it\n            model.size = model._screenshot.originalSize; // process the resize\n\n            publicAPI.modified(); // restore the saved camera parameters, if applicable\n\n            if (model._screenshot.cameras) {\n              model._screenshot.cameras.forEach(_ref => {\n                let {\n                  restoreParamsFn,\n                  arg\n                } = _ref;\n                return restoreParamsFn(arg);\n              });\n            } // Trigger a render at the original size\n\n\n            publicAPI.traverseAllPasses(); // Remove and clean up the placeholder, revealing the original\n\n            model.el.removeChild(model._screenshot.placeHolder);\n\n            model._screenshot.placeHolder.remove();\n\n            model._screenshot = null;\n          }\n\n          resolve(imageURL);\n        } else {\n          // Create a placeholder image overlay while we resize and render\n          const tmpImg = document.createElement('img');\n          tmpImg.style = SCREENSHOT_PLACEHOLDER;\n          tmpImg.src = imageURL;\n          model._screenshot.placeHolder = model.el.appendChild(tmpImg); // hide the main canvas\n\n          model.canvas.style.display = 'none'; // remember the main canvas original size, then resize it\n\n          model._screenshot.originalSize = model.size;\n          model.size = model._screenshot.size;\n          model._screenshot.size = null; // process the resize\n\n          publicAPI.modified();\n\n          if (resetCamera) {\n            const isUserResetCamera = resetCamera !== true; // If resetCamera was requested, we first save camera parameters\n            // from all the renderers, so we can restore them later\n\n            model._screenshot.cameras = model.renderable.getRenderers().map(renderer => {\n              const camera = renderer.getActiveCamera();\n              const params = camera.get('focalPoint', 'position', 'parallelScale');\n              return {\n                resetCameraArgs: isUserResetCamera ? {\n                  renderer\n                } : undefined,\n                resetCameraFn: isUserResetCamera ? resetCamera : renderer.resetCamera,\n                restoreParamsFn: camera.set,\n                // \"clone\" the params so we don't keep refs to properties\n                arg: JSON.parse(JSON.stringify(params))\n              };\n            }); // Perform the resetCamera() on each renderer only after capturing\n            // the params from all active cameras, in case there happen to be\n            // linked cameras among the renderers.\n\n            model._screenshot.cameras.forEach(_ref2 => {\n              let {\n                resetCameraFn,\n                resetCameraArgs\n              } = _ref2;\n              return resetCameraFn(resetCameraArgs);\n            });\n          } // Trigger a render at the custom size\n\n\n          publicAPI.traverseAllPasses();\n        }\n      });\n    });\n  };\n\n  publicAPI.traverseAllPasses = () => {\n    if (model.deleted) {\n      return;\n    } // if we are not initialized then we call initialize\n    // which is async so we will not actually get a render\n    // so we queue up another traverse for when we are initialized\n\n\n    if (!model.initialized) {\n      publicAPI.initialize();\n      const subscription = publicAPI.onInitialized(() => {\n        subscription.unsubscribe();\n        publicAPI.traverseAllPasses();\n      });\n    } else {\n      if (model.renderPasses) {\n        for (let index = 0; index < model.renderPasses.length; ++index) {\n          model.renderPasses[index].traverse(publicAPI, null);\n        }\n      }\n\n      if (model.commandEncoder) {\n        model.device.submitCommandEncoder(model.commandEncoder);\n        model.commandEncoder = null;\n\n        if (model.notifyStartCaptureImage) {\n          model.device.onSubmittedWorkDone().then(() => {\n            getCanvasDataURL();\n          });\n        }\n      }\n    }\n  };\n\n  publicAPI.setViewStream = stream => {\n    if (model.viewStream === stream) {\n      return false;\n    }\n\n    if (model.subscription) {\n      model.subscription.unsubscribe();\n      model.subscription = null;\n    }\n\n    model.viewStream = stream;\n\n    if (model.viewStream) {\n      // Force background to be transparent + render\n      const mainRenderer = model.renderable.getRenderers()[0];\n      mainRenderer.getBackgroundByReference()[3] = 0; // Enable display of the background image\n\n      publicAPI.setUseBackgroundImage(true); // Bind to remote stream\n\n      model.subscription = model.viewStream.onImageReady(e => publicAPI.setBackgroundImage(e.image));\n      model.viewStream.setSize(model.size[0], model.size[1]);\n      model.viewStream.invalidateCache();\n      model.viewStream.render();\n      publicAPI.modified();\n    }\n\n    return true;\n  };\n\n  publicAPI.getUniquePropID = () => model.nextPropID++;\n\n  publicAPI.getPropFromID = id => {\n    for (let i = 0; i < model.children.length; i++) {\n      const res = model.children[i].getPropFromID(id);\n\n      if (res !== null) {\n        return res;\n      }\n    }\n\n    return null;\n  };\n\n  publicAPI.getPixelsAsync = async () => {\n    const device = model.device;\n    const texture = model.renderPasses[0].getOpaquePass().getColorTexture(); // as this is async we really don't want to store things in\n    // the class as multiple calls may start before resolving\n    // so anything specific to this request gets put into the\n    // result object (by value in most cases)\n\n    const result = {\n      width: texture.getWidth(),\n      height: texture.getHeight()\n    }; // must be a multiple of 256 bytes, so 32 texels with rgba16\n\n    result.colorBufferWidth = 32 * Math.floor((result.width + 31) / 32);\n    result.colorBufferSizeInBytes = result.colorBufferWidth * result.height * 8;\n    const colorBuffer = vtkWebGPUBuffer.newInstance();\n    colorBuffer.setDevice(device);\n    /* eslint-disable no-bitwise */\n\n    /* eslint-disable no-undef */\n\n    colorBuffer.create(result.colorBufferSizeInBytes, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);\n    /* eslint-enable no-bitwise */\n\n    /* eslint-enable no-undef */\n\n    const cmdEnc = model.device.createCommandEncoder();\n    cmdEnc.copyTextureToBuffer({\n      texture: texture.getHandle()\n    }, {\n      buffer: colorBuffer.getHandle(),\n      bytesPerRow: 8 * result.colorBufferWidth,\n      rowsPerImage: result.height\n    }, {\n      width: result.width,\n      height: result.height,\n      depthOrArrayLayers: 1\n    });\n    device.submitCommandEncoder(cmdEnc);\n    /* eslint-disable no-undef */\n\n    const cLoad = colorBuffer.mapAsync(GPUMapMode.READ);\n    await cLoad;\n    /* eslint-enable no-undef */\n\n    result.colorValues = new Uint16Array(colorBuffer.getMappedRange().slice());\n    colorBuffer.unmap(); // repack the array\n\n    const tmparray = new Uint8ClampedArray(result.height * result.width * 4);\n\n    for (let y = 0; y < result.height; y++) {\n      for (let x = 0; x < result.width; x++) {\n        const doffset = (y * result.width + x) * 4;\n        const soffset = (y * result.colorBufferWidth + x) * 4;\n        tmparray[doffset] = 255.0 * HalfFloat.fromHalf(result.colorValues[soffset]);\n        tmparray[doffset + 1] = 255.0 * HalfFloat.fromHalf(result.colorValues[soffset + 1]);\n        tmparray[doffset + 2] = 255.0 * HalfFloat.fromHalf(result.colorValues[soffset + 2]);\n        tmparray[doffset + 3] = 255.0 * HalfFloat.fromHalf(result.colorValues[soffset + 3]);\n      }\n    }\n\n    result.colorValues = tmparray;\n    return result;\n  };\n\n  publicAPI.createSelector = () => {\n    const ret = vtkWebGPUHardwareSelector.newInstance();\n    ret.setWebGPURenderWindow(publicAPI);\n    return ret;\n  };\n\n  publicAPI.delete = macro.chain(publicAPI.delete, publicAPI.setViewStream);\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  initialized: false,\n  context: null,\n  adapter: null,\n  device: null,\n  canvas: null,\n  cursorVisibility: true,\n  cursor: 'pointer',\n  containerSize: null,\n  renderPasses: [],\n  notifyStartCaptureImage: false,\n  imageFormat: 'image/png',\n  useOffScreen: false,\n  useBackgroundImage: false,\n  nextPropID: 1,\n  xrSupported: false,\n  presentationFormat: null\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Create internal instances\n\n  model.canvas = document.createElement('canvas');\n  model.canvas.style.width = '100%'; // Create internal bgImage\n\n  model.bgImage = new Image();\n  model.bgImage.style.position = 'absolute';\n  model.bgImage.style.left = '0';\n  model.bgImage.style.top = '0';\n  model.bgImage.style.width = '100%';\n  model.bgImage.style.height = '100%';\n  model.bgImage.style.zIndex = '-1'; // Inheritance\n\n  vtkRenderWindowViewNode.extend(publicAPI, model, initialValues);\n  model.myFactory = vtkWebGPUViewNodeFactory.newInstance();\n  /* eslint-disable no-use-before-define */\n\n  model.myFactory.registerOverride('vtkRenderWindow', newInstance);\n  /* eslint-enable no-use-before-define */\n  // setup default forward pass rendering\n\n  model.renderPasses[0] = vtkForwardPass.newInstance();\n\n  if (!model.selector) {\n    model.selector = vtkWebGPUHardwareSelector.newInstance();\n    model.selector.setWebGPURenderWindow(publicAPI);\n  }\n\n  macro.event(publicAPI, model, 'imageReady');\n  macro.event(publicAPI, model, 'initialized'); // Build VTK API\n\n  macro.get(publicAPI, model, ['commandEncoder', 'device', 'presentationFormat', 'useBackgroundImage', 'xrSupported']);\n  macro.setGet(publicAPI, model, ['initialized', 'context', 'canvas', 'device', 'renderPasses', 'notifyStartCaptureImage', 'cursor', 'useOffScreen']);\n  macro.setGetArray(publicAPI, model, ['size'], 2); // Object methods\n\n  vtkWebGPURenderWindow(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkWebGPURenderWindow'); // ----------------------------------------------------------------------------\n// Register API specific RenderWindow implementation\n// ----------------------------------------------------------------------------\n\nregisterViewConstructor('WebGPU', newInstance); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend\n};","map":{"version":3,"names":["macro","registerViewConstructor","vtkForwardPass","vtkWebGPUBuffer","vtkWebGPUDevice","vtkWebGPUHardwareSelector","vtkWebGPUViewNodeFactory","vtkRenderPass","vtkRenderWindowViewNode","HalfFloat","vtkErrorMacro","SCREENSHOT_PLACEHOLDER","position","top","left","width","height","vtkWebGPURenderWindow","publicAPI","model","classHierarchy","push","getViewNodeFactory","myFactory","previousSize","updateWindow","renderable","size","canvas","setAttribute","recreateSwapChain","viewStream","setSize","style","display","useOffScreen","el","cursor","cursorVisibility","containerSize","onModified","context","unconfigure","presentationFormat","navigator","gpu","getPreferredCanvasFormat","adapter","configure","device","getHandle","format","alphaMode","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_DST","_configured","getCurrentTexture","buildPass","prepass","prepareNodes","addMissingNodes","getRenderersByReference","removeUnusedNodes","initialize","initialized","commandEncoder","createCommandEncoder","initializing","create3DContextAsync","then","deleted","invokeInitialized","setContainer","parentNode","removeChild","contains","bgImage","appendChild","useBackgroundImage","modified","getContainer","getContainerSize","getBoundingClientRect","getFramebufferSize","requestAdapter","powerPreference","newInstance","requestDevice","getContext","releaseGraphicsResources","rp","setCurrentOperation","traverse","setBackgroundImage","img","src","setUseBackgroundImage","value","getCanvasDataURL","imageFormat","temporaryCanvas","document","createElement","temporaryContext","result","getPixelsAsync","imageData","ImageData","colorValues","putImageData","mainBoundingClientRect","renderWindow","renderers","getRenderers","forEach","renderer","viewProps","getViewProps","viewProp","container","canvasList","getElementsByTagName","i","length","currentCanvas","boundingClientRect","newXPosition","x","newYPosition","y","drawImage","screenshot","toDataURL","remove","invokeImageReady","captureNextImage","resetCamera","scale","previous","notifyStartCaptureImage","_screenshot","map","val","Promise","resolve","reject","subscription","onImageReady","imageURL","unsubscribe","placeHolder","originalSize","cameras","restoreParamsFn","arg","traverseAllPasses","tmpImg","isUserResetCamera","camera","getActiveCamera","params","get","resetCameraArgs","undefined","resetCameraFn","set","JSON","parse","stringify","onInitialized","renderPasses","index","submitCommandEncoder","onSubmittedWorkDone","setViewStream","stream","mainRenderer","getBackgroundByReference","e","image","invalidateCache","render","getUniquePropID","nextPropID","getPropFromID","id","children","res","texture","getOpaquePass","getColorTexture","getWidth","getHeight","colorBufferWidth","Math","floor","colorBufferSizeInBytes","colorBuffer","setDevice","create","GPUBufferUsage","MAP_READ","cmdEnc","copyTextureToBuffer","buffer","bytesPerRow","rowsPerImage","depthOrArrayLayers","cLoad","mapAsync","GPUMapMode","READ","Uint16Array","getMappedRange","slice","unmap","tmparray","Uint8ClampedArray","doffset","soffset","fromHalf","createSelector","ret","setWebGPURenderWindow","delete","chain","DEFAULT_VALUES","xrSupported","extend","initialValues","Object","assign","Image","zIndex","registerOverride","selector","event","setGet","setGetArray"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/WebGPU/RenderWindow/index.js"],"sourcesContent":["import macro from 'vtk.js/Sources/macros';\nimport { registerViewConstructor } from 'vtk.js/Sources/Rendering/Core/RenderWindow';\nimport vtkForwardPass from 'vtk.js/Sources/Rendering/WebGPU/ForwardPass';\nimport vtkWebGPUBuffer from 'vtk.js/Sources/Rendering/WebGPU/Buffer';\nimport vtkWebGPUDevice from 'vtk.js/Sources/Rendering/WebGPU/Device';\nimport vtkWebGPUHardwareSelector from 'vtk.js/Sources/Rendering/WebGPU/HardwareSelector';\nimport vtkWebGPUViewNodeFactory from 'vtk.js/Sources/Rendering/WebGPU/ViewNodeFactory';\nimport vtkRenderPass from 'vtk.js/Sources/Rendering/SceneGraph/RenderPass';\nimport vtkRenderWindowViewNode from 'vtk.js/Sources/Rendering/SceneGraph/RenderWindowViewNode';\nimport HalfFloat from 'vtk.js/Sources/Common/Core/HalfFloat';\n\nconst { vtkErrorMacro } = macro;\n// const IS_CHROME = navigator.userAgent.indexOf('Chrome') !== -1;\nconst SCREENSHOT_PLACEHOLDER = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  width: '100%',\n  height: '100%',\n};\n\n// ----------------------------------------------------------------------------\n// vtkWebGPURenderWindow methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPURenderWindow(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPURenderWindow');\n\n  publicAPI.getViewNodeFactory = () => model.myFactory;\n\n  // Auto update style\n  const previousSize = [0, 0];\n  function updateWindow() {\n    // Canvas size\n    if (model.renderable) {\n      if (\n        model.size[0] !== previousSize[0] ||\n        model.size[1] !== previousSize[1]\n      ) {\n        previousSize[0] = model.size[0];\n        previousSize[1] = model.size[1];\n        model.canvas.setAttribute('width', model.size[0]);\n        model.canvas.setAttribute('height', model.size[1]);\n        publicAPI.recreateSwapChain();\n      }\n    }\n\n    // ImageStream size\n    if (model.viewStream) {\n      // If same size that's a NoOp\n      model.viewStream.setSize(model.size[0], model.size[1]);\n    }\n\n    // Offscreen ?\n    model.canvas.style.display = model.useOffScreen ? 'none' : 'block';\n\n    // Cursor type\n    if (model.el) {\n      model.el.style.cursor = model.cursorVisibility ? model.cursor : 'none';\n    }\n\n    // Invalidate cached DOM container size\n    model.containerSize = null;\n  }\n  publicAPI.onModified(updateWindow);\n\n  publicAPI.recreateSwapChain = () => {\n    if (model.context) {\n      model.context.unconfigure();\n      model.presentationFormat = navigator.gpu.getPreferredCanvasFormat(\n        model.adapter\n      );\n\n      /* eslint-disable no-undef */\n      /* eslint-disable no-bitwise */\n      model.context.configure({\n        device: model.device.getHandle(),\n        format: model.presentationFormat,\n        alphaMode: 'premultiplied',\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_DST,\n        width: model.size[0],\n        height: model.size[1],\n      });\n      model._configured = true;\n    }\n  };\n\n  publicAPI.getCurrentTexture = () => model.context.getCurrentTexture();\n\n  // Builds myself.\n  publicAPI.buildPass = (prepass) => {\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNodes(model.renderable.getRenderersByReference());\n      publicAPI.removeUnusedNodes();\n\n      publicAPI.initialize();\n    } else if (model.initialized) {\n      if (!model._configured) {\n        publicAPI.recreateSwapChain();\n      }\n      model.commandEncoder = model.device.createCommandEncoder();\n    }\n  };\n\n  // publicAPI.traverseRenderers = (renPass) => {\n  //   // iterate over renderers\n  //   const numlayers = publicAPI.getRenderable().getNumberOfLayers();\n  //   const renderers = publicAPI.getChildren();\n  //   for (let i = 0; i < numlayers; i++) {\n  //     for (let index = 0; index < renderers.length; index++) {\n  //       const renNode = renderers[index];\n  //       const ren = publicAPI.getRenderable().getRenderers()[index];\n  //       if (ren.getDraw() && ren.getLayer() === i) {\n  //         renNode.traverse(renPass);\n  //       }\n  //     }\n  //   }\n  // };\n\n  publicAPI.initialize = () => {\n    if (!model.initializing) {\n      model.initializing = true;\n      if (!navigator.gpu) {\n        vtkErrorMacro('WebGPU is not enabled.');\n        return;\n      }\n\n      publicAPI.create3DContextAsync().then(() => {\n        model.initialized = true;\n        if (model.deleted) {\n          return;\n        }\n        publicAPI.invokeInitialized();\n      });\n    }\n  };\n\n  publicAPI.setContainer = (el) => {\n    if (model.el && model.el !== el) {\n      if (model.canvas.parentNode !== model.el) {\n        vtkErrorMacro('Error: canvas parent node does not match container');\n      }\n\n      // Remove canvas from previous container\n      model.el.removeChild(model.canvas);\n\n      // If the renderer has previously added\n      // a background image, remove it from the DOM.\n      if (model.el.contains(model.bgImage)) {\n        model.el.removeChild(model.bgImage);\n      }\n    }\n\n    if (model.el !== el) {\n      model.el = el;\n      if (model.el) {\n        model.el.appendChild(model.canvas);\n\n        // If the renderer is set to use a background\n        // image, attach it to the DOM.\n        if (model.useBackgroundImage) {\n          model.el.appendChild(model.bgImage);\n        }\n      }\n\n      // Trigger modified()\n      publicAPI.modified();\n    }\n  };\n\n  publicAPI.getContainer = () => model.el;\n\n  publicAPI.getContainerSize = () => {\n    if (!model.containerSize && model.el) {\n      const { width, height } = model.el.getBoundingClientRect();\n      model.containerSize = [width, height];\n    }\n    return model.containerSize || model.size;\n  };\n\n  publicAPI.getFramebufferSize = () => model.size;\n\n  publicAPI.create3DContextAsync = async () => {\n    // Get a GPU device to render with\n    model.adapter = await navigator.gpu.requestAdapter({\n      powerPreference: 'high-performance',\n    });\n    if (model.deleted) {\n      return;\n    }\n    // console.log([...model.adapter.features]);\n    model.device = vtkWebGPUDevice.newInstance();\n    model.device.initialize(await model.adapter.requestDevice());\n    if (model.deleted) {\n      model.device = null;\n      return;\n    }\n    // model.device.getHandle().lost.then((info) => {\n    //   console.log(`${info.message}`);\n    //   publicAPI.releaseGraphicsResources();\n    // });\n    model.context = model.canvas.getContext('webgpu');\n  };\n\n  publicAPI.releaseGraphicsResources = () => {\n    const rp = vtkRenderPass.newInstance();\n    rp.setCurrentOperation('Release');\n    rp.traverse(publicAPI, null);\n    model.adapter = null;\n    model.device = null;\n    model.context = null;\n    model.initialized = false;\n    model.initializing = false;\n  };\n\n  publicAPI.setBackgroundImage = (img) => {\n    model.bgImage.src = img.src;\n  };\n\n  publicAPI.setUseBackgroundImage = (value) => {\n    model.useBackgroundImage = value;\n\n    // Add or remove the background image from the\n    // DOM as specified.\n    if (model.useBackgroundImage && !model.el.contains(model.bgImage)) {\n      model.el.appendChild(model.bgImage);\n    } else if (!model.useBackgroundImage && model.el.contains(model.bgImage)) {\n      model.el.removeChild(model.bgImage);\n    }\n  };\n\n  async function getCanvasDataURL(format = model.imageFormat) {\n    // Copy current canvas to not modify the original\n    const temporaryCanvas = document.createElement('canvas');\n    const temporaryContext = temporaryCanvas.getContext('2d');\n    temporaryCanvas.width = model.canvas.width;\n    temporaryCanvas.height = model.canvas.height;\n\n    const result = await publicAPI.getPixelsAsync();\n    const imageData = new ImageData(\n      result.colorValues,\n      result.width,\n      result.height\n    );\n    // temporaryCanvas.putImageData(imageData, 0, 0);\n    temporaryContext.putImageData(imageData, 0, 0);\n\n    // Get current client rect to place canvas\n    const mainBoundingClientRect = model.canvas.getBoundingClientRect();\n\n    const renderWindow = model.renderable;\n    const renderers = renderWindow.getRenderers();\n    renderers.forEach((renderer) => {\n      const viewProps = renderer.getViewProps();\n      viewProps.forEach((viewProp) => {\n        // Check if the prop has a container that should have canvas\n        if (viewProp.getContainer) {\n          const container = viewProp.getContainer();\n          const canvasList = container.getElementsByTagName('canvas');\n          // Go throughout all canvas and copy it into temporary main canvas\n          for (let i = 0; i < canvasList.length; i++) {\n            const currentCanvas = canvasList[i];\n            const boundingClientRect = currentCanvas.getBoundingClientRect();\n            const newXPosition =\n              boundingClientRect.x - mainBoundingClientRect.x;\n            const newYPosition =\n              boundingClientRect.y - mainBoundingClientRect.y;\n            temporaryContext.drawImage(\n              currentCanvas,\n              newXPosition,\n              newYPosition\n            );\n          }\n        }\n      });\n    });\n\n    const screenshot = temporaryCanvas.toDataURL(format);\n    temporaryCanvas.remove();\n    publicAPI.invokeImageReady(screenshot);\n  }\n\n  publicAPI.captureNextImage = (\n    format = 'image/png',\n    { resetCamera = false, size = null, scale = 1 } = {}\n  ) => {\n    if (model.deleted) {\n      return null;\n    }\n    model.imageFormat = format;\n    const previous = model.notifyStartCaptureImage;\n    model.notifyStartCaptureImage = true;\n\n    model._screenshot = {\n      size:\n        !!size || scale !== 1\n          ? size || model.size.map((val) => val * scale)\n          : null,\n    };\n\n    return new Promise((resolve, reject) => {\n      const subscription = publicAPI.onImageReady((imageURL) => {\n        if (model._screenshot.size === null) {\n          model.notifyStartCaptureImage = previous;\n          subscription.unsubscribe();\n          if (model._screenshot.placeHolder) {\n            // resize the main canvas back to its original size and show it\n            model.size = model._screenshot.originalSize;\n\n            // process the resize\n            publicAPI.modified();\n\n            // restore the saved camera parameters, if applicable\n            if (model._screenshot.cameras) {\n              model._screenshot.cameras.forEach(({ restoreParamsFn, arg }) =>\n                restoreParamsFn(arg)\n              );\n            }\n\n            // Trigger a render at the original size\n            publicAPI.traverseAllPasses();\n\n            // Remove and clean up the placeholder, revealing the original\n            model.el.removeChild(model._screenshot.placeHolder);\n            model._screenshot.placeHolder.remove();\n            model._screenshot = null;\n          }\n          resolve(imageURL);\n        } else {\n          // Create a placeholder image overlay while we resize and render\n          const tmpImg = document.createElement('img');\n          tmpImg.style = SCREENSHOT_PLACEHOLDER;\n          tmpImg.src = imageURL;\n          model._screenshot.placeHolder = model.el.appendChild(tmpImg);\n\n          // hide the main canvas\n          model.canvas.style.display = 'none';\n\n          // remember the main canvas original size, then resize it\n          model._screenshot.originalSize = model.size;\n          model.size = model._screenshot.size;\n          model._screenshot.size = null;\n\n          // process the resize\n          publicAPI.modified();\n\n          if (resetCamera) {\n            const isUserResetCamera = resetCamera !== true;\n\n            // If resetCamera was requested, we first save camera parameters\n            // from all the renderers, so we can restore them later\n            model._screenshot.cameras = model.renderable\n              .getRenderers()\n              .map((renderer) => {\n                const camera = renderer.getActiveCamera();\n                const params = camera.get(\n                  'focalPoint',\n                  'position',\n                  'parallelScale'\n                );\n\n                return {\n                  resetCameraArgs: isUserResetCamera ? { renderer } : undefined,\n                  resetCameraFn: isUserResetCamera\n                    ? resetCamera\n                    : renderer.resetCamera,\n                  restoreParamsFn: camera.set,\n                  // \"clone\" the params so we don't keep refs to properties\n                  arg: JSON.parse(JSON.stringify(params)),\n                };\n              });\n\n            // Perform the resetCamera() on each renderer only after capturing\n            // the params from all active cameras, in case there happen to be\n            // linked cameras among the renderers.\n            model._screenshot.cameras.forEach(\n              ({ resetCameraFn, resetCameraArgs }) =>\n                resetCameraFn(resetCameraArgs)\n            );\n          }\n\n          // Trigger a render at the custom size\n          publicAPI.traverseAllPasses();\n        }\n      });\n    });\n  };\n\n  publicAPI.traverseAllPasses = () => {\n    if (model.deleted) {\n      return;\n    }\n    // if we are not initialized then we call initialize\n    // which is async so we will not actually get a render\n    // so we queue up another traverse for when we are initialized\n    if (!model.initialized) {\n      publicAPI.initialize();\n      const subscription = publicAPI.onInitialized(() => {\n        subscription.unsubscribe();\n        publicAPI.traverseAllPasses();\n      });\n    } else {\n      if (model.renderPasses) {\n        for (let index = 0; index < model.renderPasses.length; ++index) {\n          model.renderPasses[index].traverse(publicAPI, null);\n        }\n      }\n      if (model.commandEncoder) {\n        model.device.submitCommandEncoder(model.commandEncoder);\n        model.commandEncoder = null;\n        if (model.notifyStartCaptureImage) {\n          model.device.onSubmittedWorkDone().then(() => {\n            getCanvasDataURL();\n          });\n        }\n      }\n    }\n  };\n\n  publicAPI.setViewStream = (stream) => {\n    if (model.viewStream === stream) {\n      return false;\n    }\n    if (model.subscription) {\n      model.subscription.unsubscribe();\n      model.subscription = null;\n    }\n    model.viewStream = stream;\n    if (model.viewStream) {\n      // Force background to be transparent + render\n      const mainRenderer = model.renderable.getRenderers()[0];\n      mainRenderer.getBackgroundByReference()[3] = 0;\n\n      // Enable display of the background image\n      publicAPI.setUseBackgroundImage(true);\n\n      // Bind to remote stream\n      model.subscription = model.viewStream.onImageReady((e) =>\n        publicAPI.setBackgroundImage(e.image)\n      );\n      model.viewStream.setSize(model.size[0], model.size[1]);\n      model.viewStream.invalidateCache();\n      model.viewStream.render();\n\n      publicAPI.modified();\n    }\n    return true;\n  };\n\n  publicAPI.getUniquePropID = () => model.nextPropID++;\n\n  publicAPI.getPropFromID = (id) => {\n    for (let i = 0; i < model.children.length; i++) {\n      const res = model.children[i].getPropFromID(id);\n      if (res !== null) {\n        return res;\n      }\n    }\n    return null;\n  };\n\n  publicAPI.getPixelsAsync = async () => {\n    const device = model.device;\n    const texture = model.renderPasses[0].getOpaquePass().getColorTexture();\n\n    // as this is async we really don't want to store things in\n    // the class as multiple calls may start before resolving\n    // so anything specific to this request gets put into the\n    // result object (by value in most cases)\n    const result = {\n      width: texture.getWidth(),\n      height: texture.getHeight(),\n    };\n\n    // must be a multiple of 256 bytes, so 32 texels with rgba16\n    result.colorBufferWidth = 32 * Math.floor((result.width + 31) / 32);\n    result.colorBufferSizeInBytes = result.colorBufferWidth * result.height * 8;\n    const colorBuffer = vtkWebGPUBuffer.newInstance();\n    colorBuffer.setDevice(device);\n    /* eslint-disable no-bitwise */\n    /* eslint-disable no-undef */\n    colorBuffer.create(\n      result.colorBufferSizeInBytes,\n      GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST\n    );\n    /* eslint-enable no-bitwise */\n    /* eslint-enable no-undef */\n\n    const cmdEnc = model.device.createCommandEncoder();\n    cmdEnc.copyTextureToBuffer(\n      {\n        texture: texture.getHandle(),\n      },\n      {\n        buffer: colorBuffer.getHandle(),\n        bytesPerRow: 8 * result.colorBufferWidth,\n        rowsPerImage: result.height,\n      },\n      {\n        width: result.width,\n        height: result.height,\n        depthOrArrayLayers: 1,\n      }\n    );\n    device.submitCommandEncoder(cmdEnc);\n\n    /* eslint-disable no-undef */\n    const cLoad = colorBuffer.mapAsync(GPUMapMode.READ);\n    await cLoad;\n    /* eslint-enable no-undef */\n\n    result.colorValues = new Uint16Array(colorBuffer.getMappedRange().slice());\n    colorBuffer.unmap();\n    // repack the array\n    const tmparray = new Uint8ClampedArray(result.height * result.width * 4);\n    for (let y = 0; y < result.height; y++) {\n      for (let x = 0; x < result.width; x++) {\n        const doffset = (y * result.width + x) * 4;\n        const soffset = (y * result.colorBufferWidth + x) * 4;\n        tmparray[doffset] =\n          255.0 * HalfFloat.fromHalf(result.colorValues[soffset]);\n        tmparray[doffset + 1] =\n          255.0 * HalfFloat.fromHalf(result.colorValues[soffset + 1]);\n        tmparray[doffset + 2] =\n          255.0 * HalfFloat.fromHalf(result.colorValues[soffset + 2]);\n        tmparray[doffset + 3] =\n          255.0 * HalfFloat.fromHalf(result.colorValues[soffset + 3]);\n      }\n    }\n    result.colorValues = tmparray;\n    return result;\n  };\n\n  publicAPI.createSelector = () => {\n    const ret = vtkWebGPUHardwareSelector.newInstance();\n    ret.setWebGPURenderWindow(publicAPI);\n    return ret;\n  };\n\n  publicAPI.delete = macro.chain(publicAPI.delete, publicAPI.setViewStream);\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  initialized: false,\n  context: null,\n  adapter: null,\n  device: null,\n  canvas: null,\n  cursorVisibility: true,\n  cursor: 'pointer',\n  containerSize: null,\n  renderPasses: [],\n  notifyStartCaptureImage: false,\n  imageFormat: 'image/png',\n  useOffScreen: false,\n  useBackgroundImage: false,\n  nextPropID: 1,\n  xrSupported: false,\n  presentationFormat: null,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Create internal instances\n  model.canvas = document.createElement('canvas');\n  model.canvas.style.width = '100%';\n\n  // Create internal bgImage\n  model.bgImage = new Image();\n  model.bgImage.style.position = 'absolute';\n  model.bgImage.style.left = '0';\n  model.bgImage.style.top = '0';\n  model.bgImage.style.width = '100%';\n  model.bgImage.style.height = '100%';\n  model.bgImage.style.zIndex = '-1';\n\n  // Inheritance\n  vtkRenderWindowViewNode.extend(publicAPI, model, initialValues);\n\n  model.myFactory = vtkWebGPUViewNodeFactory.newInstance();\n  /* eslint-disable no-use-before-define */\n  model.myFactory.registerOverride('vtkRenderWindow', newInstance);\n  /* eslint-enable no-use-before-define */\n\n  // setup default forward pass rendering\n  model.renderPasses[0] = vtkForwardPass.newInstance();\n\n  if (!model.selector) {\n    model.selector = vtkWebGPUHardwareSelector.newInstance();\n    model.selector.setWebGPURenderWindow(publicAPI);\n  }\n\n  macro.event(publicAPI, model, 'imageReady');\n  macro.event(publicAPI, model, 'initialized');\n\n  // Build VTK API\n  macro.get(publicAPI, model, [\n    'commandEncoder',\n    'device',\n    'presentationFormat',\n    'useBackgroundImage',\n    'xrSupported',\n  ]);\n\n  macro.setGet(publicAPI, model, [\n    'initialized',\n    'context',\n    'canvas',\n    'device',\n    'renderPasses',\n    'notifyStartCaptureImage',\n    'cursor',\n    'useOffScreen',\n  ]);\n\n  macro.setGetArray(publicAPI, model, ['size'], 2);\n\n  // Object methods\n  vtkWebGPURenderWindow(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkWebGPURenderWindow');\n\n// ----------------------------------------------------------------------------\n// Register API specific RenderWindow implementation\n// ----------------------------------------------------------------------------\n\nregisterViewConstructor('WebGPU', newInstance);\n\n// ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}