{"ast":null,"code":"import vtkXMLReader from 'vtk.js/Sources/IO/XML/XMLReader';\nimport macro from 'vtk.js/Sources/macros';\nimport vtkImageData from 'vtk.js/Sources/Common/DataModel/ImageData'; // ----------------------------------------------------------------------------\n// vtkXMLImageDataReader methods\n// ----------------------------------------------------------------------------\n\nfunction vtkXMLImageDataReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkXMLImageDataReader');\n\n  publicAPI.parseXML = (rootElem, type, compressor, byteOrder, headerType) => {\n    const imageDataElem = rootElem.getElementsByTagName(model.dataType)[0];\n    const origin = imageDataElem.getAttribute('Origin').split(' ').map(t => Number(t));\n    const spacing = imageDataElem.getAttribute('Spacing').split(' ').map(t => Number(t));\n    const direction = imageDataElem.getAttribute('Direction')?.split(' ').map(t => Number(t));\n    const pieces = imageDataElem.getElementsByTagName('Piece');\n    const nbPieces = pieces.length;\n\n    for (let outputIndex = 0; outputIndex < nbPieces; outputIndex++) {\n      // Create image data\n      const piece = pieces[outputIndex];\n      const extent = piece.getAttribute('Extent').split(' ').map(t => Number(t));\n      const imageData = vtkImageData.newInstance({\n        origin,\n        spacing,\n        direction,\n        extent\n      }); // Fill data\n\n      vtkXMLReader.processFieldData(imageData.getNumberOfPoints(), piece.getElementsByTagName('PointData')[0], imageData.getPointData(), compressor, byteOrder, headerType, model.binaryBuffer);\n      vtkXMLReader.processFieldData(imageData.getNumberOfCells(), piece.getElementsByTagName('CellData')[0], imageData.getCellData(), compressor, byteOrder, headerType, model.binaryBuffer); // Add new output\n\n      model.output[outputIndex] = imageData;\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  dataType: 'ImageData'\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkXMLReader.extend(publicAPI, model, initialValues);\n  vtkXMLImageDataReader(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkXMLImageDataReader'); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend\n};","map":{"version":3,"names":["vtkXMLReader","macro","vtkImageData","vtkXMLImageDataReader","publicAPI","model","classHierarchy","push","parseXML","rootElem","type","compressor","byteOrder","headerType","imageDataElem","getElementsByTagName","dataType","origin","getAttribute","split","map","t","Number","spacing","direction","pieces","nbPieces","length","outputIndex","piece","extent","imageData","newInstance","processFieldData","getNumberOfPoints","getPointData","binaryBuffer","getNumberOfCells","getCellData","output","DEFAULT_VALUES","extend","initialValues","Object","assign"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/IO/XML/XMLImageDataReader/index.js"],"sourcesContent":["import vtkXMLReader from 'vtk.js/Sources/IO/XML/XMLReader';\nimport macro from 'vtk.js/Sources/macros';\nimport vtkImageData from 'vtk.js/Sources/Common/DataModel/ImageData';\n\n// ----------------------------------------------------------------------------\n// vtkXMLImageDataReader methods\n// ----------------------------------------------------------------------------\n\nfunction vtkXMLImageDataReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkXMLImageDataReader');\n\n  publicAPI.parseXML = (rootElem, type, compressor, byteOrder, headerType) => {\n    const imageDataElem = rootElem.getElementsByTagName(model.dataType)[0];\n    const origin = imageDataElem\n      .getAttribute('Origin')\n      .split(' ')\n      .map((t) => Number(t));\n    const spacing = imageDataElem\n      .getAttribute('Spacing')\n      .split(' ')\n      .map((t) => Number(t));\n    const direction = imageDataElem\n      .getAttribute('Direction')\n      ?.split(' ')\n      .map((t) => Number(t));\n    const pieces = imageDataElem.getElementsByTagName('Piece');\n    const nbPieces = pieces.length;\n\n    for (let outputIndex = 0; outputIndex < nbPieces; outputIndex++) {\n      // Create image data\n      const piece = pieces[outputIndex];\n      const extent = piece\n        .getAttribute('Extent')\n        .split(' ')\n        .map((t) => Number(t));\n      const imageData = vtkImageData.newInstance({\n        origin,\n        spacing,\n        direction,\n        extent,\n      });\n\n      // Fill data\n      vtkXMLReader.processFieldData(\n        imageData.getNumberOfPoints(),\n        piece.getElementsByTagName('PointData')[0],\n        imageData.getPointData(),\n        compressor,\n        byteOrder,\n        headerType,\n        model.binaryBuffer\n      );\n\n      vtkXMLReader.processFieldData(\n        imageData.getNumberOfCells(),\n        piece.getElementsByTagName('CellData')[0],\n        imageData.getCellData(),\n        compressor,\n        byteOrder,\n        headerType,\n        model.binaryBuffer\n      );\n\n      // Add new output\n      model.output[outputIndex] = imageData;\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  dataType: 'ImageData',\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkXMLReader.extend(publicAPI, model, initialValues);\n  vtkXMLImageDataReader(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkXMLImageDataReader');\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}