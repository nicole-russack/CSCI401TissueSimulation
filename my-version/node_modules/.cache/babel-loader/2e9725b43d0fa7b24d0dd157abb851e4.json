{"ast":null,"code":"import macro from 'vtk.js/Sources/macros';\nimport vtkOpenGLTexture from 'vtk.js/Sources/Rendering/OpenGL/Texture';\nimport vtkOpenGLFramebuffer from 'vtk.js/Sources/Rendering/OpenGL/Framebuffer';\nimport vtkRenderPass from 'vtk.js/Sources/Rendering/SceneGraph/RenderPass';\nimport vtkDataArray from 'vtk.js/Sources/Common/Core/DataArray';\nimport vtkHelper from 'vtk.js/Sources/Rendering/OpenGL/Helper';\nimport vtkProperty from 'vtk.js/Sources/Rendering/Core/Property';\nimport vtkShaderProgram from 'vtk.js/Sources/Rendering/OpenGL/ShaderProgram';\nimport vtkVertexArrayObject from 'vtk.js/Sources/Rendering/OpenGL/VertexArrayObject';\nconst {\n  Representation\n} = vtkProperty;\nconst {\n  vtkErrorMacro\n} = macro; // ----------------------------------------------------------------------------\n\nfunction translucentShaderReplacement(shaders) {\n  const substituteRes = vtkShaderProgram.substitute(shaders.Fragment, '//VTK::RenderPassFragmentShader::Impl', `\n      float weight = gl_FragData[0].a * pow(max(1.1 - gl_FragCoord.z, 0.0), 2.0);\n      gl_FragData[0] = vec4(gl_FragData[0].rgb*weight, gl_FragData[0].a);\n      gl_FragData[1].r = weight;\n    `, false);\n  shaders.Fragment = substituteRes.result;\n}\n\nconst oitpFragTemplate = `//VTK::System::Dec\n\nin vec2 tcoord;\n\nuniform sampler2D translucentRTexture;\nuniform sampler2D translucentRGBATexture;\n\n// the output of this shader\n//VTK::Output::Dec\n\nvoid main()\n{\n  vec4 t1Color = texture(translucentRGBATexture, tcoord);\n  float t2Color = texture(translucentRTexture, tcoord).r;\n  gl_FragData[0] = vec4(t1Color.rgb/max(t2Color,0.01), 1.0 - t1Color.a);\n}\n`;\n\nfunction vtkOpenGLOrderIndependentTranslucentPass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLOrderIndependentTranslucentPass'); // build vertices etc\n\n  publicAPI.createVertexBuffer = () => {\n    // 4 corner points in clipping space in order (x, y, z) where z is always set to -1\n    // prettier-ignore\n    const ptsArray = new Float32Array([-1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1]); // 4 corresponding corner points in texture space in order (x, y)\n\n    const tcoordArray = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]); // a square defined as cell relation ship in order (cell_size, v1, v2, v3, v4)\n\n    const cellArray = new Uint16Array([4, 0, 1, 3, 2]);\n    const points = vtkDataArray.newInstance({\n      numberOfComponents: 3,\n      values: ptsArray\n    });\n    points.setName('points');\n    const tcoords = vtkDataArray.newInstance({\n      numberOfComponents: 2,\n      values: tcoordArray\n    });\n    tcoords.setName('tcoords');\n    const cells = vtkDataArray.newInstance({\n      numberOfComponents: 1,\n      values: cellArray\n    });\n    model.tris.getCABO().createVBO(cells, 'polys', Representation.SURFACE, {\n      points,\n      tcoords,\n      cellOffset: 0\n    });\n    model.VBOBuildTime.modified();\n  };\n\n  publicAPI.createFramebuffer = viewNode => {\n    const size = viewNode.getSize();\n    const gl = viewNode.getContext();\n    model.framebuffer = vtkOpenGLFramebuffer.newInstance();\n    model.framebuffer.setOpenGLRenderWindow(viewNode);\n    model.framebuffer.create(...size);\n    model.framebuffer.saveCurrentBindingsAndBuffers();\n    model.framebuffer.bind();\n    model.translucentRGBATexture = vtkOpenGLTexture.newInstance();\n    model.translucentRGBATexture.setInternalFormat(gl.RGBA16F);\n    model.translucentRGBATexture.setFormat(gl.RGBA);\n    model.translucentRGBATexture.setOpenGLDataType(gl.HALF_FLOAT);\n    model.translucentRGBATexture.setOpenGLRenderWindow(viewNode);\n    model.translucentRGBATexture.create2DFromRaw(size[0], size[1], 4, 'Float32Array', null);\n    model.translucentRTexture = vtkOpenGLTexture.newInstance();\n    model.translucentRTexture.setInternalFormat(gl.R16F);\n    model.translucentRTexture.setFormat(gl.RED);\n    model.translucentRTexture.setOpenGLDataType(gl.HALF_FLOAT);\n    model.translucentRTexture.setOpenGLRenderWindow(viewNode);\n    model.translucentRTexture.create2DFromRaw(size[0], size[1], 1, 'Float32Array', null);\n    model.translucentZTexture = vtkOpenGLTexture.newInstance();\n    model.translucentZTexture.setOpenGLRenderWindow(viewNode);\n    model.translucentZTexture.createDepthFromRaw(size[0], size[1], 'Float32Array', null);\n    model.framebuffer.setColorBuffer(model.translucentRGBATexture, 0);\n    model.framebuffer.setColorBuffer(model.translucentRTexture, 1);\n    model.framebuffer.setDepthBuffer(model.translucentZTexture);\n  };\n\n  publicAPI.createCopyShader = viewNode => {\n    model.copyShader = viewNode.getShaderCache().readyShaderProgramArray(['//VTK::System::Dec', 'attribute vec4 vertexDC;', 'attribute vec2 tcoordTC;', 'varying vec2 tcoord;', 'void main() { tcoord = tcoordTC; gl_Position = vertexDC; }'].join('\\n'), oitpFragTemplate, '');\n  };\n\n  publicAPI.createVBO = viewNode => {\n    const gl = viewNode.getContext();\n    model.tris.setOpenGLRenderWindow(viewNode);\n    publicAPI.createVertexBuffer();\n    const program = model.copyShader; // prepare the vertex and triangle data for the image plane to render to\n\n    model.tris.getCABO().bind();\n\n    if (!model.copyVAO.addAttributeArray(program, model.tris.getCABO(), 'vertexDC', model.tris.getCABO().getVertexOffset(), model.tris.getCABO().getStride(), gl.FLOAT, 3, gl.FALSE)) {\n      vtkErrorMacro('Error setting vertexDC in copy shader VAO.');\n    }\n\n    if (!model.copyVAO.addAttributeArray(program, model.tris.getCABO(), 'tcoordTC', model.tris.getCABO().getTCoordOffset(), model.tris.getCABO().getStride(), gl.FLOAT, 2, gl.FALSE)) {\n      vtkErrorMacro('Error setting vertexDC in copy shader VAO.');\n    }\n  };\n\n  publicAPI.traverse = (viewNode, renNode, forwardPass) => {\n    if (model.deleted) {\n      return;\n    }\n\n    const size = viewNode.getSize();\n    const gl = viewNode.getContext(); // if we lack the webgl2 and half floatsupport just do\n    // basic alpha blending\n\n    model._supported = false;\n\n    if (renNode.getSelector() || !gl || !viewNode.getWebgl2() || !gl.getExtension('EXT_color_buffer_half_float') && !gl.getExtension('EXT_color_buffer_float')) {\n      publicAPI.setCurrentOperation('translucentPass');\n      renNode.traverse(publicAPI);\n      return;\n    }\n\n    model._supported = true; // prepare framebuffer // allocate framebuffer if needed and bind it\n\n    if (model.framebuffer === null) {\n      publicAPI.createFramebuffer(viewNode);\n    } else {\n      const fbSize = model.framebuffer.getSize();\n\n      if (fbSize === null || fbSize[0] !== size[0] || fbSize[1] !== size[1]) {\n        model.framebuffer.releaseGraphicsResources();\n        model.translucentRGBATexture.releaseGraphicsResources(viewNode);\n        model.translucentRTexture.releaseGraphicsResources(viewNode);\n        model.translucentZTexture.releaseGraphicsResources(viewNode);\n        publicAPI.createFramebuffer(viewNode);\n      } else {\n        // store framebuffer bindings to restore them later\n        model.framebuffer.saveCurrentBindingsAndBuffers();\n        model.framebuffer.bind();\n      }\n    }\n\n    gl.drawBuffers([gl.COLOR_ATTACHMENT0]);\n    gl.clearBufferfv(gl.COLOR, 0, [0.0, 0.0, 0.0, 0.0]);\n    gl.clearBufferfv(gl.DEPTH, 0, [1.0]);\n    gl.colorMask(false, false, false, false); // rerender the opaque pass to set the depth buffer\n    // TODO remove when webgl1 is deprecated and instead\n    // have the forward pass use a texture backed zbuffer\n\n    if (forwardPass.getOpaqueActorCount() > 0) {\n      forwardPass.setCurrentOperation('opaquePass');\n      renNode.traverse(forwardPass);\n    }\n\n    gl.colorMask(true, true, true, true);\n    gl.drawBuffers([gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1]); // make sure to clear the entire framebuffer as we will\n    // be blitting the entire thing all of it needs good initial values\n\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.scissor(0, 0, size[0], size[1]);\n    gl.clearBufferfv(gl.COLOR, 0, [0.0, 0.0, 0.0, 1.0]);\n    gl.clearBufferfv(gl.COLOR, 1, [0.0, 0.0, 0.0, 0.0]);\n    gl.enable(gl.DEPTH_TEST);\n    gl.enable(gl.BLEND); // basic gist is we accumulate color into RGB We compute final opacity\n    // into A We store accumulated opacity into R of the R texture.\n\n    gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ZERO, gl.ONE_MINUS_SRC_ALPHA); // now do the translucent rendering\n\n    publicAPI.setCurrentOperation('translucentPass');\n    renNode.traverse(publicAPI);\n    gl.drawBuffers([gl.NONE]);\n    model.framebuffer.restorePreviousBindingsAndBuffers(); // gl.drawBuffers([gl.BACK]);\n    // make sure the copy shader is ready\n\n    if (model.copyShader === null) {\n      publicAPI.createCopyShader(viewNode);\n    } else {\n      viewNode.getShaderCache().readyShaderProgram(model.copyShader);\n    } // make sure we have a VAO\n\n\n    if (!model.copyVAO) {\n      model.copyVAO = vtkVertexArrayObject.newInstance();\n      model.copyVAO.setOpenGLRenderWindow(viewNode);\n    }\n\n    model.copyVAO.bind(); // make sure the VBO is up to date\n\n    if (model.VBOBuildTime.getMTime() < publicAPI.getMTime()) {\n      publicAPI.createVBO(viewNode);\n    }\n\n    gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.depthMask(false);\n    gl.depthFunc(gl.ALWAYS);\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.scissor(0, 0, size[0], size[1]); // activate texture\n\n    model.translucentRGBATexture.activate();\n    model.copyShader.setUniformi('translucentRGBATexture', model.translucentRGBATexture.getTextureUnit());\n    model.translucentRTexture.activate();\n    model.copyShader.setUniformi('translucentRTexture', model.translucentRTexture.getTextureUnit()); // render quad\n\n    gl.drawArrays(gl.TRIANGLES, 0, model.tris.getCABO().getElementCount());\n    gl.depthMask(true);\n    gl.depthFunc(gl.LEQUAL);\n    model.translucentRGBATexture.deactivate();\n    model.translucentRTexture.deactivate();\n  };\n\n  publicAPI.getShaderReplacement = () => {\n    if (model._supported) {\n      return translucentShaderReplacement;\n    }\n\n    return null;\n  };\n\n  publicAPI.releaseGraphicsResources = viewNode => {\n    if (model.framebuffer) {\n      model.framebuffer.releaseGraphicsResources(viewNode);\n      model.framebuffer = null;\n    }\n\n    if (model.translucentRGBATexture) {\n      model.translucentRGBATexture.releaseGraphicsResources(viewNode);\n      model.translucentRGBATexture = null;\n    }\n\n    if (model.translucentRTexture) {\n      model.translucentRTexture.releaseGraphicsResources(viewNode);\n      model.translucentRTexture = null;\n    }\n\n    if (model.translucentZTexture) {\n      model.translucentZTexture.releaseGraphicsResources(viewNode);\n      model.translucentZTexture = null;\n    }\n\n    if (model.copyVAO) {\n      model.copyVAO.releaseGraphicsResources(viewNode);\n      model.copyVAO = null;\n    }\n\n    if (model.copyShader) {\n      model.copyShader.releaseGraphicsResources(viewNode);\n      model.copyShader = null;\n    }\n\n    if (model.tris) {\n      model.tris.releaseGraphicsResources(viewNode);\n      model.tris = null;\n    }\n\n    publicAPI.modified();\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  framebuffer: null,\n  copyShader: null,\n  tris: null\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  model.VBOBuildTime = {};\n  macro.obj(model.VBOBuildTime, {\n    mtime: 0\n  });\n  model.tris = vtkHelper.newInstance();\n  macro.get(publicAPI, model, ['framebuffer']); // Object methods\n\n  vtkOpenGLOrderIndependentTranslucentPass(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkOpenGLOrderIndependentTranslucentPass'); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend\n};","map":{"version":3,"names":["macro","vtkOpenGLTexture","vtkOpenGLFramebuffer","vtkRenderPass","vtkDataArray","vtkHelper","vtkProperty","vtkShaderProgram","vtkVertexArrayObject","Representation","vtkErrorMacro","translucentShaderReplacement","shaders","substituteRes","substitute","Fragment","result","oitpFragTemplate","vtkOpenGLOrderIndependentTranslucentPass","publicAPI","model","classHierarchy","push","createVertexBuffer","ptsArray","Float32Array","tcoordArray","cellArray","Uint16Array","points","newInstance","numberOfComponents","values","setName","tcoords","cells","tris","getCABO","createVBO","SURFACE","cellOffset","VBOBuildTime","modified","createFramebuffer","viewNode","size","getSize","gl","getContext","framebuffer","setOpenGLRenderWindow","create","saveCurrentBindingsAndBuffers","bind","translucentRGBATexture","setInternalFormat","RGBA16F","setFormat","RGBA","setOpenGLDataType","HALF_FLOAT","create2DFromRaw","translucentRTexture","R16F","RED","translucentZTexture","createDepthFromRaw","setColorBuffer","setDepthBuffer","createCopyShader","copyShader","getShaderCache","readyShaderProgramArray","join","program","copyVAO","addAttributeArray","getVertexOffset","getStride","FLOAT","FALSE","getTCoordOffset","traverse","renNode","forwardPass","deleted","_supported","getSelector","getWebgl2","getExtension","setCurrentOperation","fbSize","releaseGraphicsResources","drawBuffers","COLOR_ATTACHMENT0","clearBufferfv","COLOR","DEPTH","colorMask","getOpaqueActorCount","COLOR_ATTACHMENT1","viewport","scissor","enable","DEPTH_TEST","BLEND","blendFuncSeparate","ONE","ZERO","ONE_MINUS_SRC_ALPHA","NONE","restorePreviousBindingsAndBuffers","readyShaderProgram","getMTime","SRC_ALPHA","depthMask","depthFunc","ALWAYS","activate","setUniformi","getTextureUnit","drawArrays","TRIANGLES","getElementCount","LEQUAL","deactivate","getShaderReplacement","DEFAULT_VALUES","extend","initialValues","Object","assign","obj","mtime","get"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/OpenGL/OrderIndependentTranslucentPass/index.js"],"sourcesContent":["import macro from 'vtk.js/Sources/macros';\nimport vtkOpenGLTexture from 'vtk.js/Sources/Rendering/OpenGL/Texture';\nimport vtkOpenGLFramebuffer from 'vtk.js/Sources/Rendering/OpenGL/Framebuffer';\nimport vtkRenderPass from 'vtk.js/Sources/Rendering/SceneGraph/RenderPass';\nimport vtkDataArray from 'vtk.js/Sources/Common/Core/DataArray';\nimport vtkHelper from 'vtk.js/Sources/Rendering/OpenGL/Helper';\nimport vtkProperty from 'vtk.js/Sources/Rendering/Core/Property';\nimport vtkShaderProgram from 'vtk.js/Sources/Rendering/OpenGL/ShaderProgram';\nimport vtkVertexArrayObject from 'vtk.js/Sources/Rendering/OpenGL/VertexArrayObject';\n\nconst { Representation } = vtkProperty;\nconst { vtkErrorMacro } = macro;\n\n// ----------------------------------------------------------------------------\n\nfunction translucentShaderReplacement(shaders) {\n  const substituteRes = vtkShaderProgram.substitute(\n    shaders.Fragment,\n    '//VTK::RenderPassFragmentShader::Impl',\n    `\n      float weight = gl_FragData[0].a * pow(max(1.1 - gl_FragCoord.z, 0.0), 2.0);\n      gl_FragData[0] = vec4(gl_FragData[0].rgb*weight, gl_FragData[0].a);\n      gl_FragData[1].r = weight;\n    `,\n    false\n  );\n  shaders.Fragment = substituteRes.result;\n}\n\nconst oitpFragTemplate = `//VTK::System::Dec\n\nin vec2 tcoord;\n\nuniform sampler2D translucentRTexture;\nuniform sampler2D translucentRGBATexture;\n\n// the output of this shader\n//VTK::Output::Dec\n\nvoid main()\n{\n  vec4 t1Color = texture(translucentRGBATexture, tcoord);\n  float t2Color = texture(translucentRTexture, tcoord).r;\n  gl_FragData[0] = vec4(t1Color.rgb/max(t2Color,0.01), 1.0 - t1Color.a);\n}\n`;\n\nfunction vtkOpenGLOrderIndependentTranslucentPass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLOrderIndependentTranslucentPass');\n\n  // build vertices etc\n  publicAPI.createVertexBuffer = () => {\n    // 4 corner points in clipping space in order (x, y, z) where z is always set to -1\n    // prettier-ignore\n    const ptsArray = new Float32Array([\n      -1, -1, -1, 1,\n      -1, -1, -1, 1,\n      -1, 1, 1, -1,\n    ]);\n\n    // 4 corresponding corner points in texture space in order (x, y)\n    const tcoordArray = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n\n    // a square defined as cell relation ship in order (cell_size, v1, v2, v3, v4)\n    const cellArray = new Uint16Array([4, 0, 1, 3, 2]);\n\n    const points = vtkDataArray.newInstance({\n      numberOfComponents: 3,\n      values: ptsArray,\n    });\n    points.setName('points');\n    const tcoords = vtkDataArray.newInstance({\n      numberOfComponents: 2,\n      values: tcoordArray,\n    });\n    tcoords.setName('tcoords');\n    const cells = vtkDataArray.newInstance({\n      numberOfComponents: 1,\n      values: cellArray,\n    });\n    model.tris.getCABO().createVBO(cells, 'polys', Representation.SURFACE, {\n      points,\n      tcoords,\n      cellOffset: 0,\n    });\n\n    model.VBOBuildTime.modified();\n  };\n\n  publicAPI.createFramebuffer = (viewNode) => {\n    const size = viewNode.getSize();\n    const gl = viewNode.getContext();\n\n    model.framebuffer = vtkOpenGLFramebuffer.newInstance();\n    model.framebuffer.setOpenGLRenderWindow(viewNode);\n    model.framebuffer.create(...size);\n    model.framebuffer.saveCurrentBindingsAndBuffers();\n    model.framebuffer.bind();\n\n    model.translucentRGBATexture = vtkOpenGLTexture.newInstance();\n    model.translucentRGBATexture.setInternalFormat(gl.RGBA16F);\n    model.translucentRGBATexture.setFormat(gl.RGBA);\n    model.translucentRGBATexture.setOpenGLDataType(gl.HALF_FLOAT);\n    model.translucentRGBATexture.setOpenGLRenderWindow(viewNode);\n    model.translucentRGBATexture.create2DFromRaw(\n      size[0],\n      size[1],\n      4,\n      'Float32Array',\n      null\n    );\n\n    model.translucentRTexture = vtkOpenGLTexture.newInstance();\n    model.translucentRTexture.setInternalFormat(gl.R16F);\n    model.translucentRTexture.setFormat(gl.RED);\n    model.translucentRTexture.setOpenGLDataType(gl.HALF_FLOAT);\n    model.translucentRTexture.setOpenGLRenderWindow(viewNode);\n    model.translucentRTexture.create2DFromRaw(\n      size[0],\n      size[1],\n      1,\n      'Float32Array',\n      null\n    );\n\n    model.translucentZTexture = vtkOpenGLTexture.newInstance();\n    model.translucentZTexture.setOpenGLRenderWindow(viewNode);\n    model.translucentZTexture.createDepthFromRaw(\n      size[0],\n      size[1],\n      'Float32Array',\n      null\n    );\n\n    model.framebuffer.setColorBuffer(model.translucentRGBATexture, 0);\n    model.framebuffer.setColorBuffer(model.translucentRTexture, 1);\n    model.framebuffer.setDepthBuffer(model.translucentZTexture);\n  };\n\n  publicAPI.createCopyShader = (viewNode) => {\n    model.copyShader = viewNode\n      .getShaderCache()\n      .readyShaderProgramArray(\n        [\n          '//VTK::System::Dec',\n          'attribute vec4 vertexDC;',\n          'attribute vec2 tcoordTC;',\n          'varying vec2 tcoord;',\n          'void main() { tcoord = tcoordTC; gl_Position = vertexDC; }',\n        ].join('\\n'),\n        oitpFragTemplate,\n        ''\n      );\n  };\n\n  publicAPI.createVBO = (viewNode) => {\n    const gl = viewNode.getContext();\n    model.tris.setOpenGLRenderWindow(viewNode);\n    publicAPI.createVertexBuffer();\n\n    const program = model.copyShader;\n    // prepare the vertex and triangle data for the image plane to render to\n\n    model.tris.getCABO().bind();\n    if (\n      !model.copyVAO.addAttributeArray(\n        program,\n        model.tris.getCABO(),\n        'vertexDC',\n        model.tris.getCABO().getVertexOffset(),\n        model.tris.getCABO().getStride(),\n        gl.FLOAT,\n        3,\n        gl.FALSE\n      )\n    ) {\n      vtkErrorMacro('Error setting vertexDC in copy shader VAO.');\n    }\n    if (\n      !model.copyVAO.addAttributeArray(\n        program,\n        model.tris.getCABO(),\n        'tcoordTC',\n        model.tris.getCABO().getTCoordOffset(),\n        model.tris.getCABO().getStride(),\n        gl.FLOAT,\n        2,\n        gl.FALSE\n      )\n    ) {\n      vtkErrorMacro('Error setting vertexDC in copy shader VAO.');\n    }\n  };\n\n  publicAPI.traverse = (viewNode, renNode, forwardPass) => {\n    if (model.deleted) {\n      return;\n    }\n\n    const size = viewNode.getSize();\n    const gl = viewNode.getContext();\n\n    // if we lack the webgl2 and half floatsupport just do\n    // basic alpha blending\n    model._supported = false;\n    if (\n      renNode.getSelector() ||\n      !gl ||\n      !viewNode.getWebgl2() ||\n      (!gl.getExtension('EXT_color_buffer_half_float') &&\n        !gl.getExtension('EXT_color_buffer_float'))\n    ) {\n      publicAPI.setCurrentOperation('translucentPass');\n      renNode.traverse(publicAPI);\n      return;\n    }\n\n    model._supported = true;\n\n    // prepare framebuffer // allocate framebuffer if needed and bind it\n    if (model.framebuffer === null) {\n      publicAPI.createFramebuffer(viewNode);\n    } else {\n      const fbSize = model.framebuffer.getSize();\n      if (fbSize === null || fbSize[0] !== size[0] || fbSize[1] !== size[1]) {\n        model.framebuffer.releaseGraphicsResources();\n        model.translucentRGBATexture.releaseGraphicsResources(viewNode);\n        model.translucentRTexture.releaseGraphicsResources(viewNode);\n        model.translucentZTexture.releaseGraphicsResources(viewNode);\n        publicAPI.createFramebuffer(viewNode);\n      } else {\n        // store framebuffer bindings to restore them later\n        model.framebuffer.saveCurrentBindingsAndBuffers();\n        model.framebuffer.bind();\n      }\n    }\n\n    gl.drawBuffers([gl.COLOR_ATTACHMENT0]);\n    gl.clearBufferfv(gl.COLOR, 0, [0.0, 0.0, 0.0, 0.0]);\n    gl.clearBufferfv(gl.DEPTH, 0, [1.0]);\n\n    gl.colorMask(false, false, false, false);\n\n    // rerender the opaque pass to set the depth buffer\n    // TODO remove when webgl1 is deprecated and instead\n    // have the forward pass use a texture backed zbuffer\n    if (forwardPass.getOpaqueActorCount() > 0) {\n      forwardPass.setCurrentOperation('opaquePass');\n      renNode.traverse(forwardPass);\n    }\n\n    gl.colorMask(true, true, true, true);\n    gl.drawBuffers([gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1]);\n\n    // make sure to clear the entire framebuffer as we will\n    // be blitting the entire thing all of it needs good initial values\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.scissor(0, 0, size[0], size[1]);\n\n    gl.clearBufferfv(gl.COLOR, 0, [0.0, 0.0, 0.0, 1.0]);\n    gl.clearBufferfv(gl.COLOR, 1, [0.0, 0.0, 0.0, 0.0]);\n\n    gl.enable(gl.DEPTH_TEST);\n    gl.enable(gl.BLEND);\n\n    // basic gist is we accumulate color into RGB We compute final opacity\n    // into A We store accumulated opacity into R of the R texture.\n    gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ZERO, gl.ONE_MINUS_SRC_ALPHA);\n\n    // now do the translucent rendering\n    publicAPI.setCurrentOperation('translucentPass');\n    renNode.traverse(publicAPI);\n\n    gl.drawBuffers([gl.NONE]);\n    model.framebuffer.restorePreviousBindingsAndBuffers();\n    // gl.drawBuffers([gl.BACK]);\n\n    // make sure the copy shader is ready\n    if (model.copyShader === null) {\n      publicAPI.createCopyShader(viewNode);\n    } else {\n      viewNode.getShaderCache().readyShaderProgram(model.copyShader);\n    }\n\n    // make sure we have a VAO\n    if (!model.copyVAO) {\n      model.copyVAO = vtkVertexArrayObject.newInstance();\n      model.copyVAO.setOpenGLRenderWindow(viewNode);\n    }\n    model.copyVAO.bind();\n\n    // make sure the VBO is up to date\n    if (model.VBOBuildTime.getMTime() < publicAPI.getMTime()) {\n      publicAPI.createVBO(viewNode);\n    }\n\n    gl.blendFuncSeparate(\n      gl.SRC_ALPHA,\n      gl.ONE_MINUS_SRC_ALPHA,\n      gl.ONE,\n      gl.ONE_MINUS_SRC_ALPHA\n    );\n    gl.depthMask(false);\n    gl.depthFunc(gl.ALWAYS);\n\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.scissor(0, 0, size[0], size[1]);\n\n    // activate texture\n    model.translucentRGBATexture.activate();\n    model.copyShader.setUniformi(\n      'translucentRGBATexture',\n      model.translucentRGBATexture.getTextureUnit()\n    );\n    model.translucentRTexture.activate();\n    model.copyShader.setUniformi(\n      'translucentRTexture',\n      model.translucentRTexture.getTextureUnit()\n    );\n\n    // render quad\n    gl.drawArrays(gl.TRIANGLES, 0, model.tris.getCABO().getElementCount());\n\n    gl.depthMask(true);\n    gl.depthFunc(gl.LEQUAL);\n    model.translucentRGBATexture.deactivate();\n    model.translucentRTexture.deactivate();\n  };\n\n  publicAPI.getShaderReplacement = () => {\n    if (model._supported) {\n      return translucentShaderReplacement;\n    }\n    return null;\n  };\n\n  publicAPI.releaseGraphicsResources = (viewNode) => {\n    if (model.framebuffer) {\n      model.framebuffer.releaseGraphicsResources(viewNode);\n      model.framebuffer = null;\n    }\n    if (model.translucentRGBATexture) {\n      model.translucentRGBATexture.releaseGraphicsResources(viewNode);\n      model.translucentRGBATexture = null;\n    }\n    if (model.translucentRTexture) {\n      model.translucentRTexture.releaseGraphicsResources(viewNode);\n      model.translucentRTexture = null;\n    }\n    if (model.translucentZTexture) {\n      model.translucentZTexture.releaseGraphicsResources(viewNode);\n      model.translucentZTexture = null;\n    }\n    if (model.copyVAO) {\n      model.copyVAO.releaseGraphicsResources(viewNode);\n      model.copyVAO = null;\n    }\n    if (model.copyShader) {\n      model.copyShader.releaseGraphicsResources(viewNode);\n      model.copyShader = null;\n    }\n    if (model.tris) {\n      model.tris.releaseGraphicsResources(viewNode);\n      model.tris = null;\n    }\n    publicAPI.modified();\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  framebuffer: null,\n  copyShader: null,\n  tris: null,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n\n  model.VBOBuildTime = {};\n  macro.obj(model.VBOBuildTime, { mtime: 0 });\n\n  model.tris = vtkHelper.newInstance();\n\n  macro.get(publicAPI, model, ['framebuffer']);\n\n  // Object methods\n  vtkOpenGLOrderIndependentTranslucentPass(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(\n  extend,\n  'vtkOpenGLOrderIndependentTranslucentPass'\n);\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}