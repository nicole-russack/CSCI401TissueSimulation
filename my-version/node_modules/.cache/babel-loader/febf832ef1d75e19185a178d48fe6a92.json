{"ast":null,"code":"import macro from 'vtk.js/Sources/macros'; // ----------------------------------------------------------------------------\n// vtkAbstractMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkAbstractMapper(publicAPI, model) {\n  model.classHierarchy.push('vtkAbstractMapper');\n\n  publicAPI.update = () => {\n    publicAPI.getInputData();\n  };\n\n  publicAPI.addClippingPlane = plane => {\n    if (!plane.isA('vtkPlane')) {\n      return false;\n    }\n\n    if (!model.clippingPlanes.includes(plane)) {\n      model.clippingPlanes.push(plane);\n      publicAPI.modified();\n      return true;\n    }\n\n    return false;\n  };\n\n  publicAPI.getNumberOfClippingPlanes = () => model.clippingPlanes.length;\n\n  publicAPI.removeAllClippingPlanes = () => {\n    if (model.clippingPlanes.length === 0) {\n      return false;\n    }\n\n    model.clippingPlanes.length = 0;\n    publicAPI.modified();\n    return true;\n  };\n\n  publicAPI.removeClippingPlane = clippingPlane => {\n    const i = model.clippingPlanes.indexOf(clippingPlane);\n\n    if (i === -1) {\n      return false;\n    }\n\n    model.clippingPlanes.splice(i, 1);\n    publicAPI.modified();\n    return true;\n  };\n\n  publicAPI.getClippingPlanes = () => model.clippingPlanes;\n\n  publicAPI.setClippingPlanes = planes => {\n    if (!planes) {\n      return;\n    }\n\n    if (!Array.isArray(planes)) {\n      publicAPI.addClippingPlane(planes);\n    } else {\n      const nbPlanes = planes.length;\n\n      for (let i = 0; i < nbPlanes && i < 6; i++) {\n        publicAPI.addClippingPlane(planes[i]);\n      }\n    }\n  };\n\n  publicAPI.getClippingPlaneInDataCoords = (propMatrix, i, hnormal) => {\n    const clipPlanes = model.clippingPlanes;\n    const mat = propMatrix;\n\n    if (clipPlanes) {\n      const n = clipPlanes.length;\n\n      if (i >= 0 && i < n) {\n        // Get the plane\n        const plane = clipPlanes[i];\n        const normal = plane.getNormal();\n        const origin = plane.getOrigin(); // Compute the plane equation\n\n        const v1 = normal[0];\n        const v2 = normal[1];\n        const v3 = normal[2];\n        const v4 = -(v1 * origin[0] + v2 * origin[1] + v3 * origin[2]); // Transform normal from world to data coords\n\n        hnormal[0] = v1 * mat[0] + v2 * mat[4] + v3 * mat[8] + v4 * mat[12];\n        hnormal[1] = v1 * mat[1] + v2 * mat[5] + v3 * mat[9] + v4 * mat[13];\n        hnormal[2] = v1 * mat[2] + v2 * mat[6] + v3 * mat[10] + v4 * mat[14];\n        hnormal[3] = v1 * mat[3] + v2 * mat[7] + v3 * mat[11] + v4 * mat[15];\n        return;\n      }\n    }\n\n    macro.vtkErrorMacro(`Clipping plane index ${i} is out of range.`);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  clippingPlanes: []\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods\n\n  macro.obj(publicAPI, model);\n  macro.algo(publicAPI, model, 1, 0);\n\n  if (!model.clippingPlanes) {\n    model.clippingPlanes = [];\n  }\n\n  vtkAbstractMapper(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport default {\n  extend\n};","map":{"version":3,"names":["macro","vtkAbstractMapper","publicAPI","model","classHierarchy","push","update","getInputData","addClippingPlane","plane","isA","clippingPlanes","includes","modified","getNumberOfClippingPlanes","length","removeAllClippingPlanes","removeClippingPlane","clippingPlane","i","indexOf","splice","getClippingPlanes","setClippingPlanes","planes","Array","isArray","nbPlanes","getClippingPlaneInDataCoords","propMatrix","hnormal","clipPlanes","mat","n","normal","getNormal","origin","getOrigin","v1","v2","v3","v4","vtkErrorMacro","DEFAULT_VALUES","extend","initialValues","Object","assign","obj","algo"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/Core/AbstractMapper/index.js"],"sourcesContent":["import macro from 'vtk.js/Sources/macros';\n\n// ----------------------------------------------------------------------------\n// vtkAbstractMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkAbstractMapper(publicAPI, model) {\n  model.classHierarchy.push('vtkAbstractMapper');\n  publicAPI.update = () => {\n    publicAPI.getInputData();\n  };\n\n  publicAPI.addClippingPlane = (plane) => {\n    if (!plane.isA('vtkPlane')) {\n      return false;\n    }\n    if (!model.clippingPlanes.includes(plane)) {\n      model.clippingPlanes.push(plane);\n      publicAPI.modified();\n      return true;\n    }\n    return false;\n  };\n\n  publicAPI.getNumberOfClippingPlanes = () => model.clippingPlanes.length;\n\n  publicAPI.removeAllClippingPlanes = () => {\n    if (model.clippingPlanes.length === 0) {\n      return false;\n    }\n    model.clippingPlanes.length = 0;\n    publicAPI.modified();\n    return true;\n  };\n\n  publicAPI.removeClippingPlane = (clippingPlane) => {\n    const i = model.clippingPlanes.indexOf(clippingPlane);\n    if (i === -1) {\n      return false;\n    }\n    model.clippingPlanes.splice(i, 1);\n    publicAPI.modified();\n    return true;\n  };\n\n  publicAPI.getClippingPlanes = () => model.clippingPlanes;\n\n  publicAPI.setClippingPlanes = (planes) => {\n    if (!planes) {\n      return;\n    }\n    if (!Array.isArray(planes)) {\n      publicAPI.addClippingPlane(planes);\n    } else {\n      const nbPlanes = planes.length;\n      for (let i = 0; i < nbPlanes && i < 6; i++) {\n        publicAPI.addClippingPlane(planes[i]);\n      }\n    }\n  };\n\n  publicAPI.getClippingPlaneInDataCoords = (propMatrix, i, hnormal) => {\n    const clipPlanes = model.clippingPlanes;\n    const mat = propMatrix;\n\n    if (clipPlanes) {\n      const n = clipPlanes.length;\n      if (i >= 0 && i < n) {\n        // Get the plane\n        const plane = clipPlanes[i];\n        const normal = plane.getNormal();\n        const origin = plane.getOrigin();\n\n        // Compute the plane equation\n        const v1 = normal[0];\n        const v2 = normal[1];\n        const v3 = normal[2];\n        const v4 = -(v1 * origin[0] + v2 * origin[1] + v3 * origin[2]);\n\n        // Transform normal from world to data coords\n        hnormal[0] = v1 * mat[0] + v2 * mat[4] + v3 * mat[8] + v4 * mat[12];\n        hnormal[1] = v1 * mat[1] + v2 * mat[5] + v3 * mat[9] + v4 * mat[13];\n        hnormal[2] = v1 * mat[2] + v2 * mat[6] + v3 * mat[10] + v4 * mat[14];\n        hnormal[3] = v1 * mat[3] + v2 * mat[7] + v3 * mat[11] + v4 * mat[15];\n\n        return;\n      }\n    }\n    macro.vtkErrorMacro(`Clipping plane index ${i} is out of range.`);\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  clippingPlanes: [],\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n  macro.algo(publicAPI, model, 1, 0);\n\n  if (!model.clippingPlanes) {\n    model.clippingPlanes = [];\n  }\n\n  vtkAbstractMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\nexport default { extend };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}