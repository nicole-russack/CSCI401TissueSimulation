{"ast":null,"code":"import macro from 'vtk.js/Sources/macros';\nimport vtk from 'vtk.js/Sources/vtk';\nimport vtkCellArray from 'vtk.js/Sources/Common/Core/CellArray';\nimport vtkCellLinks from 'vtk.js/Sources/Common/DataModel/CellLinks';\nimport vtkCellTypes from 'vtk.js/Sources/Common/DataModel/CellTypes';\nimport vtkLine from 'vtk.js/Sources/Common/DataModel/Line';\nimport vtkPointSet from 'vtk.js/Sources/Common/DataModel/PointSet';\nimport vtkTriangle from 'vtk.js/Sources/Common/DataModel/Triangle';\nimport { CellType } from 'vtk.js/Sources/Common/DataModel/CellTypes/Constants';\nimport { POLYDATA_FIELDS } from 'vtk.js/Sources/Common/DataModel/PolyData/Constants';\nconst {\n  vtkWarningMacro\n} = macro;\nexport const CELL_FACTORY = {\n  [CellType.VTK_LINE]: vtkLine,\n  [CellType.VTK_POLY_LINE]: vtkLine,\n  [CellType.VTK_TRIANGLE]: vtkTriangle\n}; // ----------------------------------------------------------------------------\n// vtkPolyData methods\n// ----------------------------------------------------------------------------\n\nfunction vtkPolyData(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkPolyData');\n\n  function camelize(str) {\n    return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, letter => letter.toUpperCase()).replace(/\\s+/g, '');\n  } // build empty cell arrays and set methods\n\n\n  POLYDATA_FIELDS.forEach(type => {\n    publicAPI[`getNumberOf${camelize(type)}`] = () => model[type].getNumberOfCells();\n\n    if (!model[type]) {\n      model[type] = vtkCellArray.newInstance();\n    } else {\n      model[type] = vtk(model[type]);\n    }\n  });\n\n  publicAPI.getNumberOfCells = () => POLYDATA_FIELDS.reduce((num, cellType) => num + model[cellType].getNumberOfCells(), 0);\n\n  const superShallowCopy = publicAPI.shallowCopy;\n\n  publicAPI.shallowCopy = function (other) {\n    let debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    superShallowCopy(other, debug);\n    POLYDATA_FIELDS.forEach(type => {\n      model[type] = vtkCellArray.newInstance();\n      model[type].shallowCopy(other.getReferenceByName(type));\n    });\n  };\n\n  publicAPI.buildCells = () => {\n    // here are the number of cells we have\n    const nVerts = publicAPI.getNumberOfVerts();\n    const nLines = publicAPI.getNumberOfLines();\n    const nPolys = publicAPI.getNumberOfPolys();\n    const nStrips = publicAPI.getNumberOfStrips(); // pre-allocate the space we need\n\n    const nCells = nVerts + nLines + nPolys + nStrips;\n    const types = new Uint8Array(nCells);\n    let pTypes = types;\n    const locs = new Uint32Array(nCells);\n    let pLocs = locs; // record locations and type of each cell.\n    // verts\n\n    if (nVerts) {\n      let nextCellPts = 0;\n      model.verts.getCellSizes().forEach((numCellPts, index) => {\n        pLocs[index] = nextCellPts;\n        pTypes[index] = numCellPts > 1 ? CellType.VTK_POLY_VERTEX : CellType.VTK_VERTEX;\n        nextCellPts += numCellPts + 1;\n      });\n      pLocs = pLocs.subarray(nVerts);\n      pTypes = pTypes.subarray(nVerts);\n    } // lines\n\n\n    if (nLines) {\n      let nextCellPts = 0;\n      model.lines.getCellSizes().forEach((numCellPts, index) => {\n        pLocs[index] = nextCellPts;\n        pTypes[index] = numCellPts > 2 ? CellType.VTK_POLY_LINE : CellType.VTK_LINE;\n\n        if (numCellPts === 1) {\n          vtkWarningMacro('Building VTK_LINE ', index, ' with only one point, but VTK_LINE needs at least two points. Check the input.');\n        }\n\n        nextCellPts += numCellPts + 1;\n      });\n      pLocs = pLocs.subarray(nLines);\n      pTypes = pTypes.subarray(nLines);\n    } // polys\n\n\n    if (nPolys) {\n      let nextCellPts = 0;\n      model.polys.getCellSizes().forEach((numCellPts, index) => {\n        pLocs[index] = nextCellPts;\n\n        switch (numCellPts) {\n          case 3:\n            pTypes[index] = CellType.VTK_TRIANGLE;\n            break;\n\n          case 4:\n            pTypes[index] = CellType.VTK_QUAD;\n            break;\n\n          default:\n            pTypes[index] = CellType.VTK_POLYGON;\n            break;\n        }\n\n        if (numCellPts < 3) {\n          vtkWarningMacro('Building VTK_TRIANGLE ', index, ' with less than three points, but VTK_TRIANGLE needs at least three points. Check the input.');\n        }\n\n        nextCellPts += numCellPts + 1;\n      });\n      pLocs += pLocs.subarray(nPolys);\n      pTypes += pTypes.subarray(nPolys);\n    } // strips\n\n\n    if (nStrips) {\n      let nextCellPts = 0;\n      pTypes.fill(CellType.VTK_TRIANGLE_STRIP, 0, nStrips);\n      model.strips.getCellSizes().forEach((numCellPts, index) => {\n        pLocs[index] = nextCellPts;\n        nextCellPts += numCellPts + 1;\n      });\n    } // set up the cell types data structure\n\n\n    model.cells = vtkCellTypes.newInstance();\n    model.cells.setCellTypes(nCells, types, locs);\n  };\n  /**\n   * Create upward links from points to cells that use each point. Enables\n   * topologically complex queries.\n   */\n\n\n  publicAPI.buildLinks = function () {\n    let initialSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    if (model.cells === undefined) {\n      publicAPI.buildCells();\n    }\n\n    model.links = vtkCellLinks.newInstance();\n\n    if (initialSize > 0) {\n      model.links.allocate(initialSize);\n    } else {\n      model.links.allocate(publicAPI.getPoints().getNumberOfPoints());\n    }\n\n    model.links.buildLinks(publicAPI);\n  };\n\n  publicAPI.getCellType = cellId => model.cells.getCellType(cellId);\n\n  publicAPI.getCellPoints = cellId => {\n    const cellType = publicAPI.getCellType(cellId);\n    let cells = null;\n\n    switch (cellType) {\n      case CellType.VTK_VERTEX:\n      case CellType.VTK_POLY_VERTEX:\n        cells = model.verts;\n        break;\n\n      case CellType.VTK_LINE:\n      case CellType.VTK_POLY_LINE:\n        cells = model.lines;\n        break;\n\n      case CellType.VTK_TRIANGLE:\n      case CellType.VTK_QUAD:\n      case CellType.VTK_POLYGON:\n        cells = model.polys;\n        break;\n\n      case CellType.VTK_TRIANGLE_STRIP:\n        cells = model.strips;\n        break;\n\n      default:\n        cells = null;\n        return {\n          type: 0,\n          cellPointIds: null\n        };\n    }\n\n    const loc = model.cells.getCellLocation(cellId);\n    const cellPointIds = cells.getCell(loc);\n    return {\n      cellType,\n      cellPointIds\n    };\n  };\n\n  publicAPI.getPointCells = ptId => model.links.getCells(ptId);\n\n  publicAPI.getCellEdgeNeighbors = (cellId, point1, point2) => {\n    const link1 = model.links.getLink(point1);\n    const link2 = model.links.getLink(point2);\n    return link1.cells.filter(cell => cell !== cellId && link2.cells.indexOf(cell) !== -1);\n  };\n  /**\n   * If you know the type of cell, you may provide it to improve performances.\n   */\n\n\n  publicAPI.getCell = function (cellId) {\n    let cellHint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const cellInfo = publicAPI.getCellPoints(cellId);\n    const cell = cellHint || CELL_FACTORY[cellInfo.cellType].newInstance();\n    cell.initialize(publicAPI.getPoints(), cellInfo.cellPointIds);\n    return cell;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {// verts: null,\n  // lines: null,\n  // polys: null,\n  // strips: null,\n  // cells: null,\n  // links: null,\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkPointSet.extend(publicAPI, model, initialValues);\n  macro.get(publicAPI, model, ['cells', 'links']);\n  macro.setGet(publicAPI, model, ['verts', 'lines', 'polys', 'strips']); // Object specific methods\n\n  vtkPolyData(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkPolyData'); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend\n};","map":{"version":3,"names":["macro","vtk","vtkCellArray","vtkCellLinks","vtkCellTypes","vtkLine","vtkPointSet","vtkTriangle","CellType","POLYDATA_FIELDS","vtkWarningMacro","CELL_FACTORY","VTK_LINE","VTK_POLY_LINE","VTK_TRIANGLE","vtkPolyData","publicAPI","model","classHierarchy","push","camelize","str","replace","letter","toUpperCase","forEach","type","getNumberOfCells","newInstance","reduce","num","cellType","superShallowCopy","shallowCopy","other","debug","getReferenceByName","buildCells","nVerts","getNumberOfVerts","nLines","getNumberOfLines","nPolys","getNumberOfPolys","nStrips","getNumberOfStrips","nCells","types","Uint8Array","pTypes","locs","Uint32Array","pLocs","nextCellPts","verts","getCellSizes","numCellPts","index","VTK_POLY_VERTEX","VTK_VERTEX","subarray","lines","polys","VTK_QUAD","VTK_POLYGON","fill","VTK_TRIANGLE_STRIP","strips","cells","setCellTypes","buildLinks","initialSize","undefined","links","allocate","getPoints","getNumberOfPoints","getCellType","cellId","getCellPoints","cellPointIds","loc","getCellLocation","getCell","getPointCells","ptId","getCells","getCellEdgeNeighbors","point1","point2","link1","getLink","link2","filter","cell","indexOf","cellHint","cellInfo","initialize","DEFAULT_VALUES","extend","initialValues","Object","assign","get","setGet"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Common/DataModel/PolyData/index.js"],"sourcesContent":["import macro from 'vtk.js/Sources/macros';\nimport vtk from 'vtk.js/Sources/vtk';\nimport vtkCellArray from 'vtk.js/Sources/Common/Core/CellArray';\nimport vtkCellLinks from 'vtk.js/Sources/Common/DataModel/CellLinks';\nimport vtkCellTypes from 'vtk.js/Sources/Common/DataModel/CellTypes';\nimport vtkLine from 'vtk.js/Sources/Common/DataModel/Line';\nimport vtkPointSet from 'vtk.js/Sources/Common/DataModel/PointSet';\nimport vtkTriangle from 'vtk.js/Sources/Common/DataModel/Triangle';\n\nimport { CellType } from 'vtk.js/Sources/Common/DataModel/CellTypes/Constants';\nimport { POLYDATA_FIELDS } from 'vtk.js/Sources/Common/DataModel/PolyData/Constants';\n\nconst { vtkWarningMacro } = macro;\n\nexport const CELL_FACTORY = {\n  [CellType.VTK_LINE]: vtkLine,\n  [CellType.VTK_POLY_LINE]: vtkLine,\n  [CellType.VTK_TRIANGLE]: vtkTriangle,\n};\n\n// ----------------------------------------------------------------------------\n// vtkPolyData methods\n// ----------------------------------------------------------------------------\n\nfunction vtkPolyData(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkPolyData');\n\n  function camelize(str) {\n    return str\n      .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (letter) => letter.toUpperCase())\n      .replace(/\\s+/g, '');\n  }\n\n  // build empty cell arrays and set methods\n  POLYDATA_FIELDS.forEach((type) => {\n    publicAPI[`getNumberOf${camelize(type)}`] = () =>\n      model[type].getNumberOfCells();\n    if (!model[type]) {\n      model[type] = vtkCellArray.newInstance();\n    } else {\n      model[type] = vtk(model[type]);\n    }\n  });\n\n  publicAPI.getNumberOfCells = () =>\n    POLYDATA_FIELDS.reduce(\n      (num, cellType) => num + model[cellType].getNumberOfCells(),\n      0\n    );\n\n  const superShallowCopy = publicAPI.shallowCopy;\n  publicAPI.shallowCopy = (other, debug = false) => {\n    superShallowCopy(other, debug);\n    POLYDATA_FIELDS.forEach((type) => {\n      model[type] = vtkCellArray.newInstance();\n      model[type].shallowCopy(other.getReferenceByName(type));\n    });\n  };\n\n  publicAPI.buildCells = () => {\n    // here are the number of cells we have\n    const nVerts = publicAPI.getNumberOfVerts();\n    const nLines = publicAPI.getNumberOfLines();\n    const nPolys = publicAPI.getNumberOfPolys();\n    const nStrips = publicAPI.getNumberOfStrips();\n\n    // pre-allocate the space we need\n    const nCells = nVerts + nLines + nPolys + nStrips;\n\n    const types = new Uint8Array(nCells);\n    let pTypes = types;\n    const locs = new Uint32Array(nCells);\n    let pLocs = locs;\n\n    // record locations and type of each cell.\n    // verts\n    if (nVerts) {\n      let nextCellPts = 0;\n      model.verts.getCellSizes().forEach((numCellPts, index) => {\n        pLocs[index] = nextCellPts;\n        pTypes[index] =\n          numCellPts > 1 ? CellType.VTK_POLY_VERTEX : CellType.VTK_VERTEX;\n        nextCellPts += numCellPts + 1;\n      });\n\n      pLocs = pLocs.subarray(nVerts);\n      pTypes = pTypes.subarray(nVerts);\n    }\n\n    // lines\n    if (nLines) {\n      let nextCellPts = 0;\n      model.lines.getCellSizes().forEach((numCellPts, index) => {\n        pLocs[index] = nextCellPts;\n        pTypes[index] =\n          numCellPts > 2 ? CellType.VTK_POLY_LINE : CellType.VTK_LINE;\n        if (numCellPts === 1) {\n          vtkWarningMacro(\n            'Building VTK_LINE ',\n            index,\n            ' with only one point, but VTK_LINE needs at least two points. Check the input.'\n          );\n        }\n        nextCellPts += numCellPts + 1;\n      });\n\n      pLocs = pLocs.subarray(nLines);\n      pTypes = pTypes.subarray(nLines);\n    }\n\n    // polys\n    if (nPolys) {\n      let nextCellPts = 0;\n      model.polys.getCellSizes().forEach((numCellPts, index) => {\n        pLocs[index] = nextCellPts;\n        switch (numCellPts) {\n          case 3:\n            pTypes[index] = CellType.VTK_TRIANGLE;\n            break;\n          case 4:\n            pTypes[index] = CellType.VTK_QUAD;\n            break;\n          default:\n            pTypes[index] = CellType.VTK_POLYGON;\n            break;\n        }\n        if (numCellPts < 3) {\n          vtkWarningMacro(\n            'Building VTK_TRIANGLE ',\n            index,\n            ' with less than three points, but VTK_TRIANGLE needs at least three points. Check the input.'\n          );\n        }\n        nextCellPts += numCellPts + 1;\n      });\n\n      pLocs += pLocs.subarray(nPolys);\n      pTypes += pTypes.subarray(nPolys);\n    }\n\n    // strips\n    if (nStrips) {\n      let nextCellPts = 0;\n      pTypes.fill(CellType.VTK_TRIANGLE_STRIP, 0, nStrips);\n\n      model.strips.getCellSizes().forEach((numCellPts, index) => {\n        pLocs[index] = nextCellPts;\n        nextCellPts += numCellPts + 1;\n      });\n    }\n\n    // set up the cell types data structure\n    model.cells = vtkCellTypes.newInstance();\n    model.cells.setCellTypes(nCells, types, locs);\n  };\n\n  /**\n   * Create upward links from points to cells that use each point. Enables\n   * topologically complex queries.\n   */\n  publicAPI.buildLinks = (initialSize = 0) => {\n    if (model.cells === undefined) {\n      publicAPI.buildCells();\n    }\n\n    model.links = vtkCellLinks.newInstance();\n    if (initialSize > 0) {\n      model.links.allocate(initialSize);\n    } else {\n      model.links.allocate(publicAPI.getPoints().getNumberOfPoints());\n    }\n\n    model.links.buildLinks(publicAPI);\n  };\n\n  publicAPI.getCellType = (cellId) => model.cells.getCellType(cellId);\n\n  publicAPI.getCellPoints = (cellId) => {\n    const cellType = publicAPI.getCellType(cellId);\n    let cells = null;\n    switch (cellType) {\n      case CellType.VTK_VERTEX:\n      case CellType.VTK_POLY_VERTEX:\n        cells = model.verts;\n        break;\n\n      case CellType.VTK_LINE:\n      case CellType.VTK_POLY_LINE:\n        cells = model.lines;\n        break;\n\n      case CellType.VTK_TRIANGLE:\n      case CellType.VTK_QUAD:\n      case CellType.VTK_POLYGON:\n        cells = model.polys;\n        break;\n\n      case CellType.VTK_TRIANGLE_STRIP:\n        cells = model.strips;\n        break;\n\n      default:\n        cells = null;\n        return { type: 0, cellPointIds: null };\n    }\n    const loc = model.cells.getCellLocation(cellId);\n    const cellPointIds = cells.getCell(loc);\n    return { cellType, cellPointIds };\n  };\n\n  publicAPI.getPointCells = (ptId) => model.links.getCells(ptId);\n\n  publicAPI.getCellEdgeNeighbors = (cellId, point1, point2) => {\n    const link1 = model.links.getLink(point1);\n    const link2 = model.links.getLink(point2);\n\n    return link1.cells.filter(\n      (cell) => cell !== cellId && link2.cells.indexOf(cell) !== -1\n    );\n  };\n\n  /**\n   * If you know the type of cell, you may provide it to improve performances.\n   */\n  publicAPI.getCell = (cellId, cellHint = null) => {\n    const cellInfo = publicAPI.getCellPoints(cellId);\n    const cell = cellHint || CELL_FACTORY[cellInfo.cellType].newInstance();\n    cell.initialize(publicAPI.getPoints(), cellInfo.cellPointIds);\n    return cell;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  // verts: null,\n  // lines: null,\n  // polys: null,\n  // strips: null,\n  // cells: null,\n  // links: null,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkPointSet.extend(publicAPI, model, initialValues);\n  macro.get(publicAPI, model, ['cells', 'links']);\n  macro.setGet(publicAPI, model, ['verts', 'lines', 'polys', 'strips']);\n\n  // Object specific methods\n  vtkPolyData(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkPolyData');\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}