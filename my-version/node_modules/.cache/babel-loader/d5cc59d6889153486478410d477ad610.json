{"ast":null,"code":"import macro from 'vtk.js/Sources/macros';\nimport vtkViewNode from 'vtk.js/Sources/Rendering/SceneGraph/ViewNode'; // ----------------------------------------------------------------------------\n// vtkRenderWindowViewNode is intended to be a superclass for all api specific\n// RenderWindows. It is intended to define a common API that can be invoked\n// upon an api specific render window and provide some common method\n// implementations. If your application requires communicating with an api specific\n// view try to limit such interactions to methods defined in this class.\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// vtkRenderWindowViewNode methods\n// ----------------------------------------------------------------------------\n\nfunction vtkRenderWindowViewNode(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkRenderWindowViewNode');\n\n  publicAPI.getViewNodeFactory = () => null;\n\n  publicAPI.getAspectRatio = () => model.size[0] / model.size[1];\n\n  publicAPI.getAspectRatioForRenderer = renderer => {\n    const viewport = renderer.getViewportByReference();\n    return model.size[0] * (viewport[2] - viewport[0]) / ((viewport[3] - viewport[1]) * model.size[1]);\n  };\n\n  publicAPI.isInViewport = (x, y, viewport) => {\n    const vCoords = viewport.getViewportByReference();\n    const size = publicAPI.getFramebufferSize();\n\n    if (vCoords[0] * size[0] <= x && vCoords[2] * size[0] >= x && vCoords[1] * size[1] <= y && vCoords[3] * size[1] >= y) {\n      return true;\n    }\n\n    return false;\n  };\n\n  publicAPI.getViewportSize = viewport => {\n    const vCoords = viewport.getViewportByReference();\n    const size = publicAPI.getFramebufferSize();\n    return [(vCoords[2] - vCoords[0]) * size[0], (vCoords[3] - vCoords[1]) * size[1]];\n  };\n\n  publicAPI.getViewportCenter = viewport => {\n    const size = publicAPI.getViewportSize(viewport);\n    return [size[0] * 0.5, size[1] * 0.5];\n  };\n\n  publicAPI.displayToNormalizedDisplay = (x, y, z) => {\n    const size = publicAPI.getFramebufferSize();\n    return [x / size[0], y / size[1], z];\n  };\n\n  publicAPI.normalizedDisplayToDisplay = (x, y, z) => {\n    const size = publicAPI.getFramebufferSize();\n    return [x * size[0], y * size[1], z];\n  };\n\n  publicAPI.worldToView = (x, y, z, renderer) => renderer.worldToView(x, y, z);\n\n  publicAPI.viewToWorld = (x, y, z, renderer) => renderer.viewToWorld(x, y, z);\n\n  publicAPI.worldToDisplay = (x, y, z, renderer) => {\n    const val = renderer.worldToView(x, y, z);\n    const dims = publicAPI.getViewportSize(renderer);\n    const val2 = renderer.viewToProjection(val[0], val[1], val[2], dims[0] / dims[1]);\n    const val3 = renderer.projectionToNormalizedDisplay(val2[0], val2[1], val2[2]);\n    return publicAPI.normalizedDisplayToDisplay(val3[0], val3[1], val3[2]);\n  };\n\n  publicAPI.displayToWorld = (x, y, z, renderer) => {\n    const val = publicAPI.displayToNormalizedDisplay(x, y, z);\n    const val2 = renderer.normalizedDisplayToProjection(val[0], val[1], val[2]);\n    const dims = publicAPI.getViewportSize(renderer);\n    const val3 = renderer.projectionToView(val2[0], val2[1], val2[2], dims[0] / dims[1]);\n    return renderer.viewToWorld(val3[0], val3[1], val3[2]);\n  };\n\n  publicAPI.normalizedDisplayToViewport = (x, y, z, renderer) => {\n    let vCoords = renderer.getViewportByReference();\n    vCoords = publicAPI.normalizedDisplayToDisplay(vCoords[0], vCoords[1], 0.0);\n    const coords = publicAPI.normalizedDisplayToDisplay(x, y, z);\n    return [coords[0] - vCoords[0] - 0.5, coords[1] - vCoords[1] - 0.5, z];\n  };\n\n  publicAPI.viewportToNormalizedViewport = (x, y, z, renderer) => {\n    const size = publicAPI.getViewportSize(renderer);\n\n    if (size && size[0] !== 0 && size[1] !== 0) {\n      return [x / (size[0] - 1.0), y / (size[1] - 1.0), z];\n    }\n\n    return [x, y, z];\n  };\n\n  publicAPI.normalizedViewportToViewport = (x, y, z, renderer) => {\n    const size = publicAPI.getViewportSize(renderer);\n    return [x * (size[0] - 1.0), y * (size[1] - 1.0), z];\n  };\n\n  publicAPI.displayToLocalDisplay = (x, y, z) => {\n    const size = publicAPI.getFramebufferSize();\n    return [x, size[1] - y - 1, z];\n  };\n\n  publicAPI.viewportToNormalizedDisplay = (x, y, z, renderer) => {\n    let vCoords = renderer.getViewportByReference();\n    vCoords = publicAPI.normalizedDisplayToDisplay(vCoords[0], vCoords[1], 0.0);\n    const x2 = x + vCoords[0] + 0.5;\n    const y2 = y + vCoords[1] + 0.5;\n    return publicAPI.displayToNormalizedDisplay(x2, y2, z);\n  };\n\n  publicAPI.getPixelData = (x1, y1, x2, y2) => {\n    macro.vtkErrorMacro('not implemented');\n    return undefined;\n  };\n\n  publicAPI.createSelector = () => {\n    macro.vtkErrorMacro('not implemented');\n    return undefined;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  size: undefined,\n  selector: undefined\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  if (!model.size) {\n    model.size = [300, 300];\n  }\n\n  macro.getArray(publicAPI, model, ['size'], 2);\n  macro.get(publicAPI, model, ['selector']); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues); // Object methods\n\n  vtkRenderWindowViewNode(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkRenderWindowViewNode'); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend\n};","map":{"version":3,"names":["macro","vtkViewNode","vtkRenderWindowViewNode","publicAPI","model","classHierarchy","push","getViewNodeFactory","getAspectRatio","size","getAspectRatioForRenderer","renderer","viewport","getViewportByReference","isInViewport","x","y","vCoords","getFramebufferSize","getViewportSize","getViewportCenter","displayToNormalizedDisplay","z","normalizedDisplayToDisplay","worldToView","viewToWorld","worldToDisplay","val","dims","val2","viewToProjection","val3","projectionToNormalizedDisplay","displayToWorld","normalizedDisplayToProjection","projectionToView","normalizedDisplayToViewport","coords","viewportToNormalizedViewport","normalizedViewportToViewport","displayToLocalDisplay","viewportToNormalizedDisplay","x2","y2","getPixelData","x1","y1","vtkErrorMacro","undefined","createSelector","DEFAULT_VALUES","selector","extend","initialValues","Object","assign","getArray","get","newInstance"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/SceneGraph/RenderWindowViewNode/index.js"],"sourcesContent":["import macro from 'vtk.js/Sources/macros';\nimport vtkViewNode from 'vtk.js/Sources/Rendering/SceneGraph/ViewNode';\n\n// ----------------------------------------------------------------------------\n// vtkRenderWindowViewNode is intended to be a superclass for all api specific\n// RenderWindows. It is intended to define a common API that can be invoked\n// upon an api specific render window and provide some common method\n// implementations. If your application requires communicating with an api specific\n// view try to limit such interactions to methods defined in this class.\n// ----------------------------------------------------------------------------\n\n// ----------------------------------------------------------------------------\n// vtkRenderWindowViewNode methods\n// ----------------------------------------------------------------------------\n\nfunction vtkRenderWindowViewNode(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkRenderWindowViewNode');\n\n  publicAPI.getViewNodeFactory = () => null;\n\n  publicAPI.getAspectRatio = () => model.size[0] / model.size[1];\n\n  publicAPI.getAspectRatioForRenderer = (renderer) => {\n    const viewport = renderer.getViewportByReference();\n    return (\n      (model.size[0] * (viewport[2] - viewport[0])) /\n      ((viewport[3] - viewport[1]) * model.size[1])\n    );\n  };\n\n  publicAPI.isInViewport = (x, y, viewport) => {\n    const vCoords = viewport.getViewportByReference();\n    const size = publicAPI.getFramebufferSize();\n    if (\n      vCoords[0] * size[0] <= x &&\n      vCoords[2] * size[0] >= x &&\n      vCoords[1] * size[1] <= y &&\n      vCoords[3] * size[1] >= y\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  publicAPI.getViewportSize = (viewport) => {\n    const vCoords = viewport.getViewportByReference();\n    const size = publicAPI.getFramebufferSize();\n\n    return [\n      (vCoords[2] - vCoords[0]) * size[0],\n      (vCoords[3] - vCoords[1]) * size[1],\n    ];\n  };\n\n  publicAPI.getViewportCenter = (viewport) => {\n    const size = publicAPI.getViewportSize(viewport);\n    return [size[0] * 0.5, size[1] * 0.5];\n  };\n\n  publicAPI.displayToNormalizedDisplay = (x, y, z) => {\n    const size = publicAPI.getFramebufferSize();\n    return [x / size[0], y / size[1], z];\n  };\n\n  publicAPI.normalizedDisplayToDisplay = (x, y, z) => {\n    const size = publicAPI.getFramebufferSize();\n    return [x * size[0], y * size[1], z];\n  };\n\n  publicAPI.worldToView = (x, y, z, renderer) => renderer.worldToView(x, y, z);\n\n  publicAPI.viewToWorld = (x, y, z, renderer) => renderer.viewToWorld(x, y, z);\n\n  publicAPI.worldToDisplay = (x, y, z, renderer) => {\n    const val = renderer.worldToView(x, y, z);\n    const dims = publicAPI.getViewportSize(renderer);\n    const val2 = renderer.viewToProjection(\n      val[0],\n      val[1],\n      val[2],\n      dims[0] / dims[1]\n    );\n    const val3 = renderer.projectionToNormalizedDisplay(\n      val2[0],\n      val2[1],\n      val2[2]\n    );\n    return publicAPI.normalizedDisplayToDisplay(val3[0], val3[1], val3[2]);\n  };\n\n  publicAPI.displayToWorld = (x, y, z, renderer) => {\n    const val = publicAPI.displayToNormalizedDisplay(x, y, z);\n    const val2 = renderer.normalizedDisplayToProjection(val[0], val[1], val[2]);\n    const dims = publicAPI.getViewportSize(renderer);\n    const val3 = renderer.projectionToView(\n      val2[0],\n      val2[1],\n      val2[2],\n      dims[0] / dims[1]\n    );\n    return renderer.viewToWorld(val3[0], val3[1], val3[2]);\n  };\n\n  publicAPI.normalizedDisplayToViewport = (x, y, z, renderer) => {\n    let vCoords = renderer.getViewportByReference();\n    vCoords = publicAPI.normalizedDisplayToDisplay(vCoords[0], vCoords[1], 0.0);\n    const coords = publicAPI.normalizedDisplayToDisplay(x, y, z);\n    return [coords[0] - vCoords[0] - 0.5, coords[1] - vCoords[1] - 0.5, z];\n  };\n\n  publicAPI.viewportToNormalizedViewport = (x, y, z, renderer) => {\n    const size = publicAPI.getViewportSize(renderer);\n    if (size && size[0] !== 0 && size[1] !== 0) {\n      return [x / (size[0] - 1.0), y / (size[1] - 1.0), z];\n    }\n    return [x, y, z];\n  };\n\n  publicAPI.normalizedViewportToViewport = (x, y, z, renderer) => {\n    const size = publicAPI.getViewportSize(renderer);\n    return [x * (size[0] - 1.0), y * (size[1] - 1.0), z];\n  };\n\n  publicAPI.displayToLocalDisplay = (x, y, z) => {\n    const size = publicAPI.getFramebufferSize();\n    return [x, size[1] - y - 1, z];\n  };\n\n  publicAPI.viewportToNormalizedDisplay = (x, y, z, renderer) => {\n    let vCoords = renderer.getViewportByReference();\n    vCoords = publicAPI.normalizedDisplayToDisplay(vCoords[0], vCoords[1], 0.0);\n    const x2 = x + vCoords[0] + 0.5;\n    const y2 = y + vCoords[1] + 0.5;\n    return publicAPI.displayToNormalizedDisplay(x2, y2, z);\n  };\n\n  publicAPI.getPixelData = (x1, y1, x2, y2) => {\n    macro.vtkErrorMacro('not implemented');\n    return undefined;\n  };\n\n  publicAPI.createSelector = () => {\n    macro.vtkErrorMacro('not implemented');\n    return undefined;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  size: undefined,\n  selector: undefined,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  if (!model.size) {\n    model.size = [300, 300];\n  }\n\n  macro.getArray(publicAPI, model, ['size'], 2);\n  macro.get(publicAPI, model, ['selector']);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n\n  // Object methods\n  vtkRenderWindowViewNode(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkRenderWindowViewNode');\n\n// ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend,\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,uBAAlB;AACA,OAAOC,WAAP,MAAwB,8CAAxB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,SAASC,uBAAT,CAAiCC,SAAjC,EAA4CC,KAA5C,EAAmD;EACjD;EACAA,KAAK,CAACC,cAAN,CAAqBC,IAArB,CAA0B,yBAA1B;;EAEAH,SAAS,CAACI,kBAAV,GAA+B,MAAM,IAArC;;EAEAJ,SAAS,CAACK,cAAV,GAA2B,MAAMJ,KAAK,CAACK,IAAN,CAAW,CAAX,IAAgBL,KAAK,CAACK,IAAN,CAAW,CAAX,CAAjD;;EAEAN,SAAS,CAACO,yBAAV,GAAuCC,QAAD,IAAc;IAClD,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,sBAAT,EAAjB;IACA,OACGT,KAAK,CAACK,IAAN,CAAW,CAAX,KAAiBG,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAAvC,CAAD,IACC,CAACA,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAAvB,IAA8BR,KAAK,CAACK,IAAN,CAAW,CAAX,CAD/B,CADF;EAID,CAND;;EAQAN,SAAS,CAACW,YAAV,GAAyB,CAACC,CAAD,EAAIC,CAAJ,EAAOJ,QAAP,KAAoB;IAC3C,MAAMK,OAAO,GAAGL,QAAQ,CAACC,sBAAT,EAAhB;IACA,MAAMJ,IAAI,GAAGN,SAAS,CAACe,kBAAV,EAAb;;IACA,IACED,OAAO,CAAC,CAAD,CAAP,GAAaR,IAAI,CAAC,CAAD,CAAjB,IAAwBM,CAAxB,IACAE,OAAO,CAAC,CAAD,CAAP,GAAaR,IAAI,CAAC,CAAD,CAAjB,IAAwBM,CADxB,IAEAE,OAAO,CAAC,CAAD,CAAP,GAAaR,IAAI,CAAC,CAAD,CAAjB,IAAwBO,CAFxB,IAGAC,OAAO,CAAC,CAAD,CAAP,GAAaR,IAAI,CAAC,CAAD,CAAjB,IAAwBO,CAJ1B,EAKE;MACA,OAAO,IAAP;IACD;;IACD,OAAO,KAAP;EACD,CAZD;;EAcAb,SAAS,CAACgB,eAAV,GAA6BP,QAAD,IAAc;IACxC,MAAMK,OAAO,GAAGL,QAAQ,CAACC,sBAAT,EAAhB;IACA,MAAMJ,IAAI,GAAGN,SAAS,CAACe,kBAAV,EAAb;IAEA,OAAO,CACL,CAACD,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAArB,IAA4BR,IAAI,CAAC,CAAD,CAD3B,EAEL,CAACQ,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAArB,IAA4BR,IAAI,CAAC,CAAD,CAF3B,CAAP;EAID,CARD;;EAUAN,SAAS,CAACiB,iBAAV,GAA+BR,QAAD,IAAc;IAC1C,MAAMH,IAAI,GAAGN,SAAS,CAACgB,eAAV,CAA0BP,QAA1B,CAAb;IACA,OAAO,CAACH,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAX,EAAgBA,IAAI,CAAC,CAAD,CAAJ,GAAU,GAA1B,CAAP;EACD,CAHD;;EAKAN,SAAS,CAACkB,0BAAV,GAAuC,CAACN,CAAD,EAAIC,CAAJ,EAAOM,CAAP,KAAa;IAClD,MAAMb,IAAI,GAAGN,SAAS,CAACe,kBAAV,EAAb;IACA,OAAO,CAACH,CAAC,GAAGN,IAAI,CAAC,CAAD,CAAT,EAAcO,CAAC,GAAGP,IAAI,CAAC,CAAD,CAAtB,EAA2Ba,CAA3B,CAAP;EACD,CAHD;;EAKAnB,SAAS,CAACoB,0BAAV,GAAuC,CAACR,CAAD,EAAIC,CAAJ,EAAOM,CAAP,KAAa;IAClD,MAAMb,IAAI,GAAGN,SAAS,CAACe,kBAAV,EAAb;IACA,OAAO,CAACH,CAAC,GAAGN,IAAI,CAAC,CAAD,CAAT,EAAcO,CAAC,GAAGP,IAAI,CAAC,CAAD,CAAtB,EAA2Ba,CAA3B,CAAP;EACD,CAHD;;EAKAnB,SAAS,CAACqB,WAAV,GAAwB,CAACT,CAAD,EAAIC,CAAJ,EAAOM,CAAP,EAAUX,QAAV,KAAuBA,QAAQ,CAACa,WAAT,CAAqBT,CAArB,EAAwBC,CAAxB,EAA2BM,CAA3B,CAA/C;;EAEAnB,SAAS,CAACsB,WAAV,GAAwB,CAACV,CAAD,EAAIC,CAAJ,EAAOM,CAAP,EAAUX,QAAV,KAAuBA,QAAQ,CAACc,WAAT,CAAqBV,CAArB,EAAwBC,CAAxB,EAA2BM,CAA3B,CAA/C;;EAEAnB,SAAS,CAACuB,cAAV,GAA2B,CAACX,CAAD,EAAIC,CAAJ,EAAOM,CAAP,EAAUX,QAAV,KAAuB;IAChD,MAAMgB,GAAG,GAAGhB,QAAQ,CAACa,WAAT,CAAqBT,CAArB,EAAwBC,CAAxB,EAA2BM,CAA3B,CAAZ;IACA,MAAMM,IAAI,GAAGzB,SAAS,CAACgB,eAAV,CAA0BR,QAA1B,CAAb;IACA,MAAMkB,IAAI,GAAGlB,QAAQ,CAACmB,gBAAT,CACXH,GAAG,CAAC,CAAD,CADQ,EAEXA,GAAG,CAAC,CAAD,CAFQ,EAGXA,GAAG,CAAC,CAAD,CAHQ,EAIXC,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAJH,CAAb;IAMA,MAAMG,IAAI,GAAGpB,QAAQ,CAACqB,6BAAT,CACXH,IAAI,CAAC,CAAD,CADO,EAEXA,IAAI,CAAC,CAAD,CAFO,EAGXA,IAAI,CAAC,CAAD,CAHO,CAAb;IAKA,OAAO1B,SAAS,CAACoB,0BAAV,CAAqCQ,IAAI,CAAC,CAAD,CAAzC,EAA8CA,IAAI,CAAC,CAAD,CAAlD,EAAuDA,IAAI,CAAC,CAAD,CAA3D,CAAP;EACD,CAfD;;EAiBA5B,SAAS,CAAC8B,cAAV,GAA2B,CAAClB,CAAD,EAAIC,CAAJ,EAAOM,CAAP,EAAUX,QAAV,KAAuB;IAChD,MAAMgB,GAAG,GAAGxB,SAAS,CAACkB,0BAAV,CAAqCN,CAArC,EAAwCC,CAAxC,EAA2CM,CAA3C,CAAZ;IACA,MAAMO,IAAI,GAAGlB,QAAQ,CAACuB,6BAAT,CAAuCP,GAAG,CAAC,CAAD,CAA1C,EAA+CA,GAAG,CAAC,CAAD,CAAlD,EAAuDA,GAAG,CAAC,CAAD,CAA1D,CAAb;IACA,MAAMC,IAAI,GAAGzB,SAAS,CAACgB,eAAV,CAA0BR,QAA1B,CAAb;IACA,MAAMoB,IAAI,GAAGpB,QAAQ,CAACwB,gBAAT,CACXN,IAAI,CAAC,CAAD,CADO,EAEXA,IAAI,CAAC,CAAD,CAFO,EAGXA,IAAI,CAAC,CAAD,CAHO,EAIXD,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAJH,CAAb;IAMA,OAAOjB,QAAQ,CAACc,WAAT,CAAqBM,IAAI,CAAC,CAAD,CAAzB,EAA8BA,IAAI,CAAC,CAAD,CAAlC,EAAuCA,IAAI,CAAC,CAAD,CAA3C,CAAP;EACD,CAXD;;EAaA5B,SAAS,CAACiC,2BAAV,GAAwC,CAACrB,CAAD,EAAIC,CAAJ,EAAOM,CAAP,EAAUX,QAAV,KAAuB;IAC7D,IAAIM,OAAO,GAAGN,QAAQ,CAACE,sBAAT,EAAd;IACAI,OAAO,GAAGd,SAAS,CAACoB,0BAAV,CAAqCN,OAAO,CAAC,CAAD,CAA5C,EAAiDA,OAAO,CAAC,CAAD,CAAxD,EAA6D,GAA7D,CAAV;IACA,MAAMoB,MAAM,GAAGlC,SAAS,CAACoB,0BAAV,CAAqCR,CAArC,EAAwCC,CAAxC,EAA2CM,CAA3C,CAAf;IACA,OAAO,CAACe,MAAM,CAAC,CAAD,CAAN,GAAYpB,OAAO,CAAC,CAAD,CAAnB,GAAyB,GAA1B,EAA+BoB,MAAM,CAAC,CAAD,CAAN,GAAYpB,OAAO,CAAC,CAAD,CAAnB,GAAyB,GAAxD,EAA6DK,CAA7D,CAAP;EACD,CALD;;EAOAnB,SAAS,CAACmC,4BAAV,GAAyC,CAACvB,CAAD,EAAIC,CAAJ,EAAOM,CAAP,EAAUX,QAAV,KAAuB;IAC9D,MAAMF,IAAI,GAAGN,SAAS,CAACgB,eAAV,CAA0BR,QAA1B,CAAb;;IACA,IAAIF,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,CAApB,IAAyBA,IAAI,CAAC,CAAD,CAAJ,KAAY,CAAzC,EAA4C;MAC1C,OAAO,CAACM,CAAC,IAAIN,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAd,CAAF,EAAsBO,CAAC,IAAIP,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAd,CAAvB,EAA2Ca,CAA3C,CAAP;IACD;;IACD,OAAO,CAACP,CAAD,EAAIC,CAAJ,EAAOM,CAAP,CAAP;EACD,CAND;;EAQAnB,SAAS,CAACoC,4BAAV,GAAyC,CAACxB,CAAD,EAAIC,CAAJ,EAAOM,CAAP,EAAUX,QAAV,KAAuB;IAC9D,MAAMF,IAAI,GAAGN,SAAS,CAACgB,eAAV,CAA0BR,QAA1B,CAAb;IACA,OAAO,CAACI,CAAC,IAAIN,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAd,CAAF,EAAsBO,CAAC,IAAIP,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAd,CAAvB,EAA2Ca,CAA3C,CAAP;EACD,CAHD;;EAKAnB,SAAS,CAACqC,qBAAV,GAAkC,CAACzB,CAAD,EAAIC,CAAJ,EAAOM,CAAP,KAAa;IAC7C,MAAMb,IAAI,GAAGN,SAAS,CAACe,kBAAV,EAAb;IACA,OAAO,CAACH,CAAD,EAAIN,IAAI,CAAC,CAAD,CAAJ,GAAUO,CAAV,GAAc,CAAlB,EAAqBM,CAArB,CAAP;EACD,CAHD;;EAKAnB,SAAS,CAACsC,2BAAV,GAAwC,CAAC1B,CAAD,EAAIC,CAAJ,EAAOM,CAAP,EAAUX,QAAV,KAAuB;IAC7D,IAAIM,OAAO,GAAGN,QAAQ,CAACE,sBAAT,EAAd;IACAI,OAAO,GAAGd,SAAS,CAACoB,0BAAV,CAAqCN,OAAO,CAAC,CAAD,CAA5C,EAAiDA,OAAO,CAAC,CAAD,CAAxD,EAA6D,GAA7D,CAAV;IACA,MAAMyB,EAAE,GAAG3B,CAAC,GAAGE,OAAO,CAAC,CAAD,CAAX,GAAiB,GAA5B;IACA,MAAM0B,EAAE,GAAG3B,CAAC,GAAGC,OAAO,CAAC,CAAD,CAAX,GAAiB,GAA5B;IACA,OAAOd,SAAS,CAACkB,0BAAV,CAAqCqB,EAArC,EAAyCC,EAAzC,EAA6CrB,CAA7C,CAAP;EACD,CAND;;EAQAnB,SAAS,CAACyC,YAAV,GAAyB,CAACC,EAAD,EAAKC,EAAL,EAASJ,EAAT,EAAaC,EAAb,KAAoB;IAC3C3C,KAAK,CAAC+C,aAAN,CAAoB,iBAApB;IACA,OAAOC,SAAP;EACD,CAHD;;EAKA7C,SAAS,CAAC8C,cAAV,GAA2B,MAAM;IAC/BjD,KAAK,CAAC+C,aAAN,CAAoB,iBAApB;IACA,OAAOC,SAAP;EACD,CAHD;AAID,C,CAED;AACA;AACA;;;AAEA,MAAME,cAAc,GAAG;EACrBzC,IAAI,EAAEuC,SADe;EAErBG,QAAQ,EAAEH;AAFW,CAAvB,C,CAKA;;AAEA,OAAO,SAASI,MAAT,CAAgBjD,SAAhB,EAA2BC,KAA3B,EAAsD;EAAA,IAApBiD,aAAoB,uEAAJ,EAAI;EAC3DC,MAAM,CAACC,MAAP,CAAcnD,KAAd,EAAqB8C,cAArB,EAAqCG,aAArC;;EAEA,IAAI,CAACjD,KAAK,CAACK,IAAX,EAAiB;IACfL,KAAK,CAACK,IAAN,GAAa,CAAC,GAAD,EAAM,GAAN,CAAb;EACD;;EAEDT,KAAK,CAACwD,QAAN,CAAerD,SAAf,EAA0BC,KAA1B,EAAiC,CAAC,MAAD,CAAjC,EAA2C,CAA3C;EACAJ,KAAK,CAACyD,GAAN,CAAUtD,SAAV,EAAqBC,KAArB,EAA4B,CAAC,UAAD,CAA5B,EAR2D,CAU3D;;EACAH,WAAW,CAACmD,MAAZ,CAAmBjD,SAAnB,EAA8BC,KAA9B,EAAqCiD,aAArC,EAX2D,CAa3D;;EACAnD,uBAAuB,CAACC,SAAD,EAAYC,KAAZ,CAAvB;AACD,C,CAED;;AAEA,OAAO,MAAMsD,WAAW,GAAG1D,KAAK,CAAC0D,WAAN,CAAkBN,MAAlB,EAA0B,yBAA1B,CAApB,C,CAEP;;AAEA,eAAe;EACbM,WADa;EAEbN;AAFa,CAAf"},"metadata":{},"sourceType":"module"}