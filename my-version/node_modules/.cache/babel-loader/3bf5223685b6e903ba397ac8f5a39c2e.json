{"ast":null,"code":"import macro from 'vtk.js/Sources/macros';\nimport vtkWebGPURenderEncoder from 'vtk.js/Sources/Rendering/WebGPU/RenderEncoder';\nimport vtkWebGPUTexture from 'vtk.js/Sources/Rendering/WebGPU/Texture';\nimport vtkRenderPass from 'vtk.js/Sources/Rendering/SceneGraph/RenderPass'; // ----------------------------------------------------------------------------\n\nfunction vtkWebGPUOpaquePass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUOpaquePass'); // this pass implements a forward rendering pipeline\n  // if both volumes and opaque geometry are present\n  // it will mix the two together by capturing a zbuffer\n  // first\n\n  publicAPI.traverse = (renNode, viewNode) => {\n    if (model.deleted) {\n      return;\n    } // we just render our delegates in order\n\n\n    model.currentParent = viewNode;\n    const device = viewNode.getDevice();\n\n    if (!model.renderEncoder) {\n      publicAPI.createRenderEncoder();\n      model.colorTexture = vtkWebGPUTexture.newInstance({\n        label: 'opaquePassColor'\n      });\n      model.colorTexture.create(device, {\n        width: viewNode.getCanvas().width,\n        height: viewNode.getCanvas().height,\n        format: 'rgba16float',\n\n        /* eslint-disable no-undef */\n\n        /* eslint-disable no-bitwise */\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC\n      });\n      const ctView = model.colorTexture.createView('opaquePassColorTexture');\n      model.renderEncoder.setColorTextureView(0, ctView);\n      model.depthFormat = 'depth32float';\n      model.depthTexture = vtkWebGPUTexture.newInstance({\n        label: 'opaquePassDepth'\n      });\n      model.depthTexture.create(device, {\n        width: viewNode.getCanvas().width,\n        height: viewNode.getCanvas().height,\n        format: model.depthFormat,\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC\n      });\n      const dView = model.depthTexture.createView('opaquePassDepthTexture');\n      model.renderEncoder.setDepthTextureView(dView);\n    } else {\n      model.colorTexture.resize(viewNode.getCanvas().width, viewNode.getCanvas().height);\n      model.depthTexture.resize(viewNode.getCanvas().width, viewNode.getCanvas().height);\n    }\n\n    model.renderEncoder.attachTextureViews();\n    publicAPI.setCurrentOperation('opaquePass');\n    renNode.setRenderEncoder(model.renderEncoder);\n    renNode.traverse(publicAPI);\n  };\n\n  publicAPI.getColorTextureView = () => model.renderEncoder.getColorTextureViews()[0];\n\n  publicAPI.getDepthTextureView = () => model.renderEncoder.getDepthTextureView();\n\n  publicAPI.createRenderEncoder = () => {\n    model.renderEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'OpaquePass'\n    }); // default settings are fine for this\n\n    model.renderEncoder.setPipelineHash('op');\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  renderEncoder: null,\n  colorTexture: null,\n  depthTexture: null\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  macro.get(publicAPI, model, ['colorTexture', 'depthTexture']); // Object methods\n\n  vtkWebGPUOpaquePass(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkWebGPUOpaquePass'); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend\n};","map":{"version":3,"names":["macro","vtkWebGPURenderEncoder","vtkWebGPUTexture","vtkRenderPass","vtkWebGPUOpaquePass","publicAPI","model","classHierarchy","push","traverse","renNode","viewNode","deleted","currentParent","device","getDevice","renderEncoder","createRenderEncoder","colorTexture","newInstance","label","create","width","getCanvas","height","format","usage","GPUTextureUsage","RENDER_ATTACHMENT","TEXTURE_BINDING","COPY_SRC","ctView","createView","setColorTextureView","depthFormat","depthTexture","dView","setDepthTextureView","resize","attachTextureViews","setCurrentOperation","setRenderEncoder","getColorTextureView","getColorTextureViews","getDepthTextureView","setPipelineHash","DEFAULT_VALUES","extend","initialValues","Object","assign","get"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/WebGPU/OpaquePass/index.js"],"sourcesContent":["import macro from 'vtk.js/Sources/macros';\nimport vtkWebGPURenderEncoder from 'vtk.js/Sources/Rendering/WebGPU/RenderEncoder';\nimport vtkWebGPUTexture from 'vtk.js/Sources/Rendering/WebGPU/Texture';\nimport vtkRenderPass from 'vtk.js/Sources/Rendering/SceneGraph/RenderPass';\n\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUOpaquePass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUOpaquePass');\n\n  // this pass implements a forward rendering pipeline\n  // if both volumes and opaque geometry are present\n  // it will mix the two together by capturing a zbuffer\n  // first\n  publicAPI.traverse = (renNode, viewNode) => {\n    if (model.deleted) {\n      return;\n    }\n\n    // we just render our delegates in order\n    model.currentParent = viewNode;\n\n    const device = viewNode.getDevice();\n\n    if (!model.renderEncoder) {\n      publicAPI.createRenderEncoder();\n      model.colorTexture = vtkWebGPUTexture.newInstance({\n        label: 'opaquePassColor',\n      });\n      model.colorTexture.create(device, {\n        width: viewNode.getCanvas().width,\n        height: viewNode.getCanvas().height,\n        format: 'rgba16float',\n        /* eslint-disable no-undef */\n        /* eslint-disable no-bitwise */\n        usage:\n          GPUTextureUsage.RENDER_ATTACHMENT |\n          GPUTextureUsage.TEXTURE_BINDING |\n          GPUTextureUsage.COPY_SRC,\n      });\n      const ctView = model.colorTexture.createView('opaquePassColorTexture');\n      model.renderEncoder.setColorTextureView(0, ctView);\n\n      model.depthFormat = 'depth32float';\n      model.depthTexture = vtkWebGPUTexture.newInstance({\n        label: 'opaquePassDepth',\n      });\n      model.depthTexture.create(device, {\n        width: viewNode.getCanvas().width,\n        height: viewNode.getCanvas().height,\n        format: model.depthFormat,\n        usage:\n          GPUTextureUsage.RENDER_ATTACHMENT |\n          GPUTextureUsage.TEXTURE_BINDING |\n          GPUTextureUsage.COPY_SRC,\n      });\n      const dView = model.depthTexture.createView('opaquePassDepthTexture');\n      model.renderEncoder.setDepthTextureView(dView);\n    } else {\n      model.colorTexture.resize(\n        viewNode.getCanvas().width,\n        viewNode.getCanvas().height\n      );\n      model.depthTexture.resize(\n        viewNode.getCanvas().width,\n        viewNode.getCanvas().height\n      );\n    }\n\n    model.renderEncoder.attachTextureViews();\n    publicAPI.setCurrentOperation('opaquePass');\n    renNode.setRenderEncoder(model.renderEncoder);\n    renNode.traverse(publicAPI);\n  };\n\n  publicAPI.getColorTextureView = () =>\n    model.renderEncoder.getColorTextureViews()[0];\n\n  publicAPI.getDepthTextureView = () =>\n    model.renderEncoder.getDepthTextureView();\n\n  publicAPI.createRenderEncoder = () => {\n    model.renderEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'OpaquePass',\n    });\n    // default settings are fine for this\n    model.renderEncoder.setPipelineHash('op');\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  renderEncoder: null,\n  colorTexture: null,\n  depthTexture: null,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n\n  macro.get(publicAPI, model, ['colorTexture', 'depthTexture']);\n\n  // Object methods\n  vtkWebGPUOpaquePass(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkWebGPUOpaquePass');\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}