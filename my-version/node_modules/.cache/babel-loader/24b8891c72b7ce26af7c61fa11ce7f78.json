{"ast":null,"code":"// import { mat4, vec3 }     from 'gl-matrix';\nimport * as macro from 'vtk.js/Sources/macros';\nimport vtkViewNode from 'vtk.js/Sources/Rendering/SceneGraph/ViewNode';\nimport { registerOverride } from 'vtk.js/Sources/Rendering/OpenGL/ViewNodeFactory';\nconst {\n  vtkDebugMacro\n} = macro; // ----------------------------------------------------------------------------\n// vtkOpenGLPixelSpaceCallbackMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLPixelSpaceCallbackMapper(publicAPI, model) {\n  model.classHierarchy.push('vtkOpenGLPixelSpaceCallbackMapper');\n\n  publicAPI.opaquePass = (prepass, renderPass) => {\n    model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n    model._openGLRenderWindow = model.openGLRenderer.getParent();\n    const aspectRatio = model.openGLRenderer.getAspectRatio();\n    const camera = model.openGLRenderer ? model.openGLRenderer.getRenderable().getActiveCamera() : null;\n    const tsize = model.openGLRenderer.getTiledSizeAndOrigin();\n    let texels = null;\n\n    if (model.renderable.getUseZValues()) {\n      const zbt = renderPass.getZBufferTexture();\n      const width = Math.floor(zbt.getWidth());\n      const height = Math.floor(zbt.getHeight());\n\n      const gl = model._openGLRenderWindow.getContext();\n\n      zbt.bind(); // Here we need to use vtkFramebuffer to save current settings (bindings/buffers)\n\n      const fb = renderPass.getFramebuffer();\n\n      if (!fb) {\n        vtkDebugMacro('No framebuffer to save/restore');\n      } else {\n        // save framebuffer settings\n        fb.saveCurrentBindingsAndBuffers();\n      }\n\n      const framebuffer = gl.createFramebuffer();\n      gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, zbt.getHandle(), 0);\n\n      if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE) {\n        texels = new Uint8Array(width * height * 4);\n        gl.viewport(0, 0, width, height);\n        gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, texels);\n      } // Now we need to restore framebuffer bindings/buffers\n\n\n      if (fb) {\n        fb.restorePreviousBindingsAndBuffers();\n      }\n\n      gl.deleteFramebuffer(framebuffer);\n    }\n\n    model.renderable.invokeCallback(model.renderable.getInputData(), camera, aspectRatio, tsize, texels);\n  };\n\n  publicAPI.queryPass = (prepass, renderPass) => {\n    if (prepass) {\n      if (model.renderable.getUseZValues()) {\n        renderPass.requestDepth();\n      }\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues); // Object methods\n\n  vtkOpenGLPixelSpaceCallbackMapper(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkOpenGLPixelSpaceCallbackMapper'); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend\n}; // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkPixelSpaceCallbackMapper', newInstance);","map":{"version":3,"names":["macro","vtkViewNode","registerOverride","vtkDebugMacro","vtkOpenGLPixelSpaceCallbackMapper","publicAPI","model","classHierarchy","push","opaquePass","prepass","renderPass","openGLRenderer","getFirstAncestorOfType","_openGLRenderWindow","getParent","aspectRatio","getAspectRatio","camera","getRenderable","getActiveCamera","tsize","getTiledSizeAndOrigin","texels","renderable","getUseZValues","zbt","getZBufferTexture","width","Math","floor","getWidth","height","getHeight","gl","getContext","bind","fb","getFramebuffer","saveCurrentBindingsAndBuffers","framebuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_2D","getHandle","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","Uint8Array","viewport","readPixels","RGBA","UNSIGNED_BYTE","restorePreviousBindingsAndBuffers","deleteFramebuffer","invokeCallback","getInputData","queryPass","requestDepth","DEFAULT_VALUES","extend","initialValues","Object","assign","newInstance"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/OpenGL/PixelSpaceCallbackMapper/index.js"],"sourcesContent":["// import { mat4, vec3 }     from 'gl-matrix';\n\nimport * as macro from 'vtk.js/Sources/macros';\nimport vtkViewNode from 'vtk.js/Sources/Rendering/SceneGraph/ViewNode';\n\nimport { registerOverride } from 'vtk.js/Sources/Rendering/OpenGL/ViewNodeFactory';\n\nconst { vtkDebugMacro } = macro;\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLPixelSpaceCallbackMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLPixelSpaceCallbackMapper(publicAPI, model) {\n  model.classHierarchy.push('vtkOpenGLPixelSpaceCallbackMapper');\n\n  publicAPI.opaquePass = (prepass, renderPass) => {\n    model.openGLRenderer =\n      publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n    model._openGLRenderWindow = model.openGLRenderer.getParent();\n    const aspectRatio = model.openGLRenderer.getAspectRatio();\n    const camera = model.openGLRenderer\n      ? model.openGLRenderer.getRenderable().getActiveCamera()\n      : null;\n    const tsize = model.openGLRenderer.getTiledSizeAndOrigin();\n    let texels = null;\n\n    if (model.renderable.getUseZValues()) {\n      const zbt = renderPass.getZBufferTexture();\n      const width = Math.floor(zbt.getWidth());\n      const height = Math.floor(zbt.getHeight());\n\n      const gl = model._openGLRenderWindow.getContext();\n      zbt.bind();\n\n      // Here we need to use vtkFramebuffer to save current settings (bindings/buffers)\n      const fb = renderPass.getFramebuffer();\n      if (!fb) {\n        vtkDebugMacro('No framebuffer to save/restore');\n      } else {\n        // save framebuffer settings\n        fb.saveCurrentBindingsAndBuffers();\n      }\n\n      const framebuffer = gl.createFramebuffer();\n      gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        zbt.getHandle(),\n        0\n      );\n\n      if (\n        gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE\n      ) {\n        texels = new Uint8Array(width * height * 4);\n        gl.viewport(0, 0, width, height);\n        gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, texels);\n      }\n\n      // Now we need to restore framebuffer bindings/buffers\n      if (fb) {\n        fb.restorePreviousBindingsAndBuffers();\n      }\n\n      gl.deleteFramebuffer(framebuffer);\n    }\n\n    model.renderable.invokeCallback(\n      model.renderable.getInputData(),\n      camera,\n      aspectRatio,\n      tsize,\n      texels\n    );\n  };\n\n  publicAPI.queryPass = (prepass, renderPass) => {\n    if (prepass) {\n      if (model.renderable.getUseZValues()) {\n        renderPass.requestDepth();\n      }\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n\n  // Object methods\n  vtkOpenGLPixelSpaceCallbackMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(\n  extend,\n  'vtkOpenGLPixelSpaceCallbackMapper'\n);\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend };\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkPixelSpaceCallbackMapper', newInstance);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}