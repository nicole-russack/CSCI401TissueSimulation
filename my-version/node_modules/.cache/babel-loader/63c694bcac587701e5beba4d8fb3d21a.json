{"ast":null,"code":"import macro from 'vtk.js/Sources/macros';\nimport Constants from 'vtk.js/Sources/Rendering/OpenGL/BufferObject/Constants';\nconst {\n  ObjectType\n} = Constants; // ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nexport const STATIC = {}; // ----------------------------------------------------------------------------\n// vtkOpenGLBufferObject methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLBufferObject(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLBufferObject'); // Class-specific private functions\n\n  function convertType(type) {\n    switch (type) {\n      case ObjectType.ELEMENT_ARRAY_BUFFER:\n        return model.context.ELEMENT_ARRAY_BUFFER;\n\n      case ObjectType.TEXTURE_BUFFER:\n        if ('TEXTURE_BUFFER' in model.context) {\n          return model.context.TEXTURE_BUFFER;\n        }\n\n      /* eslint-disable no-fallthrough */\n      // Intentional fallthrough in case there is no TEXTURE_BUFFER in WebGL\n\n      case ObjectType.ARRAY_BUFFER:\n      default:\n        return model.context.ARRAY_BUFFER;\n\n      /* eslint-enable no-fallthrough */\n    }\n  }\n\n  let internalType = null;\n  let internalHandle = null;\n  let dirty = true;\n  let error = ''; // Public API methods\n\n  publicAPI.getType = () => internalType;\n\n  publicAPI.setType = value => {\n    internalType = value;\n  };\n\n  publicAPI.getHandle = () => internalHandle;\n\n  publicAPI.isReady = () => dirty === false;\n\n  publicAPI.generateBuffer = type => {\n    const objectTypeGL = convertType(type);\n\n    if (internalHandle === null) {\n      internalHandle = model.context.createBuffer();\n      internalType = type;\n    }\n\n    return convertType(internalType) === objectTypeGL;\n  };\n\n  publicAPI.upload = (data, type) => {\n    // buffer, size, type\n    const alreadyGenerated = publicAPI.generateBuffer(type);\n\n    if (!alreadyGenerated) {\n      error = 'Trying to upload array buffer to incompatible buffer.';\n      return false;\n    }\n\n    model.context.bindBuffer(convertType(internalType), internalHandle);\n    model.context.bufferData(convertType(internalType), data, model.context.STATIC_DRAW);\n    dirty = false;\n    return true;\n  };\n\n  publicAPI.bind = () => {\n    if (!internalHandle) {\n      return false;\n    }\n\n    model.context.bindBuffer(convertType(internalType), internalHandle);\n    return true;\n  };\n\n  publicAPI.release = () => {\n    if (!internalHandle) {\n      return false;\n    }\n\n    model.context.bindBuffer(convertType(internalType), null);\n    return true;\n  };\n\n  publicAPI.releaseGraphicsResources = () => {\n    if (internalHandle !== null) {\n      model.context.bindBuffer(convertType(internalType), null);\n      model.context.deleteBuffer(internalHandle);\n      internalHandle = null;\n    }\n  };\n\n  publicAPI.setOpenGLRenderWindow = rw => {\n    if (model._openGLRenderWindow === rw) {\n      return;\n    }\n\n    publicAPI.releaseGraphicsResources();\n    model._openGLRenderWindow = rw;\n    model.context = null;\n\n    if (rw) {\n      model.context = model._openGLRenderWindow.getContext();\n    }\n  };\n\n  publicAPI.getError = () => error;\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  objectType: ObjectType.ARRAY_BUFFER,\n  // _openGLRenderWindow: null,\n  context: null\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods\n\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['_openGLRenderWindow']);\n  macro.moveToProtected(publicAPI, model, ['openGLRenderWindow']);\n  vtkOpenGLBufferObject(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend,\n  ...STATIC,\n  ...Constants\n};","map":{"version":3,"names":["macro","Constants","ObjectType","STATIC","vtkOpenGLBufferObject","publicAPI","model","classHierarchy","push","convertType","type","ELEMENT_ARRAY_BUFFER","context","TEXTURE_BUFFER","ARRAY_BUFFER","internalType","internalHandle","dirty","error","getType","setType","value","getHandle","isReady","generateBuffer","objectTypeGL","createBuffer","upload","data","alreadyGenerated","bindBuffer","bufferData","STATIC_DRAW","bind","release","releaseGraphicsResources","deleteBuffer","setOpenGLRenderWindow","rw","_openGLRenderWindow","getContext","getError","DEFAULT_VALUES","objectType","extend","initialValues","Object","assign","obj","get","moveToProtected","newInstance"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/OpenGL/BufferObject/index.js"],"sourcesContent":["import macro from 'vtk.js/Sources/macros';\nimport Constants from 'vtk.js/Sources/Rendering/OpenGL/BufferObject/Constants';\n\nconst { ObjectType } = Constants;\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nexport const STATIC = {};\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLBufferObject methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLBufferObject(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLBufferObject');\n\n  // Class-specific private functions\n  function convertType(type) {\n    switch (type) {\n      case ObjectType.ELEMENT_ARRAY_BUFFER:\n        return model.context.ELEMENT_ARRAY_BUFFER;\n      case ObjectType.TEXTURE_BUFFER:\n        if ('TEXTURE_BUFFER' in model.context) {\n          return model.context.TEXTURE_BUFFER;\n        }\n      /* eslint-disable no-fallthrough */\n      // Intentional fallthrough in case there is no TEXTURE_BUFFER in WebGL\n      case ObjectType.ARRAY_BUFFER:\n      default:\n        return model.context.ARRAY_BUFFER;\n      /* eslint-enable no-fallthrough */\n    }\n  }\n\n  let internalType = null;\n  let internalHandle = null;\n  let dirty = true;\n  let error = '';\n\n  // Public API methods\n  publicAPI.getType = () => internalType;\n\n  publicAPI.setType = (value) => {\n    internalType = value;\n  };\n\n  publicAPI.getHandle = () => internalHandle;\n  publicAPI.isReady = () => dirty === false;\n\n  publicAPI.generateBuffer = (type) => {\n    const objectTypeGL = convertType(type);\n    if (internalHandle === null) {\n      internalHandle = model.context.createBuffer();\n      internalType = type;\n    }\n    return convertType(internalType) === objectTypeGL;\n  };\n\n  publicAPI.upload = (data, type) => {\n    // buffer, size, type\n    const alreadyGenerated = publicAPI.generateBuffer(type);\n    if (!alreadyGenerated) {\n      error = 'Trying to upload array buffer to incompatible buffer.';\n      return false;\n    }\n    model.context.bindBuffer(convertType(internalType), internalHandle);\n    model.context.bufferData(\n      convertType(internalType),\n      data,\n      model.context.STATIC_DRAW\n    );\n    dirty = false;\n    return true;\n  };\n\n  publicAPI.bind = () => {\n    if (!internalHandle) {\n      return false;\n    }\n    model.context.bindBuffer(convertType(internalType), internalHandle);\n    return true;\n  };\n\n  publicAPI.release = () => {\n    if (!internalHandle) {\n      return false;\n    }\n    model.context.bindBuffer(convertType(internalType), null);\n    return true;\n  };\n\n  publicAPI.releaseGraphicsResources = () => {\n    if (internalHandle !== null) {\n      model.context.bindBuffer(convertType(internalType), null);\n      model.context.deleteBuffer(internalHandle);\n      internalHandle = null;\n    }\n  };\n\n  publicAPI.setOpenGLRenderWindow = (rw) => {\n    if (model._openGLRenderWindow === rw) {\n      return;\n    }\n    publicAPI.releaseGraphicsResources();\n    model._openGLRenderWindow = rw;\n    model.context = null;\n    if (rw) {\n      model.context = model._openGLRenderWindow.getContext();\n    }\n  };\n\n  publicAPI.getError = () => error;\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  objectType: ObjectType.ARRAY_BUFFER,\n  // _openGLRenderWindow: null,\n  context: null,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n\n  macro.get(publicAPI, model, ['_openGLRenderWindow']);\n  macro.moveToProtected(publicAPI, model, ['openGLRenderWindow']);\n\n  vtkOpenGLBufferObject(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend);\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend, ...STATIC, ...Constants };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}