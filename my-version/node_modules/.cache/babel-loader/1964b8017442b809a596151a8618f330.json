{"ast":null,"code":"import macro from 'vtk.js/Sources/macros';\nconst {\n  vtkErrorMacro\n} = macro; // export const SHADER_TYPES = ['Vertex', 'Fragment', 'Geometry', 'Unknown'];\n// ----------------------------------------------------------------------------\n// vtkShader methods\n// ----------------------------------------------------------------------------\n\nfunction vtkShader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkShader');\n\n  publicAPI.compile = () => {\n    let stype = model.context.VERTEX_SHADER;\n\n    if (!model.source || !model.source.length || model.shaderType === 'Unknown') {\n      return false;\n    } // Ensure we delete the previous shader if necessary.\n\n\n    if (model.handle !== 0) {\n      model.context.deleteShader(model.handle);\n      model.handle = 0;\n    }\n\n    switch (model.shaderType) {\n      // case vtkShader::Geometry:\n      //   type = GL_GEOMETRY_SHADER;\n      //   break;\n      case 'Fragment':\n        stype = model.context.FRAGMENT_SHADER;\n        break;\n\n      case 'Vertex':\n      default:\n        stype = model.context.VERTEX_SHADER;\n        break;\n    }\n\n    model.handle = model.context.createShader(stype);\n    model.context.shaderSource(model.handle, model.source);\n    model.context.compileShader(model.handle);\n    const isCompiled = model.context.getShaderParameter(model.handle, model.context.COMPILE_STATUS);\n\n    if (!isCompiled) {\n      const lastError = model.context.getShaderInfoLog(model.handle);\n      vtkErrorMacro(`Error compiling shader '${model.source}': ${lastError}`);\n      model.context.deleteShader(model.handle);\n      model.handle = 0;\n      return false;\n    } // The shader compiled, store its handle and return success.\n\n\n    return true;\n  };\n\n  publicAPI.cleanup = () => {\n    if (model.shaderType === 'Unknown' || model.handle === 0) {\n      return;\n    }\n\n    model.context.deleteShader(model.handle);\n    model.handle = 0;\n    model.dirty = true;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  shaderType: 'Unknown',\n  source: '',\n  error: '',\n  handle: 0,\n  dirty: false,\n  context: null\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['shaderType', 'source', 'error', 'handle', 'context']); // Object methods\n\n  vtkShader(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkShader'); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend\n};","map":{"version":3,"names":["macro","vtkErrorMacro","vtkShader","publicAPI","model","classHierarchy","push","compile","stype","context","VERTEX_SHADER","source","length","shaderType","handle","deleteShader","FRAGMENT_SHADER","createShader","shaderSource","compileShader","isCompiled","getShaderParameter","COMPILE_STATUS","lastError","getShaderInfoLog","cleanup","dirty","DEFAULT_VALUES","error","extend","initialValues","Object","assign","obj","setGet","newInstance"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/OpenGL/Shader/index.js"],"sourcesContent":["import macro from 'vtk.js/Sources/macros';\n\nconst { vtkErrorMacro } = macro;\n\n// export const SHADER_TYPES = ['Vertex', 'Fragment', 'Geometry', 'Unknown'];\n\n// ----------------------------------------------------------------------------\n// vtkShader methods\n// ----------------------------------------------------------------------------\n\nfunction vtkShader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkShader');\n\n  publicAPI.compile = () => {\n    let stype = model.context.VERTEX_SHADER;\n\n    if (\n      !model.source ||\n      !model.source.length ||\n      model.shaderType === 'Unknown'\n    ) {\n      return false;\n    }\n\n    // Ensure we delete the previous shader if necessary.\n    if (model.handle !== 0) {\n      model.context.deleteShader(model.handle);\n      model.handle = 0;\n    }\n\n    switch (model.shaderType) {\n      // case vtkShader::Geometry:\n      //   type = GL_GEOMETRY_SHADER;\n      //   break;\n      case 'Fragment':\n        stype = model.context.FRAGMENT_SHADER;\n        break;\n      case 'Vertex':\n      default:\n        stype = model.context.VERTEX_SHADER;\n        break;\n    }\n\n    model.handle = model.context.createShader(stype);\n    model.context.shaderSource(model.handle, model.source);\n    model.context.compileShader(model.handle);\n    const isCompiled = model.context.getShaderParameter(\n      model.handle,\n      model.context.COMPILE_STATUS\n    );\n    if (!isCompiled) {\n      const lastError = model.context.getShaderInfoLog(model.handle);\n      vtkErrorMacro(`Error compiling shader '${model.source}': ${lastError}`);\n      model.context.deleteShader(model.handle);\n      model.handle = 0;\n      return false;\n    }\n\n    // The shader compiled, store its handle and return success.\n    return true;\n  };\n\n  publicAPI.cleanup = () => {\n    if (model.shaderType === 'Unknown' || model.handle === 0) {\n      return;\n    }\n\n    model.context.deleteShader(model.handle);\n    model.handle = 0;\n    model.dirty = true;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  shaderType: 'Unknown',\n  source: '',\n  error: '',\n  handle: 0,\n  dirty: false,\n  context: null,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, [\n    'shaderType',\n    'source',\n    'error',\n    'handle',\n    'context',\n  ]);\n\n  // Object methods\n  vtkShader(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkShader');\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}