{"ast":null,"code":"import * as macro from 'vtk.js/Sources/macros'; // ----------------------------------------------------------------------------\n// vtkWebGPUPipeline methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUPipeline(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUPipeline');\n\n  publicAPI.getShaderDescriptions = () => model.shaderDescriptions;\n\n  publicAPI.initialize = (device, hash) => {\n    // start with the renderencoder settings\n    model.pipelineDescription = model.renderEncoder.getPipelineSettings();\n    model.pipelineDescription.primitive.topology = model.topology;\n    model.pipelineDescription.vertex = model.vertexState;\n    model.pipelineDescription.label = hash; // add in bind group layouts\n\n    const bindGroupLayouts = [];\n\n    for (let i = 0; i < model.layouts.length; i++) {\n      bindGroupLayouts.push(model.layouts[i].layout);\n    }\n\n    model.pipelineLayout = device.getHandle().createPipelineLayout({\n      bindGroupLayouts\n    });\n    model.pipelineDescription.layout = model.pipelineLayout;\n\n    for (let i = 0; i < model.shaderDescriptions.length; i++) {\n      const sd = model.shaderDescriptions[i];\n      const sm = device.getShaderModule(sd);\n\n      if (sd.getType() === 'vertex') {\n        model.pipelineDescription.vertex.module = sm.getHandle();\n        model.pipelineDescription.vertex.entryPoint = 'main';\n      }\n\n      if (sd.getType() === 'fragment') {\n        model.pipelineDescription.fragment.module = sm.getHandle();\n        model.pipelineDescription.fragment.entryPoint = 'main';\n      }\n    }\n\n    model.handle = device.getHandle().createRenderPipeline(model.pipelineDescription);\n  };\n\n  publicAPI.getShaderDescription = stype => {\n    for (let i = 0; i < model.shaderDescriptions.length; i++) {\n      if (model.shaderDescriptions[i].getType() === stype) return model.shaderDescriptions[i];\n    }\n\n    return null;\n  };\n\n  publicAPI.addBindGroupLayout = bindGroup => {\n    if (!bindGroup) {\n      return;\n    }\n\n    model.layouts.push({\n      layout: bindGroup.getBindGroupLayout(model.device),\n      label: bindGroup.getLabel()\n    });\n  };\n\n  publicAPI.getBindGroupLayout = idx => model.layouts[idx].layout;\n\n  publicAPI.getBindGroupLayoutCount = llabel => {\n    for (let i = 0; i < model.layouts.length; i++) {\n      if (model.layouts[i].label === llabel) {\n        return i;\n      }\n    }\n\n    return 0;\n  };\n\n  publicAPI.bindVertexInput = (renderEncoder, vInput) => {\n    vInput.bindBuffers(renderEncoder);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  handle: null,\n  layouts: null,\n  renderEncoder: null,\n  shaderDescriptions: null,\n  vertexState: null,\n  topology: null,\n  pipelineDescription: null\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  model.layouts = [];\n  model.shaderDescriptions = [];\n  macro.get(publicAPI, model, ['handle', 'pipelineDescription']);\n  macro.setGet(publicAPI, model, ['device', 'renderEncoder', 'topology', 'vertexState']); // For more macro methods, see \"Sources/macros.js\"\n  // Object specific methods\n\n  vtkWebGPUPipeline(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkWebGPUPipeline'); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend\n};","map":{"version":3,"names":["macro","vtkWebGPUPipeline","publicAPI","model","classHierarchy","push","getShaderDescriptions","shaderDescriptions","initialize","device","hash","pipelineDescription","renderEncoder","getPipelineSettings","primitive","topology","vertex","vertexState","label","bindGroupLayouts","i","layouts","length","layout","pipelineLayout","getHandle","createPipelineLayout","sd","sm","getShaderModule","getType","module","entryPoint","fragment","handle","createRenderPipeline","getShaderDescription","stype","addBindGroupLayout","bindGroup","getBindGroupLayout","getLabel","idx","getBindGroupLayoutCount","llabel","bindVertexInput","vInput","bindBuffers","DEFAULT_VALUES","extend","initialValues","Object","assign","obj","get","setGet","newInstance"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/WebGPU/Pipeline/index.js"],"sourcesContent":["import * as macro from 'vtk.js/Sources/macros';\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUPipeline methods\n// ----------------------------------------------------------------------------\nfunction vtkWebGPUPipeline(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUPipeline');\n\n  publicAPI.getShaderDescriptions = () => model.shaderDescriptions;\n\n  publicAPI.initialize = (device, hash) => {\n    // start with the renderencoder settings\n    model.pipelineDescription = model.renderEncoder.getPipelineSettings();\n\n    model.pipelineDescription.primitive.topology = model.topology;\n\n    model.pipelineDescription.vertex = model.vertexState;\n\n    model.pipelineDescription.label = hash;\n\n    // add in bind group layouts\n    const bindGroupLayouts = [];\n    for (let i = 0; i < model.layouts.length; i++) {\n      bindGroupLayouts.push(model.layouts[i].layout);\n    }\n    model.pipelineLayout = device\n      .getHandle()\n      .createPipelineLayout({ bindGroupLayouts });\n    model.pipelineDescription.layout = model.pipelineLayout;\n\n    for (let i = 0; i < model.shaderDescriptions.length; i++) {\n      const sd = model.shaderDescriptions[i];\n      const sm = device.getShaderModule(sd);\n      if (sd.getType() === 'vertex') {\n        model.pipelineDescription.vertex.module = sm.getHandle();\n        model.pipelineDescription.vertex.entryPoint = 'main';\n      }\n      if (sd.getType() === 'fragment') {\n        model.pipelineDescription.fragment.module = sm.getHandle();\n        model.pipelineDescription.fragment.entryPoint = 'main';\n      }\n    }\n\n    model.handle = device\n      .getHandle()\n      .createRenderPipeline(model.pipelineDescription);\n  };\n\n  publicAPI.getShaderDescription = (stype) => {\n    for (let i = 0; i < model.shaderDescriptions.length; i++) {\n      if (model.shaderDescriptions[i].getType() === stype)\n        return model.shaderDescriptions[i];\n    }\n    return null;\n  };\n\n  publicAPI.addBindGroupLayout = (bindGroup) => {\n    if (!bindGroup) {\n      return;\n    }\n    model.layouts.push({\n      layout: bindGroup.getBindGroupLayout(model.device),\n      label: bindGroup.getLabel(),\n    });\n  };\n\n  publicAPI.getBindGroupLayout = (idx) => model.layouts[idx].layout;\n\n  publicAPI.getBindGroupLayoutCount = (llabel) => {\n    for (let i = 0; i < model.layouts.length; i++) {\n      if (model.layouts[i].label === llabel) {\n        return i;\n      }\n    }\n    return 0;\n  };\n\n  publicAPI.bindVertexInput = (renderEncoder, vInput) => {\n    vInput.bindBuffers(renderEncoder);\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\nconst DEFAULT_VALUES = {\n  handle: null,\n  layouts: null,\n  renderEncoder: null,\n  shaderDescriptions: null,\n  vertexState: null,\n  topology: null,\n  pipelineDescription: null,\n};\n\n// ----------------------------------------------------------------------------\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n\n  model.layouts = [];\n  model.shaderDescriptions = [];\n\n  macro.get(publicAPI, model, ['handle', 'pipelineDescription']);\n  macro.setGet(publicAPI, model, [\n    'device',\n    'renderEncoder',\n    'topology',\n    'vertexState',\n  ]);\n\n  // For more macro methods, see \"Sources/macros.js\"\n  // Object specific methods\n  vtkWebGPUPipeline(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\nexport const newInstance = macro.newInstance(extend, 'vtkWebGPUPipeline');\n\n// ----------------------------------------------------------------------------\nexport default { newInstance, extend };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}