{"ast":null,"code":"import macro from 'vtk.js/Sources/macros';\nimport Endian from 'vtk.js/Sources/Common/Core/Endian';\nimport { DataTypeByteSize } from 'vtk.js/Sources/Common/Core/DataArray/Constants';\nimport { has, registerType } from 'vtk.js/Sources/IO/Core/DataAccessHelper';\nconst {\n  vtkErrorMacro,\n  vtkDebugMacro\n} = macro;\n\nconst REJECT_COMPRESSION = () => {\n  vtkErrorMacro('LiteHttpDataAccessHelper does not support compression. Need to register HttpDataAccessHelper instead.');\n  return Promise.reject(new Error('LiteHttpDataAccessHelper does not support compression. Need to register HttpDataAccessHelper instead.'));\n};\n/* eslint-disable prefer-promise-reject-errors */\n\n\nlet requestCount = 0;\n\nfunction openAsyncXHR(method, url) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const xhr = new XMLHttpRequest();\n  xhr.open(method, url, true);\n\n  if (options.headers) {\n    Object.entries(options.headers).forEach(_ref => {\n      let [key, value] = _ref;\n      return xhr.setRequestHeader(key, value);\n    });\n  }\n\n  if (options.progressCallback) {\n    xhr.addEventListener('progress', options.progressCallback);\n  }\n\n  return xhr;\n}\n\nfunction fetchBinary(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise((resolve, reject) => {\n    const xhr = openAsyncXHR('GET', url, options);\n\n    xhr.onreadystatechange = e => {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200 || xhr.status === 0) {\n          resolve(xhr.response);\n        } else {\n          reject({\n            xhr,\n            e\n          });\n        }\n      }\n    }; // Make request\n\n\n    xhr.responseType = 'arraybuffer';\n    xhr.send();\n  });\n}\n\nfunction fetchArray(instance, baseURL, array) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  if (options && options.compression) {\n    return REJECT_COMPRESSION();\n  }\n\n  if (array.ref && !array.ref.pending) {\n    return new Promise((resolve, reject) => {\n      const url = [baseURL, array.ref.basepath, array.ref.id].join('/');\n      const xhr = openAsyncXHR('GET', url, options);\n\n      xhr.onreadystatechange = e => {\n        if (xhr.readyState === 1) {\n          array.ref.pending = true;\n\n          if (++requestCount === 1 && instance?.invokeBusy) {\n            instance.invokeBusy(true);\n          }\n        }\n\n        if (xhr.readyState === 4) {\n          array.ref.pending = false;\n\n          if (xhr.status === 200 || xhr.status === 0) {\n            array.buffer = xhr.response;\n\n            if (array.ref.encode === 'JSON') {\n              array.values = JSON.parse(array.buffer);\n            } else {\n              if (Endian.ENDIANNESS !== array.ref.encode && Endian.ENDIANNESS) {\n                // Need to swap bytes\n                vtkDebugMacro(`Swap bytes of ${array.name}`);\n                Endian.swapBytes(array.buffer, DataTypeByteSize[array.dataType]);\n              }\n\n              array.values = macro.newTypedArray(array.dataType, array.buffer);\n            }\n\n            if (array.values.length !== array.size) {\n              vtkErrorMacro(`Error in FetchArray: ${array.name}, does not have the proper array size. Got ${array.values.length}, instead of ${array.size}`);\n            } // Done with the ref and work\n\n\n            delete array.ref;\n\n            if (--requestCount === 0 && instance?.invokeBusy) {\n              instance.invokeBusy(false);\n            }\n\n            if (instance?.modified) {\n              instance.modified();\n            }\n\n            resolve(array);\n          } else {\n            reject({\n              xhr,\n              e\n            });\n          }\n        }\n      }; // Make request\n\n\n      xhr.responseType = array.dataType !== 'string' ? 'arraybuffer' : 'text';\n      xhr.send();\n    });\n  }\n\n  return Promise.resolve(array);\n} // ----------------------------------------------------------------------------\n\n\nfunction fetchJSON(instance, url) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (options && options.compression) {\n    return REJECT_COMPRESSION();\n  }\n\n  return new Promise((resolve, reject) => {\n    const xhr = openAsyncXHR('GET', url, options);\n\n    xhr.onreadystatechange = e => {\n      if (xhr.readyState === 1) {\n        if (++requestCount === 1 && instance?.invokeBusy) {\n          instance.invokeBusy(true);\n        }\n      }\n\n      if (xhr.readyState === 4) {\n        if (--requestCount === 0 && instance?.invokeBusy) {\n          instance.invokeBusy(false);\n        }\n\n        if (xhr.status === 200 || xhr.status === 0) {\n          resolve(JSON.parse(xhr.responseText));\n        } else {\n          reject({\n            xhr,\n            e\n          });\n        }\n      }\n    }; // Make request\n\n\n    xhr.responseType = 'text';\n    xhr.send();\n  });\n} // ----------------------------------------------------------------------------\n\n\nfunction fetchText(instance, url) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (options && options.compression) {\n    return REJECT_COMPRESSION();\n  }\n\n  return new Promise((resolve, reject) => {\n    const xhr = openAsyncXHR('GET', url, options);\n\n    xhr.onreadystatechange = e => {\n      if (xhr.readyState === 1) {\n        if (++requestCount === 1 && instance?.invokeBusy) {\n          instance.invokeBusy(true);\n        }\n      }\n\n      if (xhr.readyState === 4) {\n        if (--requestCount === 0 && instance?.invokeBusy) {\n          instance.invokeBusy(false);\n        }\n\n        if (xhr.status === 200 || xhr.status === 0) {\n          resolve(xhr.responseText);\n        } else {\n          reject({\n            xhr,\n            e\n          });\n        }\n      }\n    }; // Make request\n\n\n    xhr.responseType = 'text';\n    xhr.send();\n  });\n} // ----------------------------------------------------------------------------\n\n\nfunction fetchImage(instance, url) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n\n    if (options.crossOrigin) {\n      img.crossOrigin = options.crossOrigin;\n    }\n\n    img.onload = () => resolve(img);\n\n    img.onerror = reject;\n    img.src = url;\n  });\n}\n/* eslint-enable prefer-promise-reject-errors */\n// ----------------------------------------------------------------------------\n\n\nconst LiteHttpDataAccessHelper = {\n  fetchArray,\n  fetchJSON,\n  fetchText,\n  fetchBinary,\n  // Only for HTTP\n  fetchImage\n}; // The lite version should never override a full feature one...\n\nif (!has('http')) {\n  registerType('http', options => LiteHttpDataAccessHelper);\n}\n\nexport default LiteHttpDataAccessHelper;","map":{"version":3,"names":["macro","Endian","DataTypeByteSize","has","registerType","vtkErrorMacro","vtkDebugMacro","REJECT_COMPRESSION","Promise","reject","Error","requestCount","openAsyncXHR","method","url","options","xhr","XMLHttpRequest","open","headers","Object","entries","forEach","key","value","setRequestHeader","progressCallback","addEventListener","fetchBinary","resolve","onreadystatechange","e","readyState","status","response","responseType","send","fetchArray","instance","baseURL","array","compression","ref","pending","basepath","id","join","invokeBusy","buffer","encode","values","JSON","parse","ENDIANNESS","name","swapBytes","dataType","newTypedArray","length","size","modified","fetchJSON","responseText","fetchText","fetchImage","img","Image","crossOrigin","onload","onerror","src","LiteHttpDataAccessHelper"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/IO/Core/DataAccessHelper/LiteHttpDataAccessHelper.js"],"sourcesContent":["import macro from 'vtk.js/Sources/macros';\nimport Endian from 'vtk.js/Sources/Common/Core/Endian';\nimport { DataTypeByteSize } from 'vtk.js/Sources/Common/Core/DataArray/Constants';\nimport { has, registerType } from 'vtk.js/Sources/IO/Core/DataAccessHelper';\n\nconst { vtkErrorMacro, vtkDebugMacro } = macro;\n\nconst REJECT_COMPRESSION = () => {\n  vtkErrorMacro(\n    'LiteHttpDataAccessHelper does not support compression. Need to register HttpDataAccessHelper instead.'\n  );\n  return Promise.reject(\n    new Error(\n      'LiteHttpDataAccessHelper does not support compression. Need to register HttpDataAccessHelper instead.'\n    )\n  );\n};\n\n/* eslint-disable prefer-promise-reject-errors */\nlet requestCount = 0;\n\nfunction openAsyncXHR(method, url, options = {}) {\n  const xhr = new XMLHttpRequest();\n  xhr.open(method, url, true);\n\n  if (options.headers) {\n    Object.entries(options.headers).forEach(([key, value]) =>\n      xhr.setRequestHeader(key, value)\n    );\n  }\n\n  if (options.progressCallback) {\n    xhr.addEventListener('progress', options.progressCallback);\n  }\n\n  return xhr;\n}\n\nfunction fetchBinary(url, options = {}) {\n  return new Promise((resolve, reject) => {\n    const xhr = openAsyncXHR('GET', url, options);\n\n    xhr.onreadystatechange = (e) => {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200 || xhr.status === 0) {\n          resolve(xhr.response);\n        } else {\n          reject({ xhr, e });\n        }\n      }\n    };\n\n    // Make request\n    xhr.responseType = 'arraybuffer';\n    xhr.send();\n  });\n}\n\nfunction fetchArray(instance, baseURL, array, options = {}) {\n  if (options && options.compression) {\n    return REJECT_COMPRESSION();\n  }\n\n  if (array.ref && !array.ref.pending) {\n    return new Promise((resolve, reject) => {\n      const url = [baseURL, array.ref.basepath, array.ref.id].join('/');\n      const xhr = openAsyncXHR('GET', url, options);\n\n      xhr.onreadystatechange = (e) => {\n        if (xhr.readyState === 1) {\n          array.ref.pending = true;\n          if (++requestCount === 1 && instance?.invokeBusy) {\n            instance.invokeBusy(true);\n          }\n        }\n        if (xhr.readyState === 4) {\n          array.ref.pending = false;\n          if (xhr.status === 200 || xhr.status === 0) {\n            array.buffer = xhr.response;\n\n            if (array.ref.encode === 'JSON') {\n              array.values = JSON.parse(array.buffer);\n            } else {\n              if (Endian.ENDIANNESS !== array.ref.encode && Endian.ENDIANNESS) {\n                // Need to swap bytes\n                vtkDebugMacro(`Swap bytes of ${array.name}`);\n                Endian.swapBytes(\n                  array.buffer,\n                  DataTypeByteSize[array.dataType]\n                );\n              }\n\n              array.values = macro.newTypedArray(array.dataType, array.buffer);\n            }\n\n            if (array.values.length !== array.size) {\n              vtkErrorMacro(\n                `Error in FetchArray: ${array.name}, does not have the proper array size. Got ${array.values.length}, instead of ${array.size}`\n              );\n            }\n\n            // Done with the ref and work\n            delete array.ref;\n            if (--requestCount === 0 && instance?.invokeBusy) {\n              instance.invokeBusy(false);\n            }\n            if (instance?.modified) {\n              instance.modified();\n            }\n            resolve(array);\n          } else {\n            reject({ xhr, e });\n          }\n        }\n      };\n\n      // Make request\n      xhr.responseType = array.dataType !== 'string' ? 'arraybuffer' : 'text';\n      xhr.send();\n    });\n  }\n\n  return Promise.resolve(array);\n}\n\n// ----------------------------------------------------------------------------\n\nfunction fetchJSON(instance, url, options = {}) {\n  if (options && options.compression) {\n    return REJECT_COMPRESSION();\n  }\n\n  return new Promise((resolve, reject) => {\n    const xhr = openAsyncXHR('GET', url, options);\n\n    xhr.onreadystatechange = (e) => {\n      if (xhr.readyState === 1) {\n        if (++requestCount === 1 && instance?.invokeBusy) {\n          instance.invokeBusy(true);\n        }\n      }\n      if (xhr.readyState === 4) {\n        if (--requestCount === 0 && instance?.invokeBusy) {\n          instance.invokeBusy(false);\n        }\n        if (xhr.status === 200 || xhr.status === 0) {\n          resolve(JSON.parse(xhr.responseText));\n        } else {\n          reject({ xhr, e });\n        }\n      }\n    };\n\n    // Make request\n    xhr.responseType = 'text';\n    xhr.send();\n  });\n}\n\n// ----------------------------------------------------------------------------\n\nfunction fetchText(instance, url, options = {}) {\n  if (options && options.compression) {\n    return REJECT_COMPRESSION();\n  }\n\n  return new Promise((resolve, reject) => {\n    const xhr = openAsyncXHR('GET', url, options);\n\n    xhr.onreadystatechange = (e) => {\n      if (xhr.readyState === 1) {\n        if (++requestCount === 1 && instance?.invokeBusy) {\n          instance.invokeBusy(true);\n        }\n      }\n      if (xhr.readyState === 4) {\n        if (--requestCount === 0 && instance?.invokeBusy) {\n          instance.invokeBusy(false);\n        }\n        if (xhr.status === 200 || xhr.status === 0) {\n          resolve(xhr.responseText);\n        } else {\n          reject({ xhr, e });\n        }\n      }\n    };\n\n    // Make request\n    xhr.responseType = 'text';\n    xhr.send();\n  });\n}\n\n// ----------------------------------------------------------------------------\n\nfunction fetchImage(instance, url, options = {}) {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    if (options.crossOrigin) {\n      img.crossOrigin = options.crossOrigin;\n    }\n    img.onload = () => resolve(img);\n    img.onerror = reject;\n    img.src = url;\n  });\n}\n/* eslint-enable prefer-promise-reject-errors */\n\n// ----------------------------------------------------------------------------\n\nconst LiteHttpDataAccessHelper = {\n  fetchArray,\n  fetchJSON,\n  fetchText,\n  fetchBinary, // Only for HTTP\n  fetchImage,\n};\n\n// The lite version should never override a full feature one...\nif (!has('http')) {\n  registerType('http', (options) => LiteHttpDataAccessHelper);\n}\n\nexport default LiteHttpDataAccessHelper;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}