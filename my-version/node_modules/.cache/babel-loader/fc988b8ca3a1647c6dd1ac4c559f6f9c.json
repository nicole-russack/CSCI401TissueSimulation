{"ast":null,"code":"/* eslint-disable arrow-body-style */\nimport otherStaticMethods from 'vtk.js/Sources/Rendering/Core/Mapper/Static';\nimport macro from 'vtk.js/Sources/macros';\n\nfunction addCoincidentTopologyMethods(publicAPI, model, nameList) {\n  nameList.forEach(item => {\n    publicAPI[`get${item.method}`] = () => model[item.key];\n\n    publicAPI[`set${item.method}`] = (factor, offset) => {\n      model[item.key] = {\n        factor,\n        offset\n      };\n    };\n  });\n}\n\nexport const CATEGORIES = ['Polygon', 'Line', 'Point']; // CoincidentTopology static methods ------------------------------------------\n\nconst staticOffsetModel = {\n  Polygon: {\n    factor: 2,\n    offset: 0\n  },\n  Line: {\n    factor: 1,\n    offset: -1\n  },\n  Point: {\n    factor: 0,\n    offset: -2\n  }\n};\nconst staticOffsetAPI = {};\naddCoincidentTopologyMethods(staticOffsetAPI, staticOffsetModel, CATEGORIES.map(key => ({\n  key,\n  method: `ResolveCoincidentTopology${key}OffsetParameters`\n})));\n\nfunction implementCoincidentTopologyMethods(publicAPI, model) {\n  if (model.resolveCoincidentTopology === undefined) {\n    model.resolveCoincidentTopology = false;\n  }\n\n  macro.setGet(publicAPI, model, ['resolveCoincidentTopology']); // Relative methods\n\n  model.topologyOffset = {\n    Polygon: {\n      factor: 0,\n      offset: 0\n    },\n    Line: {\n      factor: 0,\n      offset: 0\n    },\n    Point: {\n      factor: 0,\n      offset: 0\n    }\n  }; // Add Static methods to our instance\n\n  Object.keys(otherStaticMethods).forEach(methodName => {\n    publicAPI[methodName] = otherStaticMethods[methodName];\n  });\n  Object.keys(staticOffsetAPI).forEach(methodName => {\n    publicAPI[methodName] = staticOffsetAPI[methodName];\n  });\n  addCoincidentTopologyMethods(publicAPI, model.topologyOffset, CATEGORIES.map(key => ({\n    key,\n    method: `RelativeCoincidentTopology${key}OffsetParameters`\n  })));\n\n  publicAPI.getCoincidentTopologyPolygonOffsetParameters = () => {\n    const globalValue = staticOffsetAPI.getResolveCoincidentTopologyPolygonOffsetParameters();\n    const localValue = publicAPI.getRelativeCoincidentTopologyPolygonOffsetParameters();\n    return {\n      factor: globalValue.factor + localValue.factor,\n      offset: globalValue.offset + localValue.offset\n    };\n  };\n\n  publicAPI.getCoincidentTopologyLineOffsetParameters = () => {\n    const globalValue = staticOffsetAPI.getResolveCoincidentTopologyLineOffsetParameters();\n    const localValue = publicAPI.getRelativeCoincidentTopologyLineOffsetParameters();\n    return {\n      factor: globalValue.factor + localValue.factor,\n      offset: globalValue.offset + localValue.offset\n    };\n  };\n\n  publicAPI.getCoincidentTopologyPointOffsetParameter = () => {\n    const globalValue = staticOffsetAPI.getResolveCoincidentTopologyPointOffsetParameters();\n    const localValue = publicAPI.getRelativeCoincidentTopologyPointOffsetParameters();\n    return {\n      factor: globalValue.factor + localValue.factor,\n      offset: globalValue.offset + localValue.offset\n    };\n  };\n}\n\nexport default {\n  implementCoincidentTopologyMethods,\n  staticOffsetAPI,\n  otherStaticMethods,\n  CATEGORIES\n};","map":{"version":3,"names":["otherStaticMethods","macro","addCoincidentTopologyMethods","publicAPI","model","nameList","forEach","item","method","key","factor","offset","CATEGORIES","staticOffsetModel","Polygon","Line","Point","staticOffsetAPI","map","implementCoincidentTopologyMethods","resolveCoincidentTopology","undefined","setGet","topologyOffset","Object","keys","methodName","getCoincidentTopologyPolygonOffsetParameters","globalValue","getResolveCoincidentTopologyPolygonOffsetParameters","localValue","getRelativeCoincidentTopologyPolygonOffsetParameters","getCoincidentTopologyLineOffsetParameters","getResolveCoincidentTopologyLineOffsetParameters","getRelativeCoincidentTopologyLineOffsetParameters","getCoincidentTopologyPointOffsetParameter","getResolveCoincidentTopologyPointOffsetParameters","getRelativeCoincidentTopologyPointOffsetParameters"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/Core/Mapper/CoincidentTopologyHelper.js"],"sourcesContent":["/* eslint-disable arrow-body-style */\nimport otherStaticMethods from 'vtk.js/Sources/Rendering/Core/Mapper/Static';\nimport macro from 'vtk.js/Sources/macros';\n\nfunction addCoincidentTopologyMethods(publicAPI, model, nameList) {\n  nameList.forEach((item) => {\n    publicAPI[`get${item.method}`] = () => model[item.key];\n    publicAPI[`set${item.method}`] = (factor, offset) => {\n      model[item.key] = { factor, offset };\n    };\n  });\n}\n\nexport const CATEGORIES = ['Polygon', 'Line', 'Point'];\n\n// CoincidentTopology static methods ------------------------------------------\n\nconst staticOffsetModel = {\n  Polygon: { factor: 2, offset: 0 },\n  Line: { factor: 1, offset: -1 },\n  Point: { factor: 0, offset: -2 },\n};\nconst staticOffsetAPI = {};\n\naddCoincidentTopologyMethods(\n  staticOffsetAPI,\n  staticOffsetModel,\n  CATEGORIES.map((key) => ({\n    key,\n    method: `ResolveCoincidentTopology${key}OffsetParameters`,\n  }))\n);\n\nfunction implementCoincidentTopologyMethods(publicAPI, model) {\n  if (model.resolveCoincidentTopology === undefined) {\n    model.resolveCoincidentTopology = false;\n  }\n\n  macro.setGet(publicAPI, model, ['resolveCoincidentTopology']);\n\n  // Relative methods\n  model.topologyOffset = {\n    Polygon: { factor: 0, offset: 0 },\n    Line: { factor: 0, offset: 0 },\n    Point: { factor: 0, offset: 0 },\n  };\n\n  // Add Static methods to our instance\n  Object.keys(otherStaticMethods).forEach((methodName) => {\n    publicAPI[methodName] = otherStaticMethods[methodName];\n  });\n  Object.keys(staticOffsetAPI).forEach((methodName) => {\n    publicAPI[methodName] = staticOffsetAPI[methodName];\n  });\n\n  addCoincidentTopologyMethods(\n    publicAPI,\n    model.topologyOffset,\n    CATEGORIES.map((key) => ({\n      key,\n      method: `RelativeCoincidentTopology${key}OffsetParameters`,\n    }))\n  );\n\n  publicAPI.getCoincidentTopologyPolygonOffsetParameters = () => {\n    const globalValue =\n      staticOffsetAPI.getResolveCoincidentTopologyPolygonOffsetParameters();\n    const localValue =\n      publicAPI.getRelativeCoincidentTopologyPolygonOffsetParameters();\n    return {\n      factor: globalValue.factor + localValue.factor,\n      offset: globalValue.offset + localValue.offset,\n    };\n  };\n\n  publicAPI.getCoincidentTopologyLineOffsetParameters = () => {\n    const globalValue =\n      staticOffsetAPI.getResolveCoincidentTopologyLineOffsetParameters();\n    const localValue =\n      publicAPI.getRelativeCoincidentTopologyLineOffsetParameters();\n    return {\n      factor: globalValue.factor + localValue.factor,\n      offset: globalValue.offset + localValue.offset,\n    };\n  };\n\n  publicAPI.getCoincidentTopologyPointOffsetParameter = () => {\n    const globalValue =\n      staticOffsetAPI.getResolveCoincidentTopologyPointOffsetParameters();\n    const localValue =\n      publicAPI.getRelativeCoincidentTopologyPointOffsetParameters();\n    return {\n      factor: globalValue.factor + localValue.factor,\n      offset: globalValue.offset + localValue.offset,\n    };\n  };\n}\n\nexport default {\n  implementCoincidentTopologyMethods,\n  staticOffsetAPI,\n  otherStaticMethods,\n  CATEGORIES,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}