{"ast":null,"code":"import seedrandom from 'seedrandom';\nimport macro from 'vtk.js/Sources/macros';\nconst {\n  vtkErrorMacro,\n  vtkWarningMacro\n} = macro; // ----------------------------------------------------------------------------\n\n/* eslint-disable camelcase                                                  */\n\n/* eslint-disable no-cond-assign                                             */\n\n/* eslint-disable no-bitwise                                                 */\n\n/* eslint-disable no-multi-assign                                            */\n// ----------------------------------------------------------------------------\n\nlet randomSeedValue = 0;\nconst VTK_MAX_ROTATIONS = 20;\nconst VTK_SMALL_NUMBER = 1.0e-12;\n\nfunction notImplemented(method) {\n  return () => vtkErrorMacro(`vtkMath::${method} - NOT IMPLEMENTED`);\n} // Swap rows for n by n matrix\n\n\nfunction swapRowsMatrix_nxn(matrix, n, row1, row2) {\n  let tmp;\n\n  for (let i = 0; i < n; i++) {\n    tmp = matrix[row1 * n + i];\n    matrix[row1 * n + i] = matrix[row2 * n + i];\n    matrix[row2 * n + i] = tmp;\n  }\n} // Swap columns for n by n matrix\n\n\nfunction swapColumnsMatrix_nxn(matrix, n, column1, column2) {\n  let tmp;\n\n  for (let i = 0; i < n; i++) {\n    tmp = matrix[i * n + column1];\n    matrix[i * n + column1] = matrix[i * n + column2];\n    matrix[i * n + column2] = tmp;\n  }\n} // ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\n\nexport function createArray() {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n  // faster than Array.from and/or while loop\n  return Array(size).fill(0);\n}\nexport const Pi = () => Math.PI;\nexport function radiansFromDegrees(deg) {\n  return deg / 180 * Math.PI;\n}\nexport function degreesFromRadians(rad) {\n  return rad * 180 / Math.PI;\n}\nexport const {\n  round,\n  floor,\n  ceil,\n  min,\n  max\n} = Math;\nexport function arrayMin(arr) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let minValue = Infinity;\n\n  for (let i = offset, len = arr.length; i < len; i += stride) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n    }\n  }\n\n  return minValue;\n}\nexport function arrayMax(arr) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let maxValue = -Infinity;\n\n  for (let i = offset, len = arr.length; i < len; i += stride) {\n    if (maxValue < arr[i]) {\n      maxValue = arr[i];\n    }\n  }\n\n  return maxValue;\n}\nexport function arrayRange(arr) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let minValue = Infinity;\n  let maxValue = -Infinity;\n\n  for (let i = offset, len = arr.length; i < len; i += stride) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n    }\n\n    if (maxValue < arr[i]) {\n      maxValue = arr[i];\n    }\n  }\n\n  return [minValue, maxValue];\n}\nexport const ceilLog2 = notImplemented('ceilLog2');\nexport const factorial = notImplemented('factorial');\nexport function nearestPowerOfTwo(xi) {\n  let v = 1;\n\n  while (v < xi) {\n    v *= 2;\n  }\n\n  return v;\n}\nexport function isPowerOfTwo(x) {\n  return x === nearestPowerOfTwo(x);\n}\nexport function binomial(m, n) {\n  let r = 1;\n\n  for (let i = 1; i <= n; ++i) {\n    r *= (m - i + 1) / i;\n  }\n\n  return Math.floor(r);\n}\nexport function beginCombination(m, n) {\n  if (m < n) {\n    return 0;\n  }\n\n  const r = createArray(n);\n\n  for (let i = 0; i < n; ++i) {\n    r[i] = i;\n  }\n\n  return r;\n}\nexport function nextCombination(m, n, r) {\n  let status = 0;\n\n  for (let i = n - 1; i >= 0; --i) {\n    if (r[i] < m - n + i) {\n      let j = r[i] + 1;\n\n      while (i < n) {\n        r[i++] = j++;\n      }\n\n      status = 1;\n      break;\n    }\n  }\n\n  return status;\n}\nexport function randomSeed(seed) {\n  seedrandom(`${seed}`, {\n    global: true\n  });\n  randomSeedValue = seed;\n}\nexport function getSeed() {\n  return randomSeedValue;\n}\nexport function random() {\n  let minValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let maxValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  const delta = maxValue - minValue;\n  return minValue + delta * Math.random();\n}\nexport const gaussian = notImplemented('gaussian'); // Vect3 operations\n\nexport function add(a, b, out) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\nexport function subtract(a, b, out) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\nexport function multiplyScalar(vec, scalar) {\n  vec[0] *= scalar;\n  vec[1] *= scalar;\n  vec[2] *= scalar;\n  return vec;\n}\nexport function multiplyScalar2D(vec, scalar) {\n  vec[0] *= scalar;\n  vec[1] *= scalar;\n  return vec;\n}\nexport function multiplyAccumulate(a, b, scalar, out) {\n  out[0] = a[0] + b[0] * scalar;\n  out[1] = a[1] + b[1] * scalar;\n  out[2] = a[2] + b[2] * scalar;\n  return out;\n}\nexport function multiplyAccumulate2D(a, b, scalar, out) {\n  out[0] = a[0] + b[0] * scalar;\n  out[1] = a[1] + b[1] * scalar;\n  return out;\n}\nexport function dot(x, y) {\n  return x[0] * y[0] + x[1] * y[1] + x[2] * y[2];\n}\nexport function outer(x, y, out_3x3) {\n  out_3x3[0] = x[0] * y[0];\n  out_3x3[1] = x[0] * y[1];\n  out_3x3[2] = x[0] * y[2];\n  out_3x3[3] = x[1] * y[0];\n  out_3x3[4] = x[1] * y[1];\n  out_3x3[5] = x[1] * y[2];\n  out_3x3[6] = x[2] * y[0];\n  out_3x3[7] = x[2] * y[1];\n  out_3x3[8] = x[2] * y[2];\n}\nexport function cross(x, y, out) {\n  const Zx = x[1] * y[2] - x[2] * y[1];\n  const Zy = x[2] * y[0] - x[0] * y[2];\n  const Zz = x[0] * y[1] - x[1] * y[0];\n  out[0] = Zx;\n  out[1] = Zy;\n  out[2] = Zz;\n  return out;\n}\nexport function norm(x) {\n  let n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n\n  switch (n) {\n    case 1:\n      return Math.abs(x);\n\n    case 2:\n      return Math.sqrt(x[0] * x[0] + x[1] * x[1]);\n\n    case 3:\n      return Math.sqrt(x[0] * x[0] + x[1] * x[1] + x[2] * x[2]);\n\n    default:\n      {\n        let sum = 0;\n\n        for (let i = 0; i < n; i++) {\n          sum += x[i] * x[i];\n        }\n\n        return Math.sqrt(sum);\n      }\n  }\n}\nexport function normalize(x) {\n  const den = norm(x);\n\n  if (den !== 0.0) {\n    x[0] /= den;\n    x[1] /= den;\n    x[2] /= den;\n  }\n\n  return den;\n}\nexport function perpendiculars(x, y, z, theta) {\n  const x2 = x[0] * x[0];\n  const y2 = x[1] * x[1];\n  const z2 = x[2] * x[2];\n  const r = Math.sqrt(x2 + y2 + z2);\n  let dx;\n  let dy;\n  let dz; // transpose the vector to avoid divide-by-zero error\n\n  if (x2 > y2 && x2 > z2) {\n    dx = 0;\n    dy = 1;\n    dz = 2;\n  } else if (y2 > z2) {\n    dx = 1;\n    dy = 2;\n    dz = 0;\n  } else {\n    dx = 2;\n    dy = 0;\n    dz = 1;\n  }\n\n  const a = x[dx] / r;\n  const b = x[dy] / r;\n  const c = x[dz] / r;\n  const tmp = Math.sqrt(a * a + c * c);\n\n  if (theta !== 0) {\n    const sintheta = Math.sin(theta);\n    const costheta = Math.cos(theta);\n\n    if (y) {\n      y[dx] = (c * costheta - a * b * sintheta) / tmp;\n      y[dy] = sintheta * tmp;\n      y[dz] = (-(a * costheta) - b * c * sintheta) / tmp;\n    }\n\n    if (z) {\n      z[dx] = (-(c * sintheta) - a * b * costheta) / tmp;\n      z[dy] = costheta * tmp;\n      z[dz] = (a * sintheta - b * c * costheta) / tmp;\n    }\n  } else {\n    if (y) {\n      y[dx] = c / tmp;\n      y[dy] = 0;\n      y[dz] = -a / tmp;\n    }\n\n    if (z) {\n      z[dx] = -a * b / tmp;\n      z[dy] = tmp;\n      z[dz] = -b * c / tmp;\n    }\n  }\n}\nexport function projectVector(a, b, projection) {\n  const bSquared = dot(b, b);\n\n  if (bSquared === 0) {\n    projection[0] = 0;\n    projection[1] = 0;\n    projection[2] = 0;\n    return false;\n  }\n\n  const scale = dot(a, b) / bSquared;\n\n  for (let i = 0; i < 3; i++) {\n    projection[i] = b[i];\n  }\n\n  multiplyScalar(projection, scale);\n  return true;\n}\nexport function dot2D(x, y) {\n  return x[0] * y[0] + x[1] * y[1];\n}\nexport function projectVector2D(a, b, projection) {\n  const bSquared = dot2D(b, b);\n\n  if (bSquared === 0) {\n    projection[0] = 0;\n    projection[1] = 0;\n    return false;\n  }\n\n  const scale = dot2D(a, b) / bSquared;\n\n  for (let i = 0; i < 2; i++) {\n    projection[i] = b[i];\n  }\n\n  multiplyScalar2D(projection, scale);\n  return true;\n}\nexport function distance2BetweenPoints(x, y) {\n  return (x[0] - y[0]) * (x[0] - y[0]) + (x[1] - y[1]) * (x[1] - y[1]) + (x[2] - y[2]) * (x[2] - y[2]);\n}\nexport function angleBetweenVectors(v1, v2) {\n  const crossVect = [0, 0, 0];\n  cross(v1, v2, crossVect);\n  return Math.atan2(norm(crossVect), dot(v1, v2));\n}\nexport function signedAngleBetweenVectors(v1, v2, vN) {\n  const crossVect = [0, 0, 0];\n  cross(v1, v2, crossVect);\n  const angle = Math.atan2(norm(crossVect), dot(v1, v2));\n  return dot(crossVect, vN) >= 0 ? angle : -angle;\n}\nexport function gaussianAmplitude(mean, variance, position) {\n  const distanceFromMean = Math.abs(mean - position);\n  return 1 / Math.sqrt(2 * Math.PI * variance) * Math.exp(-(distanceFromMean ** 2) / (2 * variance));\n}\nexport function gaussianWeight(mean, variance, position) {\n  const distanceFromMean = Math.abs(mean - position);\n  return Math.exp(-(distanceFromMean ** 2) / (2 * variance));\n}\nexport function outer2D(x, y, out_2x2) {\n  out_2x2[0] = x[0] * y[0];\n  out_2x2[1] = x[0] * y[1];\n  out_2x2[2] = x[1] * y[0];\n  out_2x2[3] = x[1] * y[1];\n}\nexport function norm2D(x2D) {\n  return Math.sqrt(x2D[0] * x2D[0] + x2D[1] * x2D[1]);\n}\nexport function normalize2D(x) {\n  const den = norm2D(x);\n\n  if (den !== 0.0) {\n    x[0] /= den;\n    x[1] /= den;\n  }\n\n  return den;\n}\nexport function rowsToMat4(row0, row1, row2, row3, mat) {\n  for (let i = 0; i < 4; i++) {\n    mat[i] = row0[i];\n    mat[4 + i] = row1[i];\n    mat[8 + i] = row2[i];\n    mat[12 + i] = row3[i];\n  }\n\n  return mat;\n}\nexport function columnsToMat4(column0, column1, column2, column3, mat) {\n  for (let i = 0; i < 4; i++) {\n    mat[4 * i] = column0[i];\n    mat[4 * i + 1] = column1[i];\n    mat[4 * i + 2] = column2[i];\n    mat[4 * i + 3] = column3[i];\n  }\n\n  return mat;\n}\nexport function rowsToMat3(row0, row1, row2, mat) {\n  for (let i = 0; i < 3; i++) {\n    mat[i] = row0[i];\n    mat[3 + i] = row1[i];\n    mat[6 + i] = row2[i];\n  }\n\n  return mat;\n}\nexport function columnsToMat3(column0, column1, column2, mat) {\n  for (let i = 0; i < 3; i++) {\n    mat[3 * i] = column0[i];\n    mat[3 * i + 1] = column1[i];\n    mat[3 * i + 2] = column2[i];\n  }\n\n  return mat;\n}\nexport function determinant2x2() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  if (args.length === 2) {\n    return args[0][0] * args[1][1] - args[1][0] * args[0][1];\n  }\n\n  if (args.length === 4) {\n    return args[0] * args[3] - args[1] * args[2];\n  }\n\n  return Number.NaN;\n}\nexport function LUFactor3x3(mat_3x3, index_3) {\n  let maxI;\n  let tmp;\n  let largest;\n  const scale = [0, 0, 0]; // Loop over rows to get implicit scaling information\n\n  for (let i = 0; i < 3; i++) {\n    largest = Math.abs(mat_3x3[i * 3]);\n\n    if ((tmp = Math.abs(mat_3x3[i * 3 + 1])) > largest) {\n      largest = tmp;\n    }\n\n    if ((tmp = Math.abs(mat_3x3[i * 3 + 2])) > largest) {\n      largest = tmp;\n    }\n\n    scale[i] = 1 / largest;\n  } // Loop over all columns using Crout's method\n  // first column\n\n\n  largest = scale[0] * Math.abs(mat_3x3[0]);\n  maxI = 0;\n\n  if ((tmp = scale[1] * Math.abs(mat_3x3[3])) >= largest) {\n    largest = tmp;\n    maxI = 1;\n  }\n\n  if ((tmp = scale[2] * Math.abs(mat_3x3[6])) >= largest) {\n    maxI = 2;\n  }\n\n  if (maxI !== 0) {\n    swapRowsMatrix_nxn(mat_3x3, 3, maxI, 0);\n    scale[maxI] = scale[0];\n  }\n\n  index_3[0] = maxI;\n  mat_3x3[3] /= mat_3x3[0];\n  mat_3x3[6] /= mat_3x3[0]; // second column\n\n  mat_3x3[4] -= mat_3x3[3] * mat_3x3[1];\n  mat_3x3[7] -= mat_3x3[6] * mat_3x3[1];\n  largest = scale[1] * Math.abs(mat_3x3[4]);\n  maxI = 1;\n\n  if ((tmp = scale[2] * Math.abs(mat_3x3[7])) >= largest) {\n    maxI = 2;\n    swapRowsMatrix_nxn(mat_3x3, 3, 1, 2);\n    scale[2] = scale[1];\n  }\n\n  index_3[1] = maxI;\n  mat_3x3[7] /= mat_3x3[4]; // third column\n\n  mat_3x3[5] -= mat_3x3[3] * mat_3x3[2];\n  mat_3x3[8] -= mat_3x3[6] * mat_3x3[2] + mat_3x3[7] * mat_3x3[5];\n  index_3[2] = 2;\n}\nexport function LUSolve3x3(mat_3x3, index_3, x_3) {\n  // forward substitution\n  let sum = x_3[index_3[0]];\n  x_3[index_3[0]] = x_3[0];\n  x_3[0] = sum;\n  sum = x_3[index_3[1]];\n  x_3[index_3[1]] = x_3[1];\n  x_3[1] = sum - mat_3x3[3] * x_3[0];\n  sum = x_3[index_3[2]];\n  x_3[index_3[2]] = x_3[2];\n  x_3[2] = sum - mat_3x3[6] * x_3[0] - mat_3x3[7] * x_3[1]; // back substitution\n\n  x_3[2] /= mat_3x3[8];\n  x_3[1] = (x_3[1] - mat_3x3[5] * x_3[2]) / mat_3x3[4];\n  x_3[0] = (x_3[0] - mat_3x3[1] * x_3[1] - mat_3x3[2] * x_3[2]) / mat_3x3[0];\n}\nexport function linearSolve3x3(mat_3x3, x_3, y_3) {\n  const a1 = mat_3x3[0];\n  const b1 = mat_3x3[1];\n  const c1 = mat_3x3[2];\n  const a2 = mat_3x3[3];\n  const b2 = mat_3x3[4];\n  const c2 = mat_3x3[5];\n  const a3 = mat_3x3[6];\n  const b3 = mat_3x3[7];\n  const c3 = mat_3x3[8]; // Compute the adjoint\n\n  const d1 = +determinant2x2(b2, b3, c2, c3);\n  const d2 = -determinant2x2(a2, a3, c2, c3);\n  const d3 = +determinant2x2(a2, a3, b2, b3);\n  const e1 = -determinant2x2(b1, b3, c1, c3);\n  const e2 = +determinant2x2(a1, a3, c1, c3);\n  const e3 = -determinant2x2(a1, a3, b1, b3);\n  const f1 = +determinant2x2(b1, b2, c1, c2);\n  const f2 = -determinant2x2(a1, a2, c1, c2);\n  const f3 = +determinant2x2(a1, a2, b1, b2); // Compute the determinant\n\n  const det = a1 * d1 + b1 * d2 + c1 * d3; // Multiply by the adjoint\n\n  const v1 = d1 * x_3[0] + e1 * x_3[1] + f1 * x_3[2];\n  const v2 = d2 * x_3[0] + e2 * x_3[1] + f2 * x_3[2];\n  const v3 = d3 * x_3[0] + e3 * x_3[1] + f3 * x_3[2]; // Divide by the determinant\n\n  y_3[0] = v1 / det;\n  y_3[1] = v2 / det;\n  y_3[2] = v3 / det;\n}\nexport function multiply3x3_vect3(mat_3x3, in_3, out_3) {\n  const x = mat_3x3[0] * in_3[0] + mat_3x3[1] * in_3[1] + mat_3x3[2] * in_3[2];\n  const y = mat_3x3[3] * in_3[0] + mat_3x3[4] * in_3[1] + mat_3x3[5] * in_3[2];\n  const z = mat_3x3[6] * in_3[0] + mat_3x3[7] * in_3[1] + mat_3x3[8] * in_3[2];\n  out_3[0] = x;\n  out_3[1] = y;\n  out_3[2] = z;\n}\nexport function multiply3x3_mat3(a_3x3, b_3x3, out_3x3) {\n  const copyA = [...a_3x3];\n  const copyB = [...b_3x3];\n\n  for (let i = 0; i < 3; i++) {\n    out_3x3[i] = copyA[0] * copyB[i] + copyA[1] * copyB[i + 3] + copyA[2] * copyB[i + 6];\n    out_3x3[i + 3] = copyA[3] * copyB[i] + copyA[4] * copyB[i + 3] + copyA[5] * copyB[i + 6];\n    out_3x3[i + 6] = copyA[6] * copyB[i] + copyA[7] * copyB[i + 3] + copyA[8] * copyB[i + 6];\n  }\n}\nexport function multiplyMatrix(a, b, rowA, colA, rowB, colB, out_rowXcol) {\n  // we need colA == rowB\n  if (colA !== rowB) {\n    vtkErrorMacro('Number of columns of A must match number of rows of B.');\n  } // If a or b is used to store the result, copying them is required\n\n\n  const copyA = [...a];\n  const copyB = [...b]; // output matrix is rowA*colB\n  // output row\n\n  for (let i = 0; i < rowA; i++) {\n    // output col\n    for (let j = 0; j < colB; j++) {\n      out_rowXcol[i * colB + j] = 0; // sum for this point\n\n      for (let k = 0; k < colA; k++) {\n        out_rowXcol[i * colB + j] += copyA[i * colA + k] * copyB[j + colB * k];\n      }\n    }\n  }\n}\nexport function transpose3x3(in_3x3, outT_3x3) {\n  let tmp; // off-diagonal elements\n\n  tmp = in_3x3[3];\n  outT_3x3[3] = in_3x3[1];\n  outT_3x3[1] = tmp;\n  tmp = in_3x3[6];\n  outT_3x3[6] = in_3x3[2];\n  outT_3x3[2] = tmp;\n  tmp = in_3x3[7];\n  outT_3x3[7] = in_3x3[5];\n  outT_3x3[5] = tmp; // on-diagonal elements\n\n  outT_3x3[0] = in_3x3[0];\n  outT_3x3[4] = in_3x3[4];\n  outT_3x3[8] = in_3x3[8];\n}\nexport function invert3x3(in_3x3, outI_3x3) {\n  const a1 = in_3x3[0];\n  const b1 = in_3x3[1];\n  const c1 = in_3x3[2];\n  const a2 = in_3x3[3];\n  const b2 = in_3x3[4];\n  const c2 = in_3x3[5];\n  const a3 = in_3x3[6];\n  const b3 = in_3x3[7];\n  const c3 = in_3x3[8]; // Compute the adjoint\n\n  const d1 = +determinant2x2(b2, b3, c2, c3);\n  const d2 = -determinant2x2(a2, a3, c2, c3);\n  const d3 = +determinant2x2(a2, a3, b2, b3);\n  const e1 = -determinant2x2(b1, b3, c1, c3);\n  const e2 = +determinant2x2(a1, a3, c1, c3);\n  const e3 = -determinant2x2(a1, a3, b1, b3);\n  const f1 = +determinant2x2(b1, b2, c1, c2);\n  const f2 = -determinant2x2(a1, a2, c1, c2);\n  const f3 = +determinant2x2(a1, a2, b1, b2); // Divide by the determinant\n\n  const det = a1 * d1 + b1 * d2 + c1 * d3;\n\n  if (det === 0) {\n    vtkWarningMacro('Matrix has 0 determinant');\n  }\n\n  outI_3x3[0] = d1 / det;\n  outI_3x3[3] = d2 / det;\n  outI_3x3[6] = d3 / det;\n  outI_3x3[1] = e1 / det;\n  outI_3x3[4] = e2 / det;\n  outI_3x3[7] = e3 / det;\n  outI_3x3[2] = f1 / det;\n  outI_3x3[5] = f2 / det;\n  outI_3x3[8] = f3 / det;\n}\nexport function determinant3x3(mat_3x3) {\n  return mat_3x3[0] * mat_3x3[4] * mat_3x3[8] + mat_3x3[3] * mat_3x3[7] * mat_3x3[2] + mat_3x3[6] * mat_3x3[1] * mat_3x3[5] - mat_3x3[0] * mat_3x3[7] * mat_3x3[5] - mat_3x3[3] * mat_3x3[1] * mat_3x3[8] - mat_3x3[6] * mat_3x3[4] * mat_3x3[2];\n}\nexport function identity3x3(mat_3x3) {\n  for (let i = 0; i < 3; i++) {\n    /* eslint-disable-next-line no-multi-assign */\n    mat_3x3[i * 3] = mat_3x3[i * 3 + 1] = mat_3x3[i * 3 + 2] = 0;\n    mat_3x3[i * 3 + i] = 1;\n  }\n}\nexport function identity(n, mat) {\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      mat[i * n + j] = 0;\n    }\n\n    mat[i * n + i] = 1;\n  }\n\n  return mat;\n}\nexport function quaternionToMatrix3x3(quat_4, mat_3x3) {\n  const ww = quat_4[0] * quat_4[0];\n  const wx = quat_4[0] * quat_4[1];\n  const wy = quat_4[0] * quat_4[2];\n  const wz = quat_4[0] * quat_4[3];\n  const xx = quat_4[1] * quat_4[1];\n  const yy = quat_4[2] * quat_4[2];\n  const zz = quat_4[3] * quat_4[3];\n  const xy = quat_4[1] * quat_4[2];\n  const xz = quat_4[1] * quat_4[3];\n  const yz = quat_4[2] * quat_4[3];\n  const rr = xx + yy + zz; // normalization factor, just in case quaternion was not normalized\n\n  let f = 1 / (ww + rr);\n  const s = (ww - rr) * f;\n  f *= 2;\n  mat_3x3[0] = xx * f + s;\n  mat_3x3[3] = (xy + wz) * f;\n  mat_3x3[6] = (xz - wy) * f;\n  mat_3x3[1] = (xy - wz) * f;\n  mat_3x3[4] = yy * f + s;\n  mat_3x3[7] = (yz + wx) * f;\n  mat_3x3[2] = (xz + wy) * f;\n  mat_3x3[5] = (yz - wx) * f;\n  mat_3x3[8] = zz * f + s;\n}\n/**\n * Returns true if elements of both arrays are equals.\n * @param {Array} a an array of numbers (vector, point, matrix...)\n * @param {Array} b an array of numbers (vector, point, matrix...)\n * @param {Number} eps tolerance\n */\n\nexport function areEquals(a, b) {\n  let eps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1e-6;\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  function isEqual(element, index) {\n    return Math.abs(element - b[index]) <= eps;\n  }\n\n  return a.every(isEqual);\n}\nexport const areMatricesEqual = areEquals;\nexport function roundNumber(num) {\n  let digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  if (!`${num}`.includes('e')) {\n    return +`${Math.round(`${num}e+${digits}`)}e-${digits}`;\n  }\n\n  const arr = `${num}`.split('e');\n  let sig = '';\n\n  if (+arr[1] + digits > 0) {\n    sig = '+';\n  }\n\n  return +`${Math.round(`${+arr[0]}e${sig}${+arr[1] + digits}`)}e-${digits}`;\n}\nexport function roundVector(vector) {\n  let out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n  let digits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  out[0] = roundNumber(vector[0], digits);\n  out[1] = roundNumber(vector[1], digits);\n  out[2] = roundNumber(vector[2], digits);\n  return out;\n}\nexport function jacobiN(a, n, w, v) {\n  let i;\n  let j;\n  let k;\n  let iq;\n  let ip;\n  let numPos;\n  let tresh;\n  let theta;\n  let t;\n  let tau;\n  let sm;\n  let s;\n  let h;\n  let g;\n  let c;\n  let tmp;\n  const b = createArray(n);\n  const z = createArray(n);\n\n  const vtkROTATE = (aa, ii, jj) => {\n    g = aa[ii];\n    h = aa[jj];\n    aa[ii] = g - s * (h + g * tau);\n    aa[jj] = h + s * (g - h * tau);\n  }; // initialize\n\n\n  identity(n, v);\n\n  for (ip = 0; ip < n; ip++) {\n    b[ip] = w[ip] = a[ip + ip * n];\n    z[ip] = 0.0;\n  } // begin rotation sequence\n\n\n  for (i = 0; i < VTK_MAX_ROTATIONS; i++) {\n    sm = 0.0;\n\n    for (ip = 0; ip < n - 1; ip++) {\n      for (iq = ip + 1; iq < n; iq++) {\n        sm += Math.abs(a[ip * n + iq]);\n      }\n    }\n\n    if (sm === 0.0) {\n      break;\n    } // first 3 sweeps\n\n\n    if (i < 3) {\n      tresh = 0.2 * sm / (n * n);\n    } else {\n      tresh = 0.0;\n    }\n\n    for (ip = 0; ip < n - 1; ip++) {\n      for (iq = ip + 1; iq < n; iq++) {\n        g = 100.0 * Math.abs(a[ip * n + iq]); // after 4 sweeps\n\n        if (i > 3 && Math.abs(w[ip]) + g === Math.abs(w[ip]) && Math.abs(w[iq]) + g === Math.abs(w[iq])) {\n          a[ip * n + iq] = 0.0;\n        } else if (Math.abs(a[ip * n + iq]) > tresh) {\n          h = w[iq] - w[ip];\n\n          if (Math.abs(h) + g === Math.abs(h)) {\n            t = a[ip * n + iq] / h;\n          } else {\n            theta = 0.5 * h / a[ip * n + iq];\n            t = 1.0 / (Math.abs(theta) + Math.sqrt(1.0 + theta * theta));\n\n            if (theta < 0.0) {\n              t = -t;\n            }\n          }\n\n          c = 1.0 / Math.sqrt(1 + t * t);\n          s = t * c;\n          tau = s / (1.0 + c);\n          h = t * a[ip * n + iq];\n          z[ip] -= h;\n          z[iq] += h;\n          w[ip] -= h;\n          w[iq] += h;\n          a[ip * n + iq] = 0.0; // ip already shifted left by 1 unit\n\n          for (j = 0; j <= ip - 1; j++) {\n            vtkROTATE(a, j * n + ip, j * n + iq);\n          } // ip and iq already shifted left by 1 unit\n\n\n          for (j = ip + 1; j <= iq - 1; j++) {\n            vtkROTATE(a, ip * n + j, j * n + iq);\n          } // iq already shifted left by 1 unit\n\n\n          for (j = iq + 1; j < n; j++) {\n            vtkROTATE(a, ip * n + j, iq * n + j);\n          }\n\n          for (j = 0; j < n; j++) {\n            vtkROTATE(v, j * n + ip, j * n + iq);\n          }\n        }\n      }\n    }\n\n    for (ip = 0; ip < n; ip++) {\n      b[ip] += z[ip];\n      w[ip] = b[ip];\n      z[ip] = 0.0;\n    }\n  } // this is NEVER called\n\n\n  if (i >= VTK_MAX_ROTATIONS) {\n    vtkWarningMacro('vtkMath::Jacobi: Error extracting eigenfunctions');\n    return 0;\n  } // sort eigenfunctions: these changes do not affect accuracy\n\n\n  for (j = 0; j < n - 1; j++) {\n    // boundary incorrect\n    k = j;\n    tmp = w[k];\n\n    for (i = j + 1; i < n; i++) {\n      // boundary incorrect, shifted already\n      if (w[i] >= tmp || Math.abs(w[i] - tmp) < VTK_SMALL_NUMBER) {\n        // why exchange if same?\n        k = i;\n        tmp = w[k];\n      }\n    }\n\n    if (k !== j) {\n      w[k] = w[j];\n      w[j] = tmp;\n      swapColumnsMatrix_nxn(v, n, j, k);\n    }\n  } // ensure eigenvector consistency (i.e., Jacobi can compute vectors that\n  // are negative of one another (.707,.707,0) and (-.707,-.707,0). This can\n  // reek havoc in hyperstreamline/other stuff. We will select the most\n  // positive eigenvector.\n\n\n  const ceil_half_n = (n >> 1) + (n & 1);\n\n  for (numPos = 0, i = 0; i < n * n; i++) {\n    if (v[i] >= 0.0) {\n      numPos++;\n    }\n  } //    if ( numPos < ceil(double(n)/double(2.0)) )\n\n\n  if (numPos < ceil_half_n) {\n    for (i = 0; i < n; i++) {\n      v[i * n + j] *= -1.0;\n    }\n  }\n\n  return 1;\n}\nexport function matrix3x3ToQuaternion(mat_3x3, quat_4) {\n  const tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; // on-diagonal elements\n\n  tmp[0] = mat_3x3[0] + mat_3x3[4] + mat_3x3[8];\n  tmp[5] = mat_3x3[0] - mat_3x3[4] - mat_3x3[8];\n  tmp[10] = -mat_3x3[0] + mat_3x3[4] - mat_3x3[8];\n  tmp[15] = -mat_3x3[0] - mat_3x3[4] + mat_3x3[8]; // off-diagonal elements\n\n  tmp[1] = tmp[4] = mat_3x3[7] - mat_3x3[5];\n  tmp[2] = tmp[8] = mat_3x3[2] - mat_3x3[6];\n  tmp[3] = tmp[12] = mat_3x3[3] - mat_3x3[1];\n  tmp[6] = tmp[9] = mat_3x3[3] + mat_3x3[1];\n  tmp[7] = tmp[13] = mat_3x3[2] + mat_3x3[6];\n  tmp[11] = tmp[14] = mat_3x3[7] + mat_3x3[5];\n  const eigenvectors = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  const eigenvalues = [0, 0, 0, 0]; // convert into format that JacobiN can use,\n  // then use Jacobi to find eigenvalues and eigenvectors\n  // tmp is copied because jacobiN may modify it\n\n  const NTemp = [...tmp];\n  jacobiN(NTemp, 4, eigenvalues, eigenvectors); // the first eigenvector is the one we want\n\n  quat_4[0] = eigenvectors[0];\n  quat_4[1] = eigenvectors[4];\n  quat_4[2] = eigenvectors[8];\n  quat_4[3] = eigenvectors[12];\n}\nexport function multiplyQuaternion(quat_1, quat_2, quat_out) {\n  const ww = quat_1[0] * quat_2[0];\n  const wx = quat_1[0] * quat_2[1];\n  const wy = quat_1[0] * quat_2[2];\n  const wz = quat_1[0] * quat_2[3];\n  const xw = quat_1[1] * quat_2[0];\n  const xx = quat_1[1] * quat_2[1];\n  const xy = quat_1[1] * quat_2[2];\n  const xz = quat_1[1] * quat_2[3];\n  const yw = quat_1[2] * quat_2[0];\n  const yx = quat_1[2] * quat_2[1];\n  const yy = quat_1[2] * quat_2[2];\n  const yz = quat_1[2] * quat_2[3];\n  const zw = quat_1[3] * quat_2[0];\n  const zx = quat_1[3] * quat_2[1];\n  const zy = quat_1[3] * quat_2[2];\n  const zz = quat_1[3] * quat_2[3];\n  quat_out[0] = ww - xx - yy - zz;\n  quat_out[1] = wx + xw + yz - zy;\n  quat_out[2] = wy - xz + yw + zx;\n  quat_out[3] = wz + xy - yx + zw;\n}\nexport function orthogonalize3x3(a_3x3, out_3x3) {\n  // copy the matrix\n  for (let i = 0; i < 9; i++) {\n    out_3x3[i] = a_3x3[i];\n  } // Pivot the matrix to improve accuracy\n\n\n  const scale = createArray(3);\n  const index = createArray(3);\n  let largest; // Loop over rows to get implicit scaling information\n\n  for (let i = 0; i < 3; i++) {\n    const x1 = Math.abs(out_3x3[i * 3]);\n    const x2 = Math.abs(out_3x3[i * 3 + 1]);\n    const x3 = Math.abs(out_3x3[i * 3 + 2]);\n    largest = x2 > x1 ? x2 : x1;\n    largest = x3 > largest ? x3 : largest;\n    scale[i] = 1;\n\n    if (largest !== 0) {\n      scale[i] /= largest;\n    }\n  } // first column\n\n\n  const x1 = Math.abs(out_3x3[0]) * scale[0];\n  const x2 = Math.abs(out_3x3[3]) * scale[1];\n  const x3 = Math.abs(out_3x3[6]) * scale[2];\n  index[0] = 0;\n  largest = x1;\n\n  if (x2 >= largest) {\n    largest = x2;\n    index[0] = 1;\n  }\n\n  if (x3 >= largest) {\n    index[0] = 2;\n  }\n\n  if (index[0] !== 0) {\n    // swap vectors\n    swapColumnsMatrix_nxn(out_3x3, 3, index[0], 0);\n    scale[index[0]] = scale[0];\n  } // second column\n\n\n  const y2 = Math.abs(out_3x3[4]) * scale[1];\n  const y3 = Math.abs(out_3x3[7]) * scale[2];\n  index[1] = 1;\n  largest = y2;\n\n  if (y3 >= largest) {\n    index[1] = 2; // swap vectors\n\n    swapColumnsMatrix_nxn(out_3x3, 3, 1, 2);\n  } // third column\n\n\n  index[2] = 2; // A quaternion can only describe a pure rotation, not\n  // a rotation with a flip, therefore the flip must be\n  // removed before the matrix is converted to a quaternion.\n\n  let flip = 0;\n\n  if (determinant3x3(out_3x3) < 0) {\n    flip = 1;\n\n    for (let i = 0; i < 9; i++) {\n      out_3x3[i] = -out_3x3[i];\n    }\n  } // Do orthogonalization using a quaternion intermediate\n  // (this, essentially, does the orthogonalization via\n  // diagonalization of an appropriately constructed symmetric\n  // 4x4 matrix rather than by doing SVD of the 3x3 matrix)\n\n\n  const quat = createArray(4);\n  matrix3x3ToQuaternion(out_3x3, quat);\n  quaternionToMatrix3x3(quat, out_3x3); // Put the flip back into the orthogonalized matrix.\n\n  if (flip) {\n    for (let i = 0; i < 9; i++) {\n      out_3x3[i] = -out_3x3[i];\n    }\n  } // Undo the pivoting\n\n\n  if (index[1] !== 1) {\n    swapColumnsMatrix_nxn(out_3x3, 3, index[1], 1);\n  }\n\n  if (index[0] !== 0) {\n    swapColumnsMatrix_nxn(out_3x3, 3, index[0], 0);\n  }\n}\nexport function diagonalize3x3(a_3x3, w_3, v_3x3) {\n  let i;\n  let j;\n  let k;\n  let maxI;\n  let tmp;\n  let maxVal; // a is copied because jacobiN may modify it\n\n  const copyA = [...a_3x3]; // diagonalize using Jacobi\n\n  jacobiN(copyA, 3, w_3, v_3x3); // if all the eigenvalues are the same, return identity matrix\n\n  if (w_3[0] === w_3[1] && w_3[0] === w_3[2]) {\n    identity3x3(v_3x3);\n    return;\n  } // transpose temporarily, it makes it easier to sort the eigenvectors\n\n\n  transpose3x3(v_3x3, v_3x3); // if two eigenvalues are the same, re-orthogonalize to optimally line\n  // up the eigenvectors with the x, y, and z axes\n\n  for (i = 0; i < 3; i++) {\n    // two eigenvalues are the same\n    if (w_3[(i + 1) % 3] === w_3[(i + 2) % 3]) {\n      // find maximum element of the independent eigenvector\n      maxVal = Math.abs(v_3x3[i * 3]);\n      maxI = 0;\n\n      for (j = 1; j < 3; j++) {\n        if (maxVal < (tmp = Math.abs(v_3x3[i * 3 + j]))) {\n          maxVal = tmp;\n          maxI = j;\n        }\n      } // swap the eigenvector into its proper position\n\n\n      if (maxI !== i) {\n        tmp = w_3[maxI];\n        w_3[maxI] = w_3[i];\n        w_3[i] = tmp;\n        swapRowsMatrix_nxn(v_3x3, 3, i, maxI);\n      } // maximum element of eigenvector should be positive\n\n\n      if (v_3x3[maxI * 3 + maxI] < 0) {\n        v_3x3[maxI * 3] = -v_3x3[maxI * 3];\n        v_3x3[maxI * 3 + 1] = -v_3x3[maxI * 3 + 1];\n        v_3x3[maxI * 3 + 2] = -v_3x3[maxI * 3 + 2];\n      } // re-orthogonalize the other two eigenvectors\n\n\n      j = (maxI + 1) % 3;\n      k = (maxI + 2) % 3;\n      v_3x3[j * 3] = 0.0;\n      v_3x3[j * 3 + 1] = 0.0;\n      v_3x3[j * 3 + 2] = 0.0;\n      v_3x3[j * 3 + j] = 1.0;\n      const vectTmp1 = cross([v_3x3[maxI * 3], v_3x3[maxI * 3 + 1], v_3x3[maxI * 3 + 2]], [v_3x3[j * 3], v_3x3[j * 3 + 1], v_3x3[j * 3 + 2]], []);\n      normalize(vectTmp1);\n      const vectTmp2 = cross(vectTmp1, [v_3x3[maxI * 3], v_3x3[maxI * 3 + 1], v_3x3[maxI * 3 + 2]], []);\n\n      for (let t = 0; t < 3; t++) {\n        v_3x3[k * 3 + t] = vectTmp1[t];\n        v_3x3[j * 3 + t] = vectTmp2[t];\n      } // transpose vectors back to columns\n\n\n      transpose3x3(v_3x3, v_3x3);\n      return;\n    }\n  } // the three eigenvalues are different, just sort the eigenvectors\n  // to align them with the x, y, and z axes\n  // find the vector with the largest x element, make that vector\n  // the first vector\n\n\n  maxVal = Math.abs(v_3x3[0]);\n  maxI = 0;\n\n  for (i = 1; i < 3; i++) {\n    if (maxVal < (tmp = Math.abs(v_3x3[i * 3]))) {\n      maxVal = tmp;\n      maxI = i;\n    }\n  } // swap eigenvalue and eigenvector\n\n\n  if (maxI !== 0) {\n    const eigenValTmp = w_3[maxI];\n    w_3[maxI] = w_3[0];\n    w_3[0] = eigenValTmp;\n    swapRowsMatrix_nxn(v_3x3, 3, maxI, 0);\n  } // do the same for the y element\n\n\n  if (Math.abs(v_3x3[4]) < Math.abs(v_3x3[7])) {\n    const eigenValTmp = w_3[2];\n    w_3[2] = w_3[1];\n    w_3[1] = eigenValTmp;\n    swapRowsMatrix_nxn(v_3x3, 3, 1, 2);\n  } // ensure that the sign of the eigenvectors is correct\n\n\n  for (i = 0; i < 2; i++) {\n    if (v_3x3[i * 3 + i] < 0) {\n      v_3x3[i * 3] = -v_3x3[i * 3];\n      v_3x3[i * 3 + 1] = -v_3x3[i * 3 + 1];\n      v_3x3[i * 3 + 2] = -v_3x3[i * 3 + 2];\n    }\n  } // set sign of final eigenvector to ensure that determinant is positive\n\n\n  if (determinant3x3(v_3x3) < 0) {\n    v_3x3[6] = -v_3x3[6];\n    v_3x3[7] = -v_3x3[7];\n    v_3x3[8] = -v_3x3[8];\n  } // transpose the eigenvectors back again\n\n\n  transpose3x3(v_3x3, v_3x3);\n}\nexport function singularValueDecomposition3x3(a_3x3, u_3x3, w_3, vT_3x3) {\n  let i; // copy so that A can be used for U or VT without risk\n\n  const B = [...a_3x3]; // temporarily flip if determinant is negative\n\n  const d = determinant3x3(B);\n\n  if (d < 0) {\n    for (i = 0; i < 9; i++) {\n      B[i] = -B[i];\n    }\n  } // orthogonalize, diagonalize, etc.\n\n\n  orthogonalize3x3(B, u_3x3);\n  transpose3x3(B, B);\n  multiply3x3_mat3(B, u_3x3, vT_3x3);\n  diagonalize3x3(vT_3x3, w_3, vT_3x3);\n  multiply3x3_mat3(u_3x3, vT_3x3, u_3x3);\n  transpose3x3(vT_3x3, vT_3x3); // re-create the flip\n\n  if (d < 0) {\n    w_3[0] = -w_3[0];\n    w_3[1] = -w_3[1];\n    w_3[2] = -w_3[2];\n  }\n}\n/**\n * Factor linear equations Ax = b using LU decomposition A = LU. Output factorization LU is in matrix A.\n * @param {Matrix} A square matrix\n * @param {Number} index integer array of pivot indices index[0->n-1]\n * @param {Number} size matrix size\n */\n\nexport function luFactorLinearSystem(A, index, size) {\n  let i;\n  let j;\n  let k;\n  let largest;\n  let maxI = 0;\n  let sum;\n  let temp1;\n  let temp2;\n  const scale = createArray(size); //\n  // Loop over rows to get implicit scaling information\n  //\n\n  for (i = 0; i < size; i++) {\n    for (largest = 0.0, j = 0; j < size; j++) {\n      if ((temp2 = Math.abs(A[i * size + j])) > largest) {\n        largest = temp2;\n      }\n    }\n\n    if (largest === 0.0) {\n      vtkWarningMacro('Unable to factor linear system');\n      return 0;\n    }\n\n    scale[i] = 1.0 / largest;\n  } //\n  // Loop over all columns using Crout's method\n  //\n\n\n  for (j = 0; j < size; j++) {\n    for (i = 0; i < j; i++) {\n      sum = A[i * size + j];\n\n      for (k = 0; k < i; k++) {\n        sum -= A[i * size + k] * A[k * size + j];\n      }\n\n      A[i * size + j] = sum;\n    } //\n    // Begin search for largest pivot element\n    //\n\n\n    for (largest = 0.0, i = j; i < size; i++) {\n      sum = A[i * size + j];\n\n      for (k = 0; k < j; k++) {\n        sum -= A[i * size + k] * A[k * size + j];\n      }\n\n      A[i * size + j] = sum;\n\n      if ((temp1 = scale[i] * Math.abs(sum)) >= largest) {\n        largest = temp1;\n        maxI = i;\n      }\n    } //\n    // Check for row interchange\n    //\n\n\n    if (j !== maxI) {\n      for (k = 0; k < size; k++) {\n        temp1 = A[maxI * size + k];\n        A[maxI * size + k] = A[j * size + k];\n        A[j * size + k] = temp1;\n      }\n\n      scale[maxI] = scale[j];\n    } //\n    // Divide by pivot element and perform elimination\n    //\n\n\n    index[j] = maxI;\n\n    if (Math.abs(A[j * size + j]) <= VTK_SMALL_NUMBER) {\n      vtkWarningMacro('Unable to factor linear system');\n      return 0;\n    }\n\n    if (j !== size - 1) {\n      temp1 = 1.0 / A[j * size + j];\n\n      for (i = j + 1; i < size; i++) {\n        A[i * size + j] *= temp1;\n      }\n    }\n  }\n\n  return 1;\n}\nexport function luSolveLinearSystem(A, index, x, size) {\n  let i;\n  let j;\n  let ii;\n  let idx;\n  let sum; //\n  // Proceed with forward and backsubstitution for L and U\n  // matrices.  First, forward substitution.\n  //\n\n  for (ii = -1, i = 0; i < size; i++) {\n    idx = index[i];\n    sum = x[idx];\n    x[idx] = x[i];\n\n    if (ii >= 0) {\n      for (j = ii; j <= i - 1; j++) {\n        sum -= A[i * size + j] * x[j];\n      }\n    } else if (sum !== 0.0) {\n      ii = i;\n    }\n\n    x[i] = sum;\n  } //\n  // Now, back substitution\n  //\n\n\n  for (i = size - 1; i >= 0; i--) {\n    sum = x[i];\n\n    for (j = i + 1; j < size; j++) {\n      sum -= A[i * size + j] * x[j];\n    }\n\n    x[i] = sum / A[i * size + i];\n  }\n}\nexport function solveLinearSystem(A, x, size) {\n  // if we solving something simple, just solve it\n  if (size === 2) {\n    const y = createArray(2);\n    const det = determinant2x2(A[0], A[1], A[2], A[3]);\n\n    if (det === 0.0) {\n      // Unable to solve linear system\n      return 0;\n    }\n\n    y[0] = (A[3] * x[0] - A[1] * x[1]) / det;\n    y[1] = (-(A[2] * x[0]) + A[0] * x[1]) / det;\n    x[0] = y[0];\n    x[1] = y[1];\n    return 1;\n  }\n\n  if (size === 1) {\n    if (A[0] === 0.0) {\n      // Unable to solve linear system\n      return 0;\n    }\n\n    x[0] /= A[0];\n    return 1;\n  } //\n  // System of equations is not trivial, use Crout's method\n  //\n  // Check on allocation of working vectors\n\n\n  const index = createArray(size); // Factor and solve matrix\n\n  if (luFactorLinearSystem(A, index, size) === 0) {\n    return 0;\n  }\n\n  luSolveLinearSystem(A, index, x, size);\n  return 1;\n}\nexport function invertMatrix(A, AI, size) {\n  let index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  let column = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  const tmp1Size = index || createArray(size);\n  const tmp2Size = column || createArray(size); // Factor matrix; then begin solving for inverse one column at a time.\n  // Note: tmp1Size returned value is used later, tmp2Size is just working\n  // memory whose values are not used in LUSolveLinearSystem\n\n  if (luFactorLinearSystem(A, tmp1Size, size, tmp2Size) === 0) {\n    return 0;\n  }\n\n  for (let j = 0; j < size; j++) {\n    for (let i = 0; i < size; i++) {\n      tmp2Size[i] = 0.0;\n    }\n\n    tmp2Size[j] = 1.0;\n    luSolveLinearSystem(A, tmp1Size, tmp2Size, size);\n\n    for (let i = 0; i < size; i++) {\n      AI[i * size + j] = tmp2Size[i];\n    }\n  }\n\n  return 1;\n}\nexport function estimateMatrixCondition(A, size) {\n  let minValue = +Number.MAX_VALUE;\n  let maxValue = -Number.MAX_VALUE; // find the maximum value\n\n  for (let i = 0; i < size; i++) {\n    for (let j = i; j < size; j++) {\n      if (Math.abs(A[i * size + j]) > maxValue) {\n        maxValue = Math.abs(A[i * size + j]);\n      }\n    }\n  } // find the minimum diagonal value\n\n\n  for (let i = 0; i < size; i++) {\n    if (Math.abs(A[i * size + i]) < minValue) {\n      minValue = Math.abs(A[i * size + i]);\n    }\n  }\n\n  if (minValue === 0.0) {\n    return Number.MAX_VALUE;\n  }\n\n  return maxValue / minValue;\n}\nexport function jacobi(a_3x3, w, v) {\n  return jacobiN(a_3x3, 3, w, v);\n}\nexport function solveHomogeneousLeastSquares(numberOfSamples, xt, xOrder, mt) {\n  // check dimensional consistency\n  if (numberOfSamples < xOrder) {\n    vtkWarningMacro('Insufficient number of samples. Underdetermined.');\n    return 0;\n  }\n\n  let i;\n  let j;\n  let k; // set up intermediate variables\n  // Allocate matrix to hold X times transpose of X\n\n  const XXt = createArray(xOrder * xOrder); // size x by x\n  // Allocate the array of eigenvalues and eigenvectors\n\n  const eigenvals = createArray(xOrder);\n  const eigenvecs = createArray(xOrder * xOrder); // Calculate XXt upper half only, due to symmetry\n\n  for (k = 0; k < numberOfSamples; k++) {\n    for (i = 0; i < xOrder; i++) {\n      for (j = i; j < xOrder; j++) {\n        XXt[i * xOrder + j] += xt[k * xOrder + i] * xt[k * xOrder + j];\n      }\n    }\n  } // now fill in the lower half of the XXt matrix\n\n\n  for (i = 0; i < xOrder; i++) {\n    for (j = 0; j < i; j++) {\n      XXt[i * xOrder + j] = XXt[j * xOrder + i];\n    }\n  } // Compute the eigenvectors and eigenvalues\n\n\n  jacobiN(XXt, xOrder, eigenvals, eigenvecs); // Smallest eigenval is at the end of the list (xOrder-1), and solution is\n  // corresponding eigenvec.\n\n  for (i = 0; i < xOrder; i++) {\n    mt[i] = eigenvecs[i * xOrder + xOrder - 1];\n  }\n\n  return 1;\n}\nexport function solveLeastSquares(numberOfSamples, xt, xOrder, yt, yOrder, mt) {\n  let checkHomogeneous = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;\n\n  // check dimensional consistency\n  if (numberOfSamples < xOrder || numberOfSamples < yOrder) {\n    vtkWarningMacro('Insufficient number of samples. Underdetermined.');\n    return 0;\n  }\n\n  const homogenFlags = createArray(yOrder);\n  let allHomogeneous = 1;\n  let hmt;\n  let homogRC = 0;\n  let i;\n  let j;\n  let k;\n  let someHomogeneous = 0; // Ok, first init some flags check and see if all the systems are homogeneous\n\n  if (checkHomogeneous) {\n    // If Y' is zero, it's a homogeneous system and can't be solved via\n    // the pseudoinverse method. Detect this case, warn the user, and\n    // invoke SolveHomogeneousLeastSquares instead. Note that it doesn't\n    // really make much sense for yOrder to be greater than one in this case,\n    // since that's just yOrder occurrences of a 0 vector on the RHS, but\n    // we allow it anyway. N\n    // Initialize homogeneous flags on a per-right-hand-side basis\n    for (j = 0; j < yOrder; j++) {\n      homogenFlags[j] = 1;\n    }\n\n    for (i = 0; i < numberOfSamples; i++) {\n      for (j = 0; j < yOrder; j++) {\n        if (Math.abs(yt[i * yOrder + j]) > VTK_SMALL_NUMBER) {\n          allHomogeneous = 0;\n          homogenFlags[j] = 0;\n        }\n      }\n    } // If we've got one system, and it's homogeneous, do it and bail out quickly.\n\n\n    if (allHomogeneous && yOrder === 1) {\n      vtkWarningMacro('Detected homogeneous system (Y=0), calling SolveHomogeneousLeastSquares()');\n      return solveHomogeneousLeastSquares(numberOfSamples, xt, xOrder, mt);\n    } // Ok, we've got more than one system of equations.\n    // Figure out if we need to calculate the homogeneous equation solution for\n    // any of them.\n\n\n    if (allHomogeneous) {\n      someHomogeneous = 1;\n    } else {\n      for (j = 0; j < yOrder; j++) {\n        if (homogenFlags[j]) {\n          someHomogeneous = 1;\n        }\n      }\n    }\n  } // If necessary, solve the homogeneous problem\n\n\n  if (someHomogeneous) {\n    // hmt is the homogeneous equation version of mt, the general solution.\n    // hmt should be xOrder x yOrder, but since we are solving only the homogeneous part, here it is xOrder x 1\n    hmt = createArray(xOrder); // Ok, solve the homogeneous problem\n\n    homogRC = solveHomogeneousLeastSquares(numberOfSamples, xt, xOrder, hmt);\n  } // set up intermediate variables\n\n\n  const XXt = createArray(xOrder * xOrder); // size x by x\n\n  const XXtI = createArray(xOrder * xOrder); // size x by x\n\n  const XYt = createArray(xOrder * yOrder); // size x by y\n  // first find the pseudoinverse matrix\n\n  for (k = 0; k < numberOfSamples; k++) {\n    for (i = 0; i < xOrder; i++) {\n      // first calculate the XXt matrix, only do the upper half (symmetrical)\n      for (j = i; j < xOrder; j++) {\n        XXt[i * xOrder + j] += xt[k * xOrder + i] * xt[k * xOrder + j];\n      } // now calculate the XYt matrix\n\n\n      for (j = 0; j < yOrder; j++) {\n        XYt[i * yOrder + j] += xt[k * xOrder + i] * yt[k * yOrder + j];\n      }\n    }\n  } // now fill in the lower half of the XXt matrix\n\n\n  for (i = 0; i < xOrder; i++) {\n    for (j = 0; j < i; j++) {\n      XXt[i * xOrder + j] = XXt[j * xOrder + i];\n    }\n  }\n\n  const successFlag = invertMatrix(XXt, XXtI, xOrder); // next get the inverse of XXt\n\n  if (successFlag) {\n    for (i = 0; i < xOrder; i++) {\n      for (j = 0; j < yOrder; j++) {\n        mt[i * yOrder + j] = 0.0;\n\n        for (k = 0; k < xOrder; k++) {\n          mt[i * yOrder + j] += XXtI[i * xOrder + k] * XYt[k * yOrder + j];\n        }\n      }\n    }\n  } // Fix up any of the solutions that correspond to the homogeneous equation\n  // problem.\n\n\n  if (someHomogeneous) {\n    for (j = 0; j < yOrder; j++) {\n      if (homogenFlags[j]) {\n        // Fix this one\n        for (i = 0; i < xOrder; i++) {\n          mt[i * yOrder + j] = hmt[i * yOrder];\n        }\n      }\n    }\n  }\n\n  if (someHomogeneous) {\n    return homogRC && successFlag;\n  }\n\n  return successFlag;\n}\nexport function hex2float(hexStr) {\n  let outFloatArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0.5, 1];\n\n  switch (hexStr.length) {\n    case 3:\n      // abc => #aabbcc\n      outFloatArray[0] = parseInt(hexStr[0], 16) * 17 / 255;\n      outFloatArray[1] = parseInt(hexStr[1], 16) * 17 / 255;\n      outFloatArray[2] = parseInt(hexStr[2], 16) * 17 / 255;\n      return outFloatArray;\n\n    case 4:\n      // #abc => #aabbcc\n      outFloatArray[0] = parseInt(hexStr[1], 16) * 17 / 255;\n      outFloatArray[1] = parseInt(hexStr[2], 16) * 17 / 255;\n      outFloatArray[2] = parseInt(hexStr[3], 16) * 17 / 255;\n      return outFloatArray;\n\n    case 6:\n      // ab01df => #ab01df\n      outFloatArray[0] = parseInt(hexStr.substr(0, 2), 16) / 255;\n      outFloatArray[1] = parseInt(hexStr.substr(2, 2), 16) / 255;\n      outFloatArray[2] = parseInt(hexStr.substr(4, 2), 16) / 255;\n      return outFloatArray;\n\n    case 7:\n      // #ab01df\n      outFloatArray[0] = parseInt(hexStr.substr(1, 2), 16) / 255;\n      outFloatArray[1] = parseInt(hexStr.substr(3, 2), 16) / 255;\n      outFloatArray[2] = parseInt(hexStr.substr(5, 2), 16) / 255;\n      return outFloatArray;\n\n    case 9:\n      // #ab01df00\n      outFloatArray[0] = parseInt(hexStr.substr(1, 2), 16) / 255;\n      outFloatArray[1] = parseInt(hexStr.substr(3, 2), 16) / 255;\n      outFloatArray[2] = parseInt(hexStr.substr(5, 2), 16) / 255;\n      outFloatArray[3] = parseInt(hexStr.substr(7, 2), 16) / 255;\n      return outFloatArray;\n\n    default:\n      return outFloatArray;\n  }\n}\nexport function rgb2hsv(rgb, hsv) {\n  let h;\n  let s;\n  const [r, g, b] = rgb;\n  const onethird = 1.0 / 3.0;\n  const onesixth = 1.0 / 6.0;\n  const twothird = 2.0 / 3.0;\n  let cmax = r;\n  let cmin = r;\n\n  if (g > cmax) {\n    cmax = g;\n  } else if (g < cmin) {\n    cmin = g;\n  }\n\n  if (b > cmax) {\n    cmax = b;\n  } else if (b < cmin) {\n    cmin = b;\n  }\n\n  const v = cmax;\n\n  if (v > 0.0) {\n    s = (cmax - cmin) / cmax;\n  } else {\n    s = 0.0;\n  }\n\n  if (s > 0) {\n    if (r === cmax) {\n      h = onesixth * (g - b) / (cmax - cmin);\n    } else if (g === cmax) {\n      h = onethird + onesixth * (b - r) / (cmax - cmin);\n    } else {\n      h = twothird + onesixth * (r - g) / (cmax - cmin);\n    }\n\n    if (h < 0.0) {\n      h += 1.0;\n    }\n  } else {\n    h = 0.0;\n  } // Set the values back to the array\n\n\n  hsv[0] = h;\n  hsv[1] = s;\n  hsv[2] = v;\n}\nexport function hsv2rgb(hsv, rgb) {\n  const [h, s, v] = hsv;\n  const onethird = 1.0 / 3.0;\n  const onesixth = 1.0 / 6.0;\n  const twothird = 2.0 / 3.0;\n  const fivesixth = 5.0 / 6.0;\n  let r;\n  let g;\n  let b; // compute RGB from HSV\n\n  if (h > onesixth && h <= onethird) {\n    // green/red\n    g = 1.0;\n    r = (onethird - h) / onesixth;\n    b = 0.0;\n  } else if (h > onethird && h <= 0.5) {\n    // green/blue\n    g = 1.0;\n    b = (h - onethird) / onesixth;\n    r = 0.0;\n  } else if (h > 0.5 && h <= twothird) {\n    // blue/green\n    b = 1.0;\n    g = (twothird - h) / onesixth;\n    r = 0.0;\n  } else if (h > twothird && h <= fivesixth) {\n    // blue/red\n    b = 1.0;\n    r = (h - twothird) / onesixth;\n    g = 0.0;\n  } else if (h > fivesixth && h <= 1.0) {\n    // red/blue\n    r = 1.0;\n    b = (1.0 - h) / onesixth;\n    g = 0.0;\n  } else {\n    // red/green\n    r = 1.0;\n    g = h / onesixth;\n    b = 0.0;\n  } // add Saturation to the equation.\n\n\n  r = s * r + (1.0 - s);\n  g = s * g + (1.0 - s);\n  b = s * b + (1.0 - s);\n  r *= v;\n  g *= v;\n  b *= v; // Assign back to the array\n\n  rgb[0] = r;\n  rgb[1] = g;\n  rgb[2] = b;\n}\nexport function lab2xyz(lab, xyz) {\n  // LAB to XYZ\n  const [L, a, b] = lab;\n  let var_Y = (L + 16) / 116;\n  let var_X = a / 500 + var_Y;\n  let var_Z = var_Y - b / 200;\n\n  if (var_Y ** 3 > 0.008856) {\n    var_Y **= 3;\n  } else {\n    var_Y = (var_Y - 16.0 / 116.0) / 7.787;\n  }\n\n  if (var_X ** 3 > 0.008856) {\n    var_X **= 3;\n  } else {\n    var_X = (var_X - 16.0 / 116.0) / 7.787;\n  }\n\n  if (var_Z ** 3 > 0.008856) {\n    var_Z **= 3;\n  } else {\n    var_Z = (var_Z - 16.0 / 116.0) / 7.787;\n  }\n\n  const ref_X = 0.9505;\n  const ref_Y = 1.0;\n  const ref_Z = 1.089;\n  xyz[0] = ref_X * var_X; // ref_X = 0.9505  Observer= 2 deg Illuminant= D65\n\n  xyz[1] = ref_Y * var_Y; // ref_Y = 1.000\n\n  xyz[2] = ref_Z * var_Z; // ref_Z = 1.089\n}\nexport function xyz2lab(xyz, lab) {\n  const [x, y, z] = xyz;\n  const ref_X = 0.9505;\n  const ref_Y = 1.0;\n  const ref_Z = 1.089;\n  let var_X = x / ref_X; // ref_X = 0.9505  Observer= 2 deg, Illuminant= D65\n\n  let var_Y = y / ref_Y; // ref_Y = 1.000\n\n  let var_Z = z / ref_Z; // ref_Z = 1.089\n\n  if (var_X > 0.008856) var_X **= 1.0 / 3.0;else var_X = 7.787 * var_X + 16.0 / 116.0;\n  if (var_Y > 0.008856) var_Y **= 1.0 / 3.0;else var_Y = 7.787 * var_Y + 16.0 / 116.0;\n  if (var_Z > 0.008856) var_Z **= 1.0 / 3.0;else var_Z = 7.787 * var_Z + 16.0 / 116.0;\n  lab[0] = 116 * var_Y - 16;\n  lab[1] = 500 * (var_X - var_Y);\n  lab[2] = 200 * (var_Y - var_Z);\n}\nexport function xyz2rgb(xyz, rgb) {\n  const [x, y, z] = xyz;\n  let r = x * 3.2406 + y * -1.5372 + z * -0.4986;\n  let g = x * -0.9689 + y * 1.8758 + z * 0.0415;\n  let b = x * 0.0557 + y * -0.204 + z * 1.057; // The following performs a \"gamma correction\" specified by the sRGB color\n  // space.  sRGB is defined by a canonical definition of a display monitor and\n  // has been standardized by the International Electrotechnical Commission (IEC\n  // 61966-2-1).  The nonlinearity of the correction is designed to make the\n  // colors more perceptually uniform.  This color space has been adopted by\n  // several applications including Adobe Photoshop and Microsoft Windows color\n  // management.  OpenGL is agnostic on its RGB color space, but it is reasonable\n  // to assume it is close to this one.\n\n  if (r > 0.0031308) r = 1.055 * r ** (1 / 2.4) - 0.055;else r *= 12.92;\n  if (g > 0.0031308) g = 1.055 * g ** (1 / 2.4) - 0.055;else g *= 12.92;\n  if (b > 0.0031308) b = 1.055 * b ** (1 / 2.4) - 0.055;else b *= 12.92; // Clip colors. ideally we would do something that is perceptually closest\n  // (since we can see colors outside of the display gamut), but this seems to\n  // work well enough.\n\n  let maxVal = r;\n  if (maxVal < g) maxVal = g;\n  if (maxVal < b) maxVal = b;\n\n  if (maxVal > 1.0) {\n    r /= maxVal;\n    g /= maxVal;\n    b /= maxVal;\n  }\n\n  if (r < 0) r = 0;\n  if (g < 0) g = 0;\n  if (b < 0) b = 0; // Push values back to array\n\n  rgb[0] = r;\n  rgb[1] = g;\n  rgb[2] = b;\n}\nexport function rgb2xyz(rgb, xyz) {\n  let [r, g, b] = rgb; // The following performs a \"gamma correction\" specified by the sRGB color\n  // space.  sRGB is defined by a canonical definition of a display monitor and\n  // has been standardized by the International Electrotechnical Commission (IEC\n  // 61966-2-1).  The nonlinearity of the correction is designed to make the\n  // colors more perceptually uniform.  This color space has been adopted by\n  // several applications including Adobe Photoshop and Microsoft Windows color\n  // management.  OpenGL is agnostic on its RGB color space, but it is reasonable\n  // to assume it is close to this one.\n\n  if (r > 0.04045) r = ((r + 0.055) / 1.055) ** 2.4;else r /= 12.92;\n  if (g > 0.04045) g = ((g + 0.055) / 1.055) ** 2.4;else g /= 12.92;\n  if (b > 0.04045) b = ((b + 0.055) / 1.055) ** 2.4;else b /= 12.92; // Observer. = 2 deg, Illuminant = D65\n\n  xyz[0] = r * 0.4124 + g * 0.3576 + b * 0.1805;\n  xyz[1] = r * 0.2126 + g * 0.7152 + b * 0.0722;\n  xyz[2] = r * 0.0193 + g * 0.1192 + b * 0.9505;\n}\nexport function rgb2lab(rgb, lab) {\n  const xyz = [0, 0, 0];\n  rgb2xyz(rgb, xyz);\n  xyz2lab(xyz, lab);\n}\nexport function lab2rgb(lab, rgb) {\n  const xyz = [0, 0, 0];\n  lab2xyz(lab, xyz);\n  xyz2rgb(xyz, rgb);\n}\nexport function uninitializeBounds(bounds) {\n  bounds[0] = 1.0;\n  bounds[1] = -1.0;\n  bounds[2] = 1.0;\n  bounds[3] = -1.0;\n  bounds[4] = 1.0;\n  bounds[5] = -1.0;\n  return bounds;\n}\nexport function areBoundsInitialized(bounds) {\n  return !(bounds[1] - bounds[0] < 0.0);\n}\nexport function computeBoundsFromPoints(point1, point2, bounds) {\n  bounds[0] = Math.min(point1[0], point2[0]);\n  bounds[1] = Math.max(point1[0], point2[0]);\n  bounds[2] = Math.min(point1[1], point2[1]);\n  bounds[3] = Math.max(point1[1], point2[1]);\n  bounds[4] = Math.min(point1[2], point2[2]);\n  bounds[5] = Math.max(point1[2], point2[2]);\n  return bounds;\n}\nexport function clampValue(value, minValue, maxValue) {\n  if (value < minValue) {\n    return minValue;\n  }\n\n  if (value > maxValue) {\n    return maxValue;\n  }\n\n  return value;\n}\nexport function clampVector(vector, minVector, maxVector) {\n  let out = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0, 0, 0];\n  out[0] = clampValue(vector[0], minVector[0], maxVector[0]);\n  out[1] = clampValue(vector[1], minVector[1], maxVector[1]);\n  out[2] = clampValue(vector[2], minVector[2], maxVector[2]);\n  return out;\n}\nexport function clampAndNormalizeValue(value, range) {\n  let result = 0;\n\n  if (range[0] !== range[1]) {\n    // clamp\n    if (value < range[0]) {\n      result = range[0];\n    } else if (value > range[1]) {\n      result = range[1];\n    } else {\n      result = value;\n    } // normalize\n\n\n    result = (result - range[0]) / (range[1] - range[0]);\n  }\n\n  return result;\n}\nexport const getScalarTypeFittingRange = notImplemented('GetScalarTypeFittingRange');\nexport const getAdjustedScalarRange = notImplemented('GetAdjustedScalarRange');\nexport function extentIsWithinOtherExtent(extent1, extent2) {\n  if (!extent1 || !extent2) {\n    return 0;\n  }\n\n  for (let i = 0; i < 6; i += 2) {\n    if (extent1[i] < extent2[i] || extent1[i] > extent2[i + 1] || extent1[i + 1] < extent2[i] || extent1[i + 1] > extent2[i + 1]) {\n      return 0;\n    }\n  }\n\n  return 1;\n}\nexport function boundsIsWithinOtherBounds(bounds1_6, bounds2_6, delta_3) {\n  if (!bounds1_6 || !bounds2_6) {\n    return 0;\n  }\n\n  for (let i = 0; i < 6; i += 2) {\n    if (bounds1_6[i] + delta_3[i / 2] < bounds2_6[i] || bounds1_6[i] - delta_3[i / 2] > bounds2_6[i + 1] || bounds1_6[i + 1] + delta_3[i / 2] < bounds2_6[i] || bounds1_6[i + 1] - delta_3[i / 2] > bounds2_6[i + 1]) {\n      return 0;\n    }\n  }\n\n  return 1;\n}\nexport function pointIsWithinBounds(point_3, bounds_6, delta_3) {\n  if (!point_3 || !bounds_6 || !delta_3) {\n    return 0;\n  }\n\n  for (let i = 0; i < 3; i++) {\n    if (point_3[i] + delta_3[i] < bounds_6[2 * i] || point_3[i] - delta_3[i] > bounds_6[2 * i + 1]) {\n      return 0;\n    }\n  }\n\n  return 1;\n}\nexport function solve3PointCircle(p1, p2, p3, center) {\n  const v21 = createArray(3);\n  const v32 = createArray(3);\n  const v13 = createArray(3);\n  const v12 = createArray(3);\n  const v23 = createArray(3);\n  const v31 = createArray(3);\n\n  for (let i = 0; i < 3; ++i) {\n    v21[i] = p1[i] - p2[i];\n    v32[i] = p2[i] - p3[i];\n    v13[i] = p3[i] - p1[i];\n    v12[i] = -v21[i];\n    v23[i] = -v32[i];\n    v31[i] = -v13[i];\n  }\n\n  const norm12 = norm(v12);\n  const norm23 = norm(v23);\n  const norm13 = norm(v13);\n  const crossv21v32 = createArray(3);\n  cross(v21, v32, crossv21v32);\n  const normCross = norm(crossv21v32);\n  const radius = norm12 * norm23 * norm13 / (2 * normCross);\n  const normCross22 = 2 * normCross * normCross;\n  const alpha = norm23 * norm23 * dot(v21, v31) / normCross22;\n  const beta = norm13 * norm13 * dot(v12, v32) / normCross22;\n  const gamma = norm12 * norm12 * dot(v13, v23) / normCross22;\n\n  for (let i = 0; i < 3; ++i) {\n    center[i] = alpha * p1[i] + beta * p2[i] + gamma * p3[i];\n  }\n\n  return radius;\n}\nexport const inf = Infinity;\nexport const negInf = -Infinity;\nexport const isInf = value => !Number.isFinite(value);\nexport const {\n  isFinite,\n  isNaN\n} = Number;\nexport const isNan = isNaN; // JavaScript - add-on ----------------------\n\nexport function createUninitializedBounds() {\n  return [].concat([Number.MAX_VALUE, -Number.MAX_VALUE, // X\n  Number.MAX_VALUE, -Number.MAX_VALUE, // Y\n  Number.MAX_VALUE, -Number.MAX_VALUE // Z\n  ]);\n}\nexport function getMajorAxisIndex(vector) {\n  let maxValue = -1;\n  let axisIndex = -1;\n\n  for (let i = 0; i < vector.length; i++) {\n    const value = Math.abs(vector[i]);\n\n    if (value > maxValue) {\n      axisIndex = i;\n      maxValue = value;\n    }\n  }\n\n  return axisIndex;\n}\nexport function floatToHex2(value) {\n  const integer = Math.floor(value * 255);\n\n  if (integer > 15) {\n    return integer.toString(16);\n  }\n\n  return `0${integer.toString(16)}`;\n}\nexport function floatRGB2HexCode(rgbArray) {\n  let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '#';\n  return `${prefix}${rgbArray.map(floatToHex2).join('')}`;\n}\n\nfunction floatToChar(f) {\n  return Math.round(f * 255);\n}\n\nexport function float2CssRGBA(rgbArray) {\n  if (rgbArray.length === 3) {\n    return `rgb(${rgbArray.map(floatToChar).join(', ')})`;\n  }\n\n  return `rgba(${floatToChar(rgbArray[0] || 0)}, ${floatToChar(rgbArray[1] || 0)}, ${floatToChar(rgbArray[2] || 0)}, ${rgbArray[3] || 0})`;\n} // ----------------------------------------------------------------------------\n// Only Static API\n// ----------------------------------------------------------------------------\n\nexport default {\n  Pi,\n  radiansFromDegrees,\n  degreesFromRadians,\n  round,\n  floor,\n  ceil,\n  ceilLog2,\n  min,\n  max,\n  arrayMin,\n  arrayMax,\n  arrayRange,\n  isPowerOfTwo,\n  nearestPowerOfTwo,\n  factorial,\n  binomial,\n  beginCombination,\n  nextCombination,\n  randomSeed,\n  getSeed,\n  random,\n  gaussian,\n  add,\n  subtract,\n  multiplyScalar,\n  multiplyScalar2D,\n  multiplyAccumulate,\n  multiplyAccumulate2D,\n  dot,\n  outer,\n  cross,\n  norm,\n  normalize,\n  perpendiculars,\n  projectVector,\n  projectVector2D,\n  distance2BetweenPoints,\n  angleBetweenVectors,\n  gaussianAmplitude,\n  gaussianWeight,\n  dot2D,\n  outer2D,\n  norm2D,\n  normalize2D,\n  determinant2x2,\n  LUFactor3x3,\n  LUSolve3x3,\n  linearSolve3x3,\n  multiply3x3_vect3,\n  multiply3x3_mat3,\n  multiplyMatrix,\n  transpose3x3,\n  invert3x3,\n  identity3x3,\n  identity,\n  determinant3x3,\n  quaternionToMatrix3x3,\n  areEquals,\n  areMatricesEqual,\n  roundNumber,\n  roundVector,\n  matrix3x3ToQuaternion,\n  multiplyQuaternion,\n  orthogonalize3x3,\n  diagonalize3x3,\n  singularValueDecomposition3x3,\n  solveLinearSystem,\n  invertMatrix,\n  luFactorLinearSystem,\n  luSolveLinearSystem,\n  estimateMatrixCondition,\n  jacobi,\n  jacobiN,\n  solveHomogeneousLeastSquares,\n  solveLeastSquares,\n  hex2float,\n  rgb2hsv,\n  hsv2rgb,\n  lab2xyz,\n  xyz2lab,\n  xyz2rgb,\n  rgb2xyz,\n  rgb2lab,\n  lab2rgb,\n  uninitializeBounds,\n  areBoundsInitialized,\n  computeBoundsFromPoints,\n  clampValue,\n  clampVector,\n  clampAndNormalizeValue,\n  getScalarTypeFittingRange,\n  getAdjustedScalarRange,\n  extentIsWithinOtherExtent,\n  boundsIsWithinOtherBounds,\n  pointIsWithinBounds,\n  solve3PointCircle,\n  inf,\n  negInf,\n  isInf,\n  isNan: isNaN,\n  isNaN,\n  isFinite,\n  // JS add-on\n  createUninitializedBounds,\n  getMajorAxisIndex,\n  floatToHex2,\n  floatRGB2HexCode,\n  float2CssRGBA\n};","map":{"version":3,"names":["seedrandom","macro","vtkErrorMacro","vtkWarningMacro","randomSeedValue","VTK_MAX_ROTATIONS","VTK_SMALL_NUMBER","notImplemented","method","swapRowsMatrix_nxn","matrix","n","row1","row2","tmp","i","swapColumnsMatrix_nxn","column1","column2","createArray","size","Array","fill","Pi","Math","PI","radiansFromDegrees","deg","degreesFromRadians","rad","round","floor","ceil","min","max","arrayMin","arr","offset","stride","minValue","Infinity","len","length","arrayMax","maxValue","arrayRange","ceilLog2","factorial","nearestPowerOfTwo","xi","v","isPowerOfTwo","x","binomial","m","r","beginCombination","nextCombination","status","j","randomSeed","seed","global","getSeed","random","delta","gaussian","add","a","b","out","subtract","multiplyScalar","vec","scalar","multiplyScalar2D","multiplyAccumulate","multiplyAccumulate2D","dot","y","outer","out_3x3","cross","Zx","Zy","Zz","norm","abs","sqrt","sum","normalize","den","perpendiculars","z","theta","x2","y2","z2","dx","dy","dz","c","sintheta","sin","costheta","cos","projectVector","projection","bSquared","scale","dot2D","projectVector2D","distance2BetweenPoints","angleBetweenVectors","v1","v2","crossVect","atan2","signedAngleBetweenVectors","vN","angle","gaussianAmplitude","mean","variance","position","distanceFromMean","exp","gaussianWeight","outer2D","out_2x2","norm2D","x2D","normalize2D","rowsToMat4","row0","row3","mat","columnsToMat4","column0","column3","rowsToMat3","columnsToMat3","determinant2x2","args","Number","NaN","LUFactor3x3","mat_3x3","index_3","maxI","largest","LUSolve3x3","x_3","linearSolve3x3","y_3","a1","b1","c1","a2","b2","c2","a3","b3","c3","d1","d2","d3","e1","e2","e3","f1","f2","f3","det","v3","multiply3x3_vect3","in_3","out_3","multiply3x3_mat3","a_3x3","b_3x3","copyA","copyB","multiplyMatrix","rowA","colA","rowB","colB","out_rowXcol","k","transpose3x3","in_3x3","outT_3x3","invert3x3","outI_3x3","determinant3x3","identity3x3","identity","quaternionToMatrix3x3","quat_4","ww","wx","wy","wz","xx","yy","zz","xy","xz","yz","rr","f","s","areEquals","eps","isEqual","element","index","every","areMatricesEqual","roundNumber","num","digits","includes","split","sig","roundVector","vector","jacobiN","w","iq","ip","numPos","tresh","t","tau","sm","h","g","vtkROTATE","aa","ii","jj","ceil_half_n","matrix3x3ToQuaternion","eigenvectors","eigenvalues","NTemp","multiplyQuaternion","quat_1","quat_2","quat_out","xw","yw","yx","zw","zx","zy","orthogonalize3x3","x1","x3","y3","flip","quat","diagonalize3x3","w_3","v_3x3","maxVal","vectTmp1","vectTmp2","eigenValTmp","singularValueDecomposition3x3","u_3x3","vT_3x3","B","d","luFactorLinearSystem","A","temp1","temp2","luSolveLinearSystem","idx","solveLinearSystem","invertMatrix","AI","column","tmp1Size","tmp2Size","estimateMatrixCondition","MAX_VALUE","jacobi","solveHomogeneousLeastSquares","numberOfSamples","xt","xOrder","mt","XXt","eigenvals","eigenvecs","solveLeastSquares","yt","yOrder","checkHomogeneous","homogenFlags","allHomogeneous","hmt","homogRC","someHomogeneous","XXtI","XYt","successFlag","hex2float","hexStr","outFloatArray","parseInt","substr","rgb2hsv","rgb","hsv","onethird","onesixth","twothird","cmax","cmin","hsv2rgb","fivesixth","lab2xyz","lab","xyz","L","var_Y","var_X","var_Z","ref_X","ref_Y","ref_Z","xyz2lab","xyz2rgb","rgb2xyz","rgb2lab","lab2rgb","uninitializeBounds","bounds","areBoundsInitialized","computeBoundsFromPoints","point1","point2","clampValue","value","clampVector","minVector","maxVector","clampAndNormalizeValue","range","result","getScalarTypeFittingRange","getAdjustedScalarRange","extentIsWithinOtherExtent","extent1","extent2","boundsIsWithinOtherBounds","bounds1_6","bounds2_6","delta_3","pointIsWithinBounds","point_3","bounds_6","solve3PointCircle","p1","p2","p3","center","v21","v32","v13","v12","v23","v31","norm12","norm23","norm13","crossv21v32","normCross","radius","normCross22","alpha","beta","gamma","inf","negInf","isInf","isFinite","isNaN","isNan","createUninitializedBounds","concat","getMajorAxisIndex","axisIndex","floatToHex2","integer","toString","floatRGB2HexCode","rgbArray","prefix","map","join","floatToChar","float2CssRGBA"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Common/Core/Math/index.js"],"sourcesContent":["import seedrandom from 'seedrandom';\nimport macro from 'vtk.js/Sources/macros';\n\nconst { vtkErrorMacro, vtkWarningMacro } = macro;\n\n// ----------------------------------------------------------------------------\n/* eslint-disable camelcase                                                  */\n/* eslint-disable no-cond-assign                                             */\n/* eslint-disable no-bitwise                                                 */\n/* eslint-disable no-multi-assign                                            */\n// ----------------------------------------------------------------------------\nlet randomSeedValue = 0;\nconst VTK_MAX_ROTATIONS = 20;\nconst VTK_SMALL_NUMBER = 1.0e-12;\n\nfunction notImplemented(method) {\n  return () => vtkErrorMacro(`vtkMath::${method} - NOT IMPLEMENTED`);\n}\n\n// Swap rows for n by n matrix\nfunction swapRowsMatrix_nxn(matrix, n, row1, row2) {\n  let tmp;\n  for (let i = 0; i < n; i++) {\n    tmp = matrix[row1 * n + i];\n    matrix[row1 * n + i] = matrix[row2 * n + i];\n    matrix[row2 * n + i] = tmp;\n  }\n}\n\n// Swap columns for n by n matrix\nfunction swapColumnsMatrix_nxn(matrix, n, column1, column2) {\n  let tmp;\n  for (let i = 0; i < n; i++) {\n    tmp = matrix[i * n + column1];\n    matrix[i * n + column1] = matrix[i * n + column2];\n    matrix[i * n + column2] = tmp;\n  }\n}\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nexport function createArray(size = 3) {\n  // faster than Array.from and/or while loop\n  return Array(size).fill(0);\n}\n\nexport const Pi = () => Math.PI;\n\nexport function radiansFromDegrees(deg) {\n  return (deg / 180) * Math.PI;\n}\n\nexport function degreesFromRadians(rad) {\n  return (rad * 180) / Math.PI;\n}\n\nexport const { round, floor, ceil, min, max } = Math;\n\nexport function arrayMin(arr, offset = 0, stride = 1) {\n  let minValue = Infinity;\n  for (let i = offset, len = arr.length; i < len; i += stride) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n    }\n  }\n\n  return minValue;\n}\n\nexport function arrayMax(arr, offset = 0, stride = 1) {\n  let maxValue = -Infinity;\n  for (let i = offset, len = arr.length; i < len; i += stride) {\n    if (maxValue < arr[i]) {\n      maxValue = arr[i];\n    }\n  }\n\n  return maxValue;\n}\n\nexport function arrayRange(arr, offset = 0, stride = 1) {\n  let minValue = Infinity;\n  let maxValue = -Infinity;\n  for (let i = offset, len = arr.length; i < len; i += stride) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n    }\n    if (maxValue < arr[i]) {\n      maxValue = arr[i];\n    }\n  }\n\n  return [minValue, maxValue];\n}\n\nexport const ceilLog2 = notImplemented('ceilLog2');\nexport const factorial = notImplemented('factorial');\n\nexport function nearestPowerOfTwo(xi) {\n  let v = 1;\n  while (v < xi) {\n    v *= 2;\n  }\n  return v;\n}\n\nexport function isPowerOfTwo(x) {\n  return x === nearestPowerOfTwo(x);\n}\n\nexport function binomial(m, n) {\n  let r = 1;\n  for (let i = 1; i <= n; ++i) {\n    r *= (m - i + 1) / i;\n  }\n  return Math.floor(r);\n}\n\nexport function beginCombination(m, n) {\n  if (m < n) {\n    return 0;\n  }\n\n  const r = createArray(n);\n  for (let i = 0; i < n; ++i) {\n    r[i] = i;\n  }\n  return r;\n}\n\nexport function nextCombination(m, n, r) {\n  let status = 0;\n  for (let i = n - 1; i >= 0; --i) {\n    if (r[i] < m - n + i) {\n      let j = r[i] + 1;\n      while (i < n) {\n        r[i++] = j++;\n      }\n      status = 1;\n      break;\n    }\n  }\n  return status;\n}\n\nexport function randomSeed(seed) {\n  seedrandom(`${seed}`, { global: true });\n  randomSeedValue = seed;\n}\n\nexport function getSeed() {\n  return randomSeedValue;\n}\n\nexport function random(minValue = 0, maxValue = 1) {\n  const delta = maxValue - minValue;\n  return minValue + delta * Math.random();\n}\n\nexport const gaussian = notImplemented('gaussian');\n\n// Vect3 operations\nexport function add(a, b, out) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\nexport function subtract(a, b, out) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\nexport function multiplyScalar(vec, scalar) {\n  vec[0] *= scalar;\n  vec[1] *= scalar;\n  vec[2] *= scalar;\n  return vec;\n}\n\nexport function multiplyScalar2D(vec, scalar) {\n  vec[0] *= scalar;\n  vec[1] *= scalar;\n  return vec;\n}\n\nexport function multiplyAccumulate(a, b, scalar, out) {\n  out[0] = a[0] + b[0] * scalar;\n  out[1] = a[1] + b[1] * scalar;\n  out[2] = a[2] + b[2] * scalar;\n  return out;\n}\n\nexport function multiplyAccumulate2D(a, b, scalar, out) {\n  out[0] = a[0] + b[0] * scalar;\n  out[1] = a[1] + b[1] * scalar;\n  return out;\n}\n\nexport function dot(x, y) {\n  return x[0] * y[0] + x[1] * y[1] + x[2] * y[2];\n}\n\nexport function outer(x, y, out_3x3) {\n  out_3x3[0] = x[0] * y[0];\n  out_3x3[1] = x[0] * y[1];\n  out_3x3[2] = x[0] * y[2];\n  out_3x3[3] = x[1] * y[0];\n  out_3x3[4] = x[1] * y[1];\n  out_3x3[5] = x[1] * y[2];\n  out_3x3[6] = x[2] * y[0];\n  out_3x3[7] = x[2] * y[1];\n  out_3x3[8] = x[2] * y[2];\n}\n\nexport function cross(x, y, out) {\n  const Zx = x[1] * y[2] - x[2] * y[1];\n  const Zy = x[2] * y[0] - x[0] * y[2];\n  const Zz = x[0] * y[1] - x[1] * y[0];\n  out[0] = Zx;\n  out[1] = Zy;\n  out[2] = Zz;\n  return out;\n}\n\nexport function norm(x, n = 3) {\n  switch (n) {\n    case 1:\n      return Math.abs(x);\n    case 2:\n      return Math.sqrt(x[0] * x[0] + x[1] * x[1]);\n    case 3:\n      return Math.sqrt(x[0] * x[0] + x[1] * x[1] + x[2] * x[2]);\n    default: {\n      let sum = 0;\n      for (let i = 0; i < n; i++) {\n        sum += x[i] * x[i];\n      }\n      return Math.sqrt(sum);\n    }\n  }\n}\n\nexport function normalize(x) {\n  const den = norm(x);\n  if (den !== 0.0) {\n    x[0] /= den;\n    x[1] /= den;\n    x[2] /= den;\n  }\n  return den;\n}\n\nexport function perpendiculars(x, y, z, theta) {\n  const x2 = x[0] * x[0];\n  const y2 = x[1] * x[1];\n  const z2 = x[2] * x[2];\n  const r = Math.sqrt(x2 + y2 + z2);\n\n  let dx;\n  let dy;\n  let dz;\n\n  // transpose the vector to avoid divide-by-zero error\n  if (x2 > y2 && x2 > z2) {\n    dx = 0;\n    dy = 1;\n    dz = 2;\n  } else if (y2 > z2) {\n    dx = 1;\n    dy = 2;\n    dz = 0;\n  } else {\n    dx = 2;\n    dy = 0;\n    dz = 1;\n  }\n\n  const a = x[dx] / r;\n  const b = x[dy] / r;\n  const c = x[dz] / r;\n  const tmp = Math.sqrt(a * a + c * c);\n\n  if (theta !== 0) {\n    const sintheta = Math.sin(theta);\n    const costheta = Math.cos(theta);\n\n    if (y) {\n      y[dx] = (c * costheta - a * b * sintheta) / tmp;\n      y[dy] = sintheta * tmp;\n      y[dz] = (-(a * costheta) - b * c * sintheta) / tmp;\n    }\n\n    if (z) {\n      z[dx] = (-(c * sintheta) - a * b * costheta) / tmp;\n      z[dy] = costheta * tmp;\n      z[dz] = (a * sintheta - b * c * costheta) / tmp;\n    }\n  } else {\n    if (y) {\n      y[dx] = c / tmp;\n      y[dy] = 0;\n      y[dz] = -a / tmp;\n    }\n\n    if (z) {\n      z[dx] = (-a * b) / tmp;\n      z[dy] = tmp;\n      z[dz] = (-b * c) / tmp;\n    }\n  }\n}\n\nexport function projectVector(a, b, projection) {\n  const bSquared = dot(b, b);\n\n  if (bSquared === 0) {\n    projection[0] = 0;\n    projection[1] = 0;\n    projection[2] = 0;\n    return false;\n  }\n\n  const scale = dot(a, b) / bSquared;\n\n  for (let i = 0; i < 3; i++) {\n    projection[i] = b[i];\n  }\n  multiplyScalar(projection, scale);\n\n  return true;\n}\n\nexport function dot2D(x, y) {\n  return x[0] * y[0] + x[1] * y[1];\n}\n\nexport function projectVector2D(a, b, projection) {\n  const bSquared = dot2D(b, b);\n\n  if (bSquared === 0) {\n    projection[0] = 0;\n    projection[1] = 0;\n    return false;\n  }\n\n  const scale = dot2D(a, b) / bSquared;\n\n  for (let i = 0; i < 2; i++) {\n    projection[i] = b[i];\n  }\n  multiplyScalar2D(projection, scale);\n\n  return true;\n}\n\nexport function distance2BetweenPoints(x, y) {\n  return (\n    (x[0] - y[0]) * (x[0] - y[0]) +\n    (x[1] - y[1]) * (x[1] - y[1]) +\n    (x[2] - y[2]) * (x[2] - y[2])\n  );\n}\n\nexport function angleBetweenVectors(v1, v2) {\n  const crossVect = [0, 0, 0];\n  cross(v1, v2, crossVect);\n  return Math.atan2(norm(crossVect), dot(v1, v2));\n}\n\nexport function signedAngleBetweenVectors(v1, v2, vN) {\n  const crossVect = [0, 0, 0];\n  cross(v1, v2, crossVect);\n  const angle = Math.atan2(norm(crossVect), dot(v1, v2));\n  return dot(crossVect, vN) >= 0 ? angle : -angle;\n}\n\nexport function gaussianAmplitude(mean, variance, position) {\n  const distanceFromMean = Math.abs(mean - position);\n  return (\n    (1 / Math.sqrt(2 * Math.PI * variance)) *\n    Math.exp(-(distanceFromMean ** 2) / (2 * variance))\n  );\n}\n\nexport function gaussianWeight(mean, variance, position) {\n  const distanceFromMean = Math.abs(mean - position);\n  return Math.exp(-(distanceFromMean ** 2) / (2 * variance));\n}\n\nexport function outer2D(x, y, out_2x2) {\n  out_2x2[0] = x[0] * y[0];\n  out_2x2[1] = x[0] * y[1];\n  out_2x2[2] = x[1] * y[0];\n  out_2x2[3] = x[1] * y[1];\n}\n\nexport function norm2D(x2D) {\n  return Math.sqrt(x2D[0] * x2D[0] + x2D[1] * x2D[1]);\n}\n\nexport function normalize2D(x) {\n  const den = norm2D(x);\n  if (den !== 0.0) {\n    x[0] /= den;\n    x[1] /= den;\n  }\n  return den;\n}\n\nexport function rowsToMat4(row0, row1, row2, row3, mat) {\n  for (let i = 0; i < 4; i++) {\n    mat[i] = row0[i];\n    mat[4 + i] = row1[i];\n    mat[8 + i] = row2[i];\n    mat[12 + i] = row3[i];\n  }\n  return mat;\n}\n\nexport function columnsToMat4(column0, column1, column2, column3, mat) {\n  for (let i = 0; i < 4; i++) {\n    mat[4 * i] = column0[i];\n    mat[4 * i + 1] = column1[i];\n    mat[4 * i + 2] = column2[i];\n    mat[4 * i + 3] = column3[i];\n  }\n  return mat;\n}\n\nexport function rowsToMat3(row0, row1, row2, mat) {\n  for (let i = 0; i < 3; i++) {\n    mat[i] = row0[i];\n    mat[3 + i] = row1[i];\n    mat[6 + i] = row2[i];\n  }\n  return mat;\n}\n\nexport function columnsToMat3(column0, column1, column2, mat) {\n  for (let i = 0; i < 3; i++) {\n    mat[3 * i] = column0[i];\n    mat[3 * i + 1] = column1[i];\n    mat[3 * i + 2] = column2[i];\n  }\n  return mat;\n}\n\nexport function determinant2x2(...args) {\n  if (args.length === 2) {\n    return args[0][0] * args[1][1] - args[1][0] * args[0][1];\n  }\n  if (args.length === 4) {\n    return args[0] * args[3] - args[1] * args[2];\n  }\n  return Number.NaN;\n}\n\nexport function LUFactor3x3(mat_3x3, index_3) {\n  let maxI;\n  let tmp;\n  let largest;\n  const scale = [0, 0, 0];\n\n  // Loop over rows to get implicit scaling information\n  for (let i = 0; i < 3; i++) {\n    largest = Math.abs(mat_3x3[i * 3]);\n    if ((tmp = Math.abs(mat_3x3[i * 3 + 1])) > largest) {\n      largest = tmp;\n    }\n    if ((tmp = Math.abs(mat_3x3[i * 3 + 2])) > largest) {\n      largest = tmp;\n    }\n    scale[i] = 1 / largest;\n  }\n\n  // Loop over all columns using Crout's method\n\n  // first column\n  largest = scale[0] * Math.abs(mat_3x3[0]);\n  maxI = 0;\n  if ((tmp = scale[1] * Math.abs(mat_3x3[3])) >= largest) {\n    largest = tmp;\n    maxI = 1;\n  }\n  if ((tmp = scale[2] * Math.abs(mat_3x3[6])) >= largest) {\n    maxI = 2;\n  }\n  if (maxI !== 0) {\n    swapRowsMatrix_nxn(mat_3x3, 3, maxI, 0);\n    scale[maxI] = scale[0];\n  }\n  index_3[0] = maxI;\n\n  mat_3x3[3] /= mat_3x3[0];\n  mat_3x3[6] /= mat_3x3[0];\n\n  // second column\n  mat_3x3[4] -= mat_3x3[3] * mat_3x3[1];\n  mat_3x3[7] -= mat_3x3[6] * mat_3x3[1];\n  largest = scale[1] * Math.abs(mat_3x3[4]);\n  maxI = 1;\n  if ((tmp = scale[2] * Math.abs(mat_3x3[7])) >= largest) {\n    maxI = 2;\n    swapRowsMatrix_nxn(mat_3x3, 3, 1, 2);\n    scale[2] = scale[1];\n  }\n  index_3[1] = maxI;\n  mat_3x3[7] /= mat_3x3[4];\n\n  // third column\n  mat_3x3[5] -= mat_3x3[3] * mat_3x3[2];\n  mat_3x3[8] -= mat_3x3[6] * mat_3x3[2] + mat_3x3[7] * mat_3x3[5];\n  index_3[2] = 2;\n}\n\nexport function LUSolve3x3(mat_3x3, index_3, x_3) {\n  // forward substitution\n  let sum = x_3[index_3[0]];\n  x_3[index_3[0]] = x_3[0];\n  x_3[0] = sum;\n\n  sum = x_3[index_3[1]];\n  x_3[index_3[1]] = x_3[1];\n  x_3[1] = sum - mat_3x3[3] * x_3[0];\n\n  sum = x_3[index_3[2]];\n  x_3[index_3[2]] = x_3[2];\n  x_3[2] = sum - mat_3x3[6] * x_3[0] - mat_3x3[7] * x_3[1];\n\n  // back substitution\n  x_3[2] /= mat_3x3[8];\n  x_3[1] = (x_3[1] - mat_3x3[5] * x_3[2]) / mat_3x3[4];\n  x_3[0] = (x_3[0] - mat_3x3[1] * x_3[1] - mat_3x3[2] * x_3[2]) / mat_3x3[0];\n}\n\nexport function linearSolve3x3(mat_3x3, x_3, y_3) {\n  const a1 = mat_3x3[0];\n  const b1 = mat_3x3[1];\n  const c1 = mat_3x3[2];\n  const a2 = mat_3x3[3];\n  const b2 = mat_3x3[4];\n  const c2 = mat_3x3[5];\n  const a3 = mat_3x3[6];\n  const b3 = mat_3x3[7];\n  const c3 = mat_3x3[8];\n\n  // Compute the adjoint\n  const d1 = +determinant2x2(b2, b3, c2, c3);\n  const d2 = -determinant2x2(a2, a3, c2, c3);\n  const d3 = +determinant2x2(a2, a3, b2, b3);\n\n  const e1 = -determinant2x2(b1, b3, c1, c3);\n  const e2 = +determinant2x2(a1, a3, c1, c3);\n  const e3 = -determinant2x2(a1, a3, b1, b3);\n\n  const f1 = +determinant2x2(b1, b2, c1, c2);\n  const f2 = -determinant2x2(a1, a2, c1, c2);\n  const f3 = +determinant2x2(a1, a2, b1, b2);\n\n  // Compute the determinant\n  const det = a1 * d1 + b1 * d2 + c1 * d3;\n\n  // Multiply by the adjoint\n  const v1 = d1 * x_3[0] + e1 * x_3[1] + f1 * x_3[2];\n  const v2 = d2 * x_3[0] + e2 * x_3[1] + f2 * x_3[2];\n  const v3 = d3 * x_3[0] + e3 * x_3[1] + f3 * x_3[2];\n\n  // Divide by the determinant\n  y_3[0] = v1 / det;\n  y_3[1] = v2 / det;\n  y_3[2] = v3 / det;\n}\n\nexport function multiply3x3_vect3(mat_3x3, in_3, out_3) {\n  const x = mat_3x3[0] * in_3[0] + mat_3x3[1] * in_3[1] + mat_3x3[2] * in_3[2];\n  const y = mat_3x3[3] * in_3[0] + mat_3x3[4] * in_3[1] + mat_3x3[5] * in_3[2];\n  const z = mat_3x3[6] * in_3[0] + mat_3x3[7] * in_3[1] + mat_3x3[8] * in_3[2];\n\n  out_3[0] = x;\n  out_3[1] = y;\n  out_3[2] = z;\n}\n\nexport function multiply3x3_mat3(a_3x3, b_3x3, out_3x3) {\n  const copyA = [...a_3x3];\n  const copyB = [...b_3x3];\n  for (let i = 0; i < 3; i++) {\n    out_3x3[i] =\n      copyA[0] * copyB[i] + copyA[1] * copyB[i + 3] + copyA[2] * copyB[i + 6];\n    out_3x3[i + 3] =\n      copyA[3] * copyB[i] + copyA[4] * copyB[i + 3] + copyA[5] * copyB[i + 6];\n    out_3x3[i + 6] =\n      copyA[6] * copyB[i] + copyA[7] * copyB[i + 3] + copyA[8] * copyB[i + 6];\n  }\n}\n\nexport function multiplyMatrix(a, b, rowA, colA, rowB, colB, out_rowXcol) {\n  // we need colA == rowB\n  if (colA !== rowB) {\n    vtkErrorMacro('Number of columns of A must match number of rows of B.');\n  }\n\n  // If a or b is used to store the result, copying them is required\n  const copyA = [...a];\n  const copyB = [...b];\n  // output matrix is rowA*colB\n  // output row\n  for (let i = 0; i < rowA; i++) {\n    // output col\n    for (let j = 0; j < colB; j++) {\n      out_rowXcol[i * colB + j] = 0;\n      // sum for this point\n      for (let k = 0; k < colA; k++) {\n        out_rowXcol[i * colB + j] += copyA[i * colA + k] * copyB[j + colB * k];\n      }\n    }\n  }\n}\n\nexport function transpose3x3(in_3x3, outT_3x3) {\n  let tmp;\n\n  // off-diagonal elements\n  tmp = in_3x3[3];\n  outT_3x3[3] = in_3x3[1];\n  outT_3x3[1] = tmp;\n  tmp = in_3x3[6];\n  outT_3x3[6] = in_3x3[2];\n  outT_3x3[2] = tmp;\n  tmp = in_3x3[7];\n  outT_3x3[7] = in_3x3[5];\n  outT_3x3[5] = tmp;\n\n  // on-diagonal elements\n  outT_3x3[0] = in_3x3[0];\n  outT_3x3[4] = in_3x3[4];\n  outT_3x3[8] = in_3x3[8];\n}\n\nexport function invert3x3(in_3x3, outI_3x3) {\n  const a1 = in_3x3[0];\n  const b1 = in_3x3[1];\n  const c1 = in_3x3[2];\n  const a2 = in_3x3[3];\n  const b2 = in_3x3[4];\n  const c2 = in_3x3[5];\n  const a3 = in_3x3[6];\n  const b3 = in_3x3[7];\n  const c3 = in_3x3[8];\n\n  // Compute the adjoint\n  const d1 = +determinant2x2(b2, b3, c2, c3);\n  const d2 = -determinant2x2(a2, a3, c2, c3);\n  const d3 = +determinant2x2(a2, a3, b2, b3);\n\n  const e1 = -determinant2x2(b1, b3, c1, c3);\n  const e2 = +determinant2x2(a1, a3, c1, c3);\n  const e3 = -determinant2x2(a1, a3, b1, b3);\n\n  const f1 = +determinant2x2(b1, b2, c1, c2);\n  const f2 = -determinant2x2(a1, a2, c1, c2);\n  const f3 = +determinant2x2(a1, a2, b1, b2);\n\n  // Divide by the determinant\n  const det = a1 * d1 + b1 * d2 + c1 * d3;\n  if (det === 0) {\n    vtkWarningMacro('Matrix has 0 determinant');\n  }\n\n  outI_3x3[0] = d1 / det;\n  outI_3x3[3] = d2 / det;\n  outI_3x3[6] = d3 / det;\n\n  outI_3x3[1] = e1 / det;\n  outI_3x3[4] = e2 / det;\n  outI_3x3[7] = e3 / det;\n\n  outI_3x3[2] = f1 / det;\n  outI_3x3[5] = f2 / det;\n  outI_3x3[8] = f3 / det;\n}\n\nexport function determinant3x3(mat_3x3) {\n  return (\n    mat_3x3[0] * mat_3x3[4] * mat_3x3[8] +\n    mat_3x3[3] * mat_3x3[7] * mat_3x3[2] +\n    mat_3x3[6] * mat_3x3[1] * mat_3x3[5] -\n    mat_3x3[0] * mat_3x3[7] * mat_3x3[5] -\n    mat_3x3[3] * mat_3x3[1] * mat_3x3[8] -\n    mat_3x3[6] * mat_3x3[4] * mat_3x3[2]\n  );\n}\n\nexport function identity3x3(mat_3x3) {\n  for (let i = 0; i < 3; i++) {\n    /* eslint-disable-next-line no-multi-assign */\n    mat_3x3[i * 3] = mat_3x3[i * 3 + 1] = mat_3x3[i * 3 + 2] = 0;\n    mat_3x3[i * 3 + i] = 1;\n  }\n}\n\nexport function identity(n, mat) {\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      mat[i * n + j] = 0;\n    }\n    mat[i * n + i] = 1;\n  }\n  return mat;\n}\n\nexport function quaternionToMatrix3x3(quat_4, mat_3x3) {\n  const ww = quat_4[0] * quat_4[0];\n  const wx = quat_4[0] * quat_4[1];\n  const wy = quat_4[0] * quat_4[2];\n  const wz = quat_4[0] * quat_4[3];\n\n  const xx = quat_4[1] * quat_4[1];\n  const yy = quat_4[2] * quat_4[2];\n  const zz = quat_4[3] * quat_4[3];\n\n  const xy = quat_4[1] * quat_4[2];\n  const xz = quat_4[1] * quat_4[3];\n  const yz = quat_4[2] * quat_4[3];\n\n  const rr = xx + yy + zz;\n  // normalization factor, just in case quaternion was not normalized\n  let f = 1 / (ww + rr);\n  const s = (ww - rr) * f;\n  f *= 2;\n\n  mat_3x3[0] = xx * f + s;\n  mat_3x3[3] = (xy + wz) * f;\n  mat_3x3[6] = (xz - wy) * f;\n\n  mat_3x3[1] = (xy - wz) * f;\n  mat_3x3[4] = yy * f + s;\n  mat_3x3[7] = (yz + wx) * f;\n\n  mat_3x3[2] = (xz + wy) * f;\n  mat_3x3[5] = (yz - wx) * f;\n  mat_3x3[8] = zz * f + s;\n}\n\n/**\n * Returns true if elements of both arrays are equals.\n * @param {Array} a an array of numbers (vector, point, matrix...)\n * @param {Array} b an array of numbers (vector, point, matrix...)\n * @param {Number} eps tolerance\n */\nexport function areEquals(a, b, eps = 1e-6) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  function isEqual(element, index) {\n    return Math.abs(element - b[index]) <= eps;\n  }\n  return a.every(isEqual);\n}\n\nexport const areMatricesEqual = areEquals;\n\nexport function roundNumber(num, digits = 0) {\n  if (!`${num}`.includes('e')) {\n    return +`${Math.round(`${num}e+${digits}`)}e-${digits}`;\n  }\n  const arr = `${num}`.split('e');\n  let sig = '';\n  if (+arr[1] + digits > 0) {\n    sig = '+';\n  }\n  return +`${Math.round(`${+arr[0]}e${sig}${+arr[1] + digits}`)}e-${digits}`;\n}\n\nexport function roundVector(vector, out = [0, 0, 0], digits = 0) {\n  out[0] = roundNumber(vector[0], digits);\n  out[1] = roundNumber(vector[1], digits);\n  out[2] = roundNumber(vector[2], digits);\n\n  return out;\n}\n\nexport function jacobiN(a, n, w, v) {\n  let i;\n  let j;\n  let k;\n  let iq;\n  let ip;\n  let numPos;\n  let tresh;\n  let theta;\n  let t;\n  let tau;\n  let sm;\n  let s;\n  let h;\n  let g;\n  let c;\n  let tmp;\n  const b = createArray(n);\n  const z = createArray(n);\n\n  const vtkROTATE = (aa, ii, jj) => {\n    g = aa[ii];\n    h = aa[jj];\n    aa[ii] = g - s * (h + g * tau);\n    aa[jj] = h + s * (g - h * tau);\n  };\n\n  // initialize\n  identity(n, v);\n  for (ip = 0; ip < n; ip++) {\n    b[ip] = w[ip] = a[ip + ip * n];\n    z[ip] = 0.0;\n  }\n\n  // begin rotation sequence\n  for (i = 0; i < VTK_MAX_ROTATIONS; i++) {\n    sm = 0.0;\n    for (ip = 0; ip < n - 1; ip++) {\n      for (iq = ip + 1; iq < n; iq++) {\n        sm += Math.abs(a[ip * n + iq]);\n      }\n    }\n    if (sm === 0.0) {\n      break;\n    }\n\n    // first 3 sweeps\n    if (i < 3) {\n      tresh = (0.2 * sm) / (n * n);\n    } else {\n      tresh = 0.0;\n    }\n\n    for (ip = 0; ip < n - 1; ip++) {\n      for (iq = ip + 1; iq < n; iq++) {\n        g = 100.0 * Math.abs(a[ip * n + iq]);\n\n        // after 4 sweeps\n        if (\n          i > 3 &&\n          Math.abs(w[ip]) + g === Math.abs(w[ip]) &&\n          Math.abs(w[iq]) + g === Math.abs(w[iq])\n        ) {\n          a[ip * n + iq] = 0.0;\n        } else if (Math.abs(a[ip * n + iq]) > tresh) {\n          h = w[iq] - w[ip];\n          if (Math.abs(h) + g === Math.abs(h)) {\n            t = a[ip * n + iq] / h;\n          } else {\n            theta = (0.5 * h) / a[ip * n + iq];\n            t = 1.0 / (Math.abs(theta) + Math.sqrt(1.0 + theta * theta));\n            if (theta < 0.0) {\n              t = -t;\n            }\n          }\n          c = 1.0 / Math.sqrt(1 + t * t);\n          s = t * c;\n          tau = s / (1.0 + c);\n          h = t * a[ip * n + iq];\n          z[ip] -= h;\n          z[iq] += h;\n          w[ip] -= h;\n          w[iq] += h;\n          a[ip * n + iq] = 0.0;\n\n          // ip already shifted left by 1 unit\n          for (j = 0; j <= ip - 1; j++) {\n            vtkROTATE(a, j * n + ip, j * n + iq);\n          }\n          // ip and iq already shifted left by 1 unit\n          for (j = ip + 1; j <= iq - 1; j++) {\n            vtkROTATE(a, ip * n + j, j * n + iq);\n          }\n          // iq already shifted left by 1 unit\n          for (j = iq + 1; j < n; j++) {\n            vtkROTATE(a, ip * n + j, iq * n + j);\n          }\n          for (j = 0; j < n; j++) {\n            vtkROTATE(v, j * n + ip, j * n + iq);\n          }\n        }\n      }\n    }\n\n    for (ip = 0; ip < n; ip++) {\n      b[ip] += z[ip];\n      w[ip] = b[ip];\n      z[ip] = 0.0;\n    }\n  }\n\n  // this is NEVER called\n  if (i >= VTK_MAX_ROTATIONS) {\n    vtkWarningMacro('vtkMath::Jacobi: Error extracting eigenfunctions');\n    return 0;\n  }\n\n  // sort eigenfunctions: these changes do not affect accuracy\n  for (j = 0; j < n - 1; j++) {\n    // boundary incorrect\n    k = j;\n    tmp = w[k];\n    for (i = j + 1; i < n; i++) {\n      // boundary incorrect, shifted already\n      if (w[i] >= tmp || Math.abs(w[i] - tmp) < VTK_SMALL_NUMBER) {\n        // why exchange if same?\n        k = i;\n        tmp = w[k];\n      }\n    }\n    if (k !== j) {\n      w[k] = w[j];\n      w[j] = tmp;\n      swapColumnsMatrix_nxn(v, n, j, k);\n    }\n  }\n  // ensure eigenvector consistency (i.e., Jacobi can compute vectors that\n  // are negative of one another (.707,.707,0) and (-.707,-.707,0). This can\n  // reek havoc in hyperstreamline/other stuff. We will select the most\n  // positive eigenvector.\n  const ceil_half_n = (n >> 1) + (n & 1);\n\n  for (numPos = 0, i = 0; i < n * n; i++) {\n    if (v[i] >= 0.0) {\n      numPos++;\n    }\n  }\n  //    if ( numPos < ceil(double(n)/double(2.0)) )\n  if (numPos < ceil_half_n) {\n    for (i = 0; i < n; i++) {\n      v[i * n + j] *= -1.0;\n    }\n  }\n  return 1;\n}\n\nexport function matrix3x3ToQuaternion(mat_3x3, quat_4) {\n  const tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n  // on-diagonal elements\n  tmp[0] = mat_3x3[0] + mat_3x3[4] + mat_3x3[8];\n  tmp[5] = mat_3x3[0] - mat_3x3[4] - mat_3x3[8];\n  tmp[10] = -mat_3x3[0] + mat_3x3[4] - mat_3x3[8];\n  tmp[15] = -mat_3x3[0] - mat_3x3[4] + mat_3x3[8];\n\n  // off-diagonal elements\n  tmp[1] = tmp[4] = mat_3x3[7] - mat_3x3[5];\n  tmp[2] = tmp[8] = mat_3x3[2] - mat_3x3[6];\n  tmp[3] = tmp[12] = mat_3x3[3] - mat_3x3[1];\n\n  tmp[6] = tmp[9] = mat_3x3[3] + mat_3x3[1];\n  tmp[7] = tmp[13] = mat_3x3[2] + mat_3x3[6];\n  tmp[11] = tmp[14] = mat_3x3[7] + mat_3x3[5];\n\n  const eigenvectors = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  const eigenvalues = [0, 0, 0, 0];\n\n  // convert into format that JacobiN can use,\n  // then use Jacobi to find eigenvalues and eigenvectors\n  // tmp is copied because jacobiN may modify it\n  const NTemp = [...tmp];\n  jacobiN(NTemp, 4, eigenvalues, eigenvectors);\n\n  // the first eigenvector is the one we want\n  quat_4[0] = eigenvectors[0];\n  quat_4[1] = eigenvectors[4];\n  quat_4[2] = eigenvectors[8];\n  quat_4[3] = eigenvectors[12];\n}\n\nexport function multiplyQuaternion(quat_1, quat_2, quat_out) {\n  const ww = quat_1[0] * quat_2[0];\n  const wx = quat_1[0] * quat_2[1];\n  const wy = quat_1[0] * quat_2[2];\n  const wz = quat_1[0] * quat_2[3];\n\n  const xw = quat_1[1] * quat_2[0];\n  const xx = quat_1[1] * quat_2[1];\n  const xy = quat_1[1] * quat_2[2];\n  const xz = quat_1[1] * quat_2[3];\n\n  const yw = quat_1[2] * quat_2[0];\n  const yx = quat_1[2] * quat_2[1];\n  const yy = quat_1[2] * quat_2[2];\n  const yz = quat_1[2] * quat_2[3];\n\n  const zw = quat_1[3] * quat_2[0];\n  const zx = quat_1[3] * quat_2[1];\n  const zy = quat_1[3] * quat_2[2];\n  const zz = quat_1[3] * quat_2[3];\n\n  quat_out[0] = ww - xx - yy - zz;\n  quat_out[1] = wx + xw + yz - zy;\n  quat_out[2] = wy - xz + yw + zx;\n  quat_out[3] = wz + xy - yx + zw;\n}\n\nexport function orthogonalize3x3(a_3x3, out_3x3) {\n  // copy the matrix\n  for (let i = 0; i < 9; i++) {\n    out_3x3[i] = a_3x3[i];\n  }\n\n  // Pivot the matrix to improve accuracy\n  const scale = createArray(3);\n  const index = createArray(3);\n  let largest;\n\n  // Loop over rows to get implicit scaling information\n  for (let i = 0; i < 3; i++) {\n    const x1 = Math.abs(out_3x3[i * 3]);\n    const x2 = Math.abs(out_3x3[i * 3 + 1]);\n    const x3 = Math.abs(out_3x3[i * 3 + 2]);\n    largest = x2 > x1 ? x2 : x1;\n    largest = x3 > largest ? x3 : largest;\n    scale[i] = 1;\n    if (largest !== 0) {\n      scale[i] /= largest;\n    }\n  }\n\n  // first column\n  const x1 = Math.abs(out_3x3[0]) * scale[0];\n  const x2 = Math.abs(out_3x3[3]) * scale[1];\n  const x3 = Math.abs(out_3x3[6]) * scale[2];\n  index[0] = 0;\n  largest = x1;\n  if (x2 >= largest) {\n    largest = x2;\n    index[0] = 1;\n  }\n  if (x3 >= largest) {\n    index[0] = 2;\n  }\n  if (index[0] !== 0) {\n    // swap vectors\n    swapColumnsMatrix_nxn(out_3x3, 3, index[0], 0);\n    scale[index[0]] = scale[0];\n  }\n\n  // second column\n  const y2 = Math.abs(out_3x3[4]) * scale[1];\n  const y3 = Math.abs(out_3x3[7]) * scale[2];\n  index[1] = 1;\n  largest = y2;\n  if (y3 >= largest) {\n    index[1] = 2;\n    // swap vectors\n    swapColumnsMatrix_nxn(out_3x3, 3, 1, 2);\n  }\n\n  // third column\n  index[2] = 2;\n\n  // A quaternion can only describe a pure rotation, not\n  // a rotation with a flip, therefore the flip must be\n  // removed before the matrix is converted to a quaternion.\n  let flip = 0;\n  if (determinant3x3(out_3x3) < 0) {\n    flip = 1;\n    for (let i = 0; i < 9; i++) {\n      out_3x3[i] = -out_3x3[i];\n    }\n  }\n\n  // Do orthogonalization using a quaternion intermediate\n  // (this, essentially, does the orthogonalization via\n  // diagonalization of an appropriately constructed symmetric\n  // 4x4 matrix rather than by doing SVD of the 3x3 matrix)\n  const quat = createArray(4);\n  matrix3x3ToQuaternion(out_3x3, quat);\n  quaternionToMatrix3x3(quat, out_3x3);\n\n  // Put the flip back into the orthogonalized matrix.\n  if (flip) {\n    for (let i = 0; i < 9; i++) {\n      out_3x3[i] = -out_3x3[i];\n    }\n  }\n\n  // Undo the pivoting\n  if (index[1] !== 1) {\n    swapColumnsMatrix_nxn(out_3x3, 3, index[1], 1);\n  }\n  if (index[0] !== 0) {\n    swapColumnsMatrix_nxn(out_3x3, 3, index[0], 0);\n  }\n}\n\nexport function diagonalize3x3(a_3x3, w_3, v_3x3) {\n  let i;\n  let j;\n  let k;\n  let maxI;\n  let tmp;\n  let maxVal;\n\n  // a is copied because jacobiN may modify it\n  const copyA = [...a_3x3];\n\n  // diagonalize using Jacobi\n  jacobiN(copyA, 3, w_3, v_3x3);\n\n  // if all the eigenvalues are the same, return identity matrix\n  if (w_3[0] === w_3[1] && w_3[0] === w_3[2]) {\n    identity3x3(v_3x3);\n    return;\n  }\n\n  // transpose temporarily, it makes it easier to sort the eigenvectors\n  transpose3x3(v_3x3, v_3x3);\n\n  // if two eigenvalues are the same, re-orthogonalize to optimally line\n  // up the eigenvectors with the x, y, and z axes\n  for (i = 0; i < 3; i++) {\n    // two eigenvalues are the same\n    if (w_3[(i + 1) % 3] === w_3[(i + 2) % 3]) {\n      // find maximum element of the independent eigenvector\n      maxVal = Math.abs(v_3x3[i * 3]);\n      maxI = 0;\n      for (j = 1; j < 3; j++) {\n        if (maxVal < (tmp = Math.abs(v_3x3[i * 3 + j]))) {\n          maxVal = tmp;\n          maxI = j;\n        }\n      }\n      // swap the eigenvector into its proper position\n      if (maxI !== i) {\n        tmp = w_3[maxI];\n        w_3[maxI] = w_3[i];\n        w_3[i] = tmp;\n        swapRowsMatrix_nxn(v_3x3, 3, i, maxI);\n      }\n      // maximum element of eigenvector should be positive\n      if (v_3x3[maxI * 3 + maxI] < 0) {\n        v_3x3[maxI * 3] = -v_3x3[maxI * 3];\n        v_3x3[maxI * 3 + 1] = -v_3x3[maxI * 3 + 1];\n        v_3x3[maxI * 3 + 2] = -v_3x3[maxI * 3 + 2];\n      }\n\n      // re-orthogonalize the other two eigenvectors\n      j = (maxI + 1) % 3;\n      k = (maxI + 2) % 3;\n\n      v_3x3[j * 3] = 0.0;\n      v_3x3[j * 3 + 1] = 0.0;\n      v_3x3[j * 3 + 2] = 0.0;\n      v_3x3[j * 3 + j] = 1.0;\n      const vectTmp1 = cross(\n        [v_3x3[maxI * 3], v_3x3[maxI * 3 + 1], v_3x3[maxI * 3 + 2]],\n        [v_3x3[j * 3], v_3x3[j * 3 + 1], v_3x3[j * 3 + 2]],\n        []\n      );\n      normalize(vectTmp1);\n      const vectTmp2 = cross(\n        vectTmp1,\n        [v_3x3[maxI * 3], v_3x3[maxI * 3 + 1], v_3x3[maxI * 3 + 2]],\n        []\n      );\n      for (let t = 0; t < 3; t++) {\n        v_3x3[k * 3 + t] = vectTmp1[t];\n        v_3x3[j * 3 + t] = vectTmp2[t];\n      }\n\n      // transpose vectors back to columns\n      transpose3x3(v_3x3, v_3x3);\n      return;\n    }\n  }\n\n  // the three eigenvalues are different, just sort the eigenvectors\n  // to align them with the x, y, and z axes\n\n  // find the vector with the largest x element, make that vector\n  // the first vector\n  maxVal = Math.abs(v_3x3[0]);\n  maxI = 0;\n  for (i = 1; i < 3; i++) {\n    if (maxVal < (tmp = Math.abs(v_3x3[i * 3]))) {\n      maxVal = tmp;\n      maxI = i;\n    }\n  }\n  // swap eigenvalue and eigenvector\n  if (maxI !== 0) {\n    const eigenValTmp = w_3[maxI];\n    w_3[maxI] = w_3[0];\n    w_3[0] = eigenValTmp;\n    swapRowsMatrix_nxn(v_3x3, 3, maxI, 0);\n  }\n  // do the same for the y element\n  if (Math.abs(v_3x3[4]) < Math.abs(v_3x3[7])) {\n    const eigenValTmp = w_3[2];\n    w_3[2] = w_3[1];\n    w_3[1] = eigenValTmp;\n    swapRowsMatrix_nxn(v_3x3, 3, 1, 2);\n  }\n\n  // ensure that the sign of the eigenvectors is correct\n  for (i = 0; i < 2; i++) {\n    if (v_3x3[i * 3 + i] < 0) {\n      v_3x3[i * 3] = -v_3x3[i * 3];\n      v_3x3[i * 3 + 1] = -v_3x3[i * 3 + 1];\n      v_3x3[i * 3 + 2] = -v_3x3[i * 3 + 2];\n    }\n  }\n  // set sign of final eigenvector to ensure that determinant is positive\n  if (determinant3x3(v_3x3) < 0) {\n    v_3x3[6] = -v_3x3[6];\n    v_3x3[7] = -v_3x3[7];\n    v_3x3[8] = -v_3x3[8];\n  }\n\n  // transpose the eigenvectors back again\n  transpose3x3(v_3x3, v_3x3);\n}\n\nexport function singularValueDecomposition3x3(a_3x3, u_3x3, w_3, vT_3x3) {\n  let i;\n  // copy so that A can be used for U or VT without risk\n  const B = [...a_3x3];\n\n  // temporarily flip if determinant is negative\n  const d = determinant3x3(B);\n  if (d < 0) {\n    for (i = 0; i < 9; i++) {\n      B[i] = -B[i];\n    }\n  }\n\n  // orthogonalize, diagonalize, etc.\n  orthogonalize3x3(B, u_3x3);\n  transpose3x3(B, B);\n  multiply3x3_mat3(B, u_3x3, vT_3x3);\n  diagonalize3x3(vT_3x3, w_3, vT_3x3);\n  multiply3x3_mat3(u_3x3, vT_3x3, u_3x3);\n  transpose3x3(vT_3x3, vT_3x3);\n\n  // re-create the flip\n  if (d < 0) {\n    w_3[0] = -w_3[0];\n    w_3[1] = -w_3[1];\n    w_3[2] = -w_3[2];\n  }\n}\n\n/**\n * Factor linear equations Ax = b using LU decomposition A = LU. Output factorization LU is in matrix A.\n * @param {Matrix} A square matrix\n * @param {Number} index integer array of pivot indices index[0->n-1]\n * @param {Number} size matrix size\n */\nexport function luFactorLinearSystem(A, index, size) {\n  let i;\n  let j;\n  let k;\n  let largest;\n  let maxI = 0;\n  let sum;\n  let temp1;\n  let temp2;\n  const scale = createArray(size);\n\n  //\n  // Loop over rows to get implicit scaling information\n  //\n  for (i = 0; i < size; i++) {\n    for (largest = 0.0, j = 0; j < size; j++) {\n      if ((temp2 = Math.abs(A[i * size + j])) > largest) {\n        largest = temp2;\n      }\n    }\n\n    if (largest === 0.0) {\n      vtkWarningMacro('Unable to factor linear system');\n      return 0;\n    }\n    scale[i] = 1.0 / largest;\n  }\n  //\n  // Loop over all columns using Crout's method\n  //\n  for (j = 0; j < size; j++) {\n    for (i = 0; i < j; i++) {\n      sum = A[i * size + j];\n      for (k = 0; k < i; k++) {\n        sum -= A[i * size + k] * A[k * size + j];\n      }\n      A[i * size + j] = sum;\n    }\n    //\n    // Begin search for largest pivot element\n    //\n    for (largest = 0.0, i = j; i < size; i++) {\n      sum = A[i * size + j];\n      for (k = 0; k < j; k++) {\n        sum -= A[i * size + k] * A[k * size + j];\n      }\n      A[i * size + j] = sum;\n\n      if ((temp1 = scale[i] * Math.abs(sum)) >= largest) {\n        largest = temp1;\n        maxI = i;\n      }\n    }\n    //\n    // Check for row interchange\n    //\n    if (j !== maxI) {\n      for (k = 0; k < size; k++) {\n        temp1 = A[maxI * size + k];\n        A[maxI * size + k] = A[j * size + k];\n        A[j * size + k] = temp1;\n      }\n      scale[maxI] = scale[j];\n    }\n    //\n    // Divide by pivot element and perform elimination\n    //\n    index[j] = maxI;\n\n    if (Math.abs(A[j * size + j]) <= VTK_SMALL_NUMBER) {\n      vtkWarningMacro('Unable to factor linear system');\n      return 0;\n    }\n\n    if (j !== size - 1) {\n      temp1 = 1.0 / A[j * size + j];\n      for (i = j + 1; i < size; i++) {\n        A[i * size + j] *= temp1;\n      }\n    }\n  }\n  return 1;\n}\n\nexport function luSolveLinearSystem(A, index, x, size) {\n  let i;\n  let j;\n  let ii;\n  let idx;\n  let sum;\n  //\n  // Proceed with forward and backsubstitution for L and U\n  // matrices.  First, forward substitution.\n  //\n  for (ii = -1, i = 0; i < size; i++) {\n    idx = index[i];\n    sum = x[idx];\n    x[idx] = x[i];\n\n    if (ii >= 0) {\n      for (j = ii; j <= i - 1; j++) {\n        sum -= A[i * size + j] * x[j];\n      }\n    } else if (sum !== 0.0) {\n      ii = i;\n    }\n\n    x[i] = sum;\n  }\n  //\n  // Now, back substitution\n  //\n  for (i = size - 1; i >= 0; i--) {\n    sum = x[i];\n    for (j = i + 1; j < size; j++) {\n      sum -= A[i * size + j] * x[j];\n    }\n    x[i] = sum / A[i * size + i];\n  }\n}\n\nexport function solveLinearSystem(A, x, size) {\n  // if we solving something simple, just solve it\n  if (size === 2) {\n    const y = createArray(2);\n    const det = determinant2x2(A[0], A[1], A[2], A[3]);\n\n    if (det === 0.0) {\n      // Unable to solve linear system\n      return 0;\n    }\n\n    y[0] = (A[3] * x[0] - A[1] * x[1]) / det;\n    y[1] = (-(A[2] * x[0]) + A[0] * x[1]) / det;\n\n    x[0] = y[0];\n    x[1] = y[1];\n    return 1;\n  }\n\n  if (size === 1) {\n    if (A[0] === 0.0) {\n      // Unable to solve linear system\n      return 0;\n    }\n\n    x[0] /= A[0];\n    return 1;\n  }\n\n  //\n  // System of equations is not trivial, use Crout's method\n  //\n\n  // Check on allocation of working vectors\n  const index = createArray(size);\n\n  // Factor and solve matrix\n  if (luFactorLinearSystem(A, index, size) === 0) {\n    return 0;\n  }\n  luSolveLinearSystem(A, index, x, size);\n\n  return 1;\n}\n\nexport function invertMatrix(A, AI, size, index = null, column = null) {\n  const tmp1Size = index || createArray(size);\n  const tmp2Size = column || createArray(size);\n\n  // Factor matrix; then begin solving for inverse one column at a time.\n  // Note: tmp1Size returned value is used later, tmp2Size is just working\n  // memory whose values are not used in LUSolveLinearSystem\n  if (luFactorLinearSystem(A, tmp1Size, size, tmp2Size) === 0) {\n    return 0;\n  }\n\n  for (let j = 0; j < size; j++) {\n    for (let i = 0; i < size; i++) {\n      tmp2Size[i] = 0.0;\n    }\n    tmp2Size[j] = 1.0;\n\n    luSolveLinearSystem(A, tmp1Size, tmp2Size, size);\n\n    for (let i = 0; i < size; i++) {\n      AI[i * size + j] = tmp2Size[i];\n    }\n  }\n\n  return 1;\n}\n\nexport function estimateMatrixCondition(A, size) {\n  let minValue = +Number.MAX_VALUE;\n  let maxValue = -Number.MAX_VALUE;\n\n  // find the maximum value\n  for (let i = 0; i < size; i++) {\n    for (let j = i; j < size; j++) {\n      if (Math.abs(A[i * size + j]) > maxValue) {\n        maxValue = Math.abs(A[i * size + j]);\n      }\n    }\n  }\n\n  // find the minimum diagonal value\n  for (let i = 0; i < size; i++) {\n    if (Math.abs(A[i * size + i]) < minValue) {\n      minValue = Math.abs(A[i * size + i]);\n    }\n  }\n\n  if (minValue === 0.0) {\n    return Number.MAX_VALUE;\n  }\n  return maxValue / minValue;\n}\n\nexport function jacobi(a_3x3, w, v) {\n  return jacobiN(a_3x3, 3, w, v);\n}\n\nexport function solveHomogeneousLeastSquares(numberOfSamples, xt, xOrder, mt) {\n  // check dimensional consistency\n  if (numberOfSamples < xOrder) {\n    vtkWarningMacro('Insufficient number of samples. Underdetermined.');\n    return 0;\n  }\n\n  let i;\n  let j;\n  let k;\n\n  // set up intermediate variables\n  // Allocate matrix to hold X times transpose of X\n  const XXt = createArray(xOrder * xOrder); // size x by x\n  // Allocate the array of eigenvalues and eigenvectors\n  const eigenvals = createArray(xOrder);\n  const eigenvecs = createArray(xOrder * xOrder);\n\n  // Calculate XXt upper half only, due to symmetry\n  for (k = 0; k < numberOfSamples; k++) {\n    for (i = 0; i < xOrder; i++) {\n      for (j = i; j < xOrder; j++) {\n        XXt[i * xOrder + j] += xt[k * xOrder + i] * xt[k * xOrder + j];\n      }\n    }\n  }\n\n  // now fill in the lower half of the XXt matrix\n  for (i = 0; i < xOrder; i++) {\n    for (j = 0; j < i; j++) {\n      XXt[i * xOrder + j] = XXt[j * xOrder + i];\n    }\n  }\n\n  // Compute the eigenvectors and eigenvalues\n  jacobiN(XXt, xOrder, eigenvals, eigenvecs);\n\n  // Smallest eigenval is at the end of the list (xOrder-1), and solution is\n  // corresponding eigenvec.\n  for (i = 0; i < xOrder; i++) {\n    mt[i] = eigenvecs[i * xOrder + xOrder - 1];\n  }\n\n  return 1;\n}\n\nexport function solveLeastSquares(\n  numberOfSamples,\n  xt,\n  xOrder,\n  yt,\n  yOrder,\n  mt,\n  checkHomogeneous = true\n) {\n  // check dimensional consistency\n  if (numberOfSamples < xOrder || numberOfSamples < yOrder) {\n    vtkWarningMacro('Insufficient number of samples. Underdetermined.');\n    return 0;\n  }\n\n  const homogenFlags = createArray(yOrder);\n  let allHomogeneous = 1;\n  let hmt;\n  let homogRC = 0;\n  let i;\n  let j;\n  let k;\n  let someHomogeneous = 0;\n\n  // Ok, first init some flags check and see if all the systems are homogeneous\n  if (checkHomogeneous) {\n    // If Y' is zero, it's a homogeneous system and can't be solved via\n    // the pseudoinverse method. Detect this case, warn the user, and\n    // invoke SolveHomogeneousLeastSquares instead. Note that it doesn't\n    // really make much sense for yOrder to be greater than one in this case,\n    // since that's just yOrder occurrences of a 0 vector on the RHS, but\n    // we allow it anyway. N\n\n    // Initialize homogeneous flags on a per-right-hand-side basis\n    for (j = 0; j < yOrder; j++) {\n      homogenFlags[j] = 1;\n    }\n    for (i = 0; i < numberOfSamples; i++) {\n      for (j = 0; j < yOrder; j++) {\n        if (Math.abs(yt[i * yOrder + j]) > VTK_SMALL_NUMBER) {\n          allHomogeneous = 0;\n          homogenFlags[j] = 0;\n        }\n      }\n    }\n\n    // If we've got one system, and it's homogeneous, do it and bail out quickly.\n    if (allHomogeneous && yOrder === 1) {\n      vtkWarningMacro(\n        'Detected homogeneous system (Y=0), calling SolveHomogeneousLeastSquares()'\n      );\n      return solveHomogeneousLeastSquares(numberOfSamples, xt, xOrder, mt);\n    }\n\n    // Ok, we've got more than one system of equations.\n    // Figure out if we need to calculate the homogeneous equation solution for\n    // any of them.\n    if (allHomogeneous) {\n      someHomogeneous = 1;\n    } else {\n      for (j = 0; j < yOrder; j++) {\n        if (homogenFlags[j]) {\n          someHomogeneous = 1;\n        }\n      }\n    }\n  }\n\n  // If necessary, solve the homogeneous problem\n  if (someHomogeneous) {\n    // hmt is the homogeneous equation version of mt, the general solution.\n    // hmt should be xOrder x yOrder, but since we are solving only the homogeneous part, here it is xOrder x 1\n    hmt = createArray(xOrder);\n\n    // Ok, solve the homogeneous problem\n    homogRC = solveHomogeneousLeastSquares(numberOfSamples, xt, xOrder, hmt);\n  }\n\n  // set up intermediate variables\n  const XXt = createArray(xOrder * xOrder); // size x by x\n  const XXtI = createArray(xOrder * xOrder); // size x by x\n  const XYt = createArray(xOrder * yOrder); // size x by y\n\n  // first find the pseudoinverse matrix\n  for (k = 0; k < numberOfSamples; k++) {\n    for (i = 0; i < xOrder; i++) {\n      // first calculate the XXt matrix, only do the upper half (symmetrical)\n      for (j = i; j < xOrder; j++) {\n        XXt[i * xOrder + j] += xt[k * xOrder + i] * xt[k * xOrder + j];\n      }\n\n      // now calculate the XYt matrix\n      for (j = 0; j < yOrder; j++) {\n        XYt[i * yOrder + j] += xt[k * xOrder + i] * yt[k * yOrder + j];\n      }\n    }\n  }\n\n  // now fill in the lower half of the XXt matrix\n  for (i = 0; i < xOrder; i++) {\n    for (j = 0; j < i; j++) {\n      XXt[i * xOrder + j] = XXt[j * xOrder + i];\n    }\n  }\n\n  const successFlag = invertMatrix(XXt, XXtI, xOrder);\n\n  // next get the inverse of XXt\n  if (successFlag) {\n    for (i = 0; i < xOrder; i++) {\n      for (j = 0; j < yOrder; j++) {\n        mt[i * yOrder + j] = 0.0;\n        for (k = 0; k < xOrder; k++) {\n          mt[i * yOrder + j] += XXtI[i * xOrder + k] * XYt[k * yOrder + j];\n        }\n      }\n    }\n  }\n\n  // Fix up any of the solutions that correspond to the homogeneous equation\n  // problem.\n  if (someHomogeneous) {\n    for (j = 0; j < yOrder; j++) {\n      if (homogenFlags[j]) {\n        // Fix this one\n        for (i = 0; i < xOrder; i++) {\n          mt[i * yOrder + j] = hmt[i * yOrder];\n        }\n      }\n    }\n  }\n\n  if (someHomogeneous) {\n    return homogRC && successFlag;\n  }\n\n  return successFlag;\n}\n\nexport function hex2float(hexStr, outFloatArray = [0, 0.5, 1]) {\n  switch (hexStr.length) {\n    case 3: // abc => #aabbcc\n      outFloatArray[0] = (parseInt(hexStr[0], 16) * 17) / 255;\n      outFloatArray[1] = (parseInt(hexStr[1], 16) * 17) / 255;\n      outFloatArray[2] = (parseInt(hexStr[2], 16) * 17) / 255;\n      return outFloatArray;\n    case 4: // #abc => #aabbcc\n      outFloatArray[0] = (parseInt(hexStr[1], 16) * 17) / 255;\n      outFloatArray[1] = (parseInt(hexStr[2], 16) * 17) / 255;\n      outFloatArray[2] = (parseInt(hexStr[3], 16) * 17) / 255;\n      return outFloatArray;\n    case 6: // ab01df => #ab01df\n      outFloatArray[0] = parseInt(hexStr.substr(0, 2), 16) / 255;\n      outFloatArray[1] = parseInt(hexStr.substr(2, 2), 16) / 255;\n      outFloatArray[2] = parseInt(hexStr.substr(4, 2), 16) / 255;\n      return outFloatArray;\n    case 7: // #ab01df\n      outFloatArray[0] = parseInt(hexStr.substr(1, 2), 16) / 255;\n      outFloatArray[1] = parseInt(hexStr.substr(3, 2), 16) / 255;\n      outFloatArray[2] = parseInt(hexStr.substr(5, 2), 16) / 255;\n      return outFloatArray;\n    case 9: // #ab01df00\n      outFloatArray[0] = parseInt(hexStr.substr(1, 2), 16) / 255;\n      outFloatArray[1] = parseInt(hexStr.substr(3, 2), 16) / 255;\n      outFloatArray[2] = parseInt(hexStr.substr(5, 2), 16) / 255;\n      outFloatArray[3] = parseInt(hexStr.substr(7, 2), 16) / 255;\n      return outFloatArray;\n    default:\n      return outFloatArray;\n  }\n}\n\nexport function rgb2hsv(rgb, hsv) {\n  let h;\n  let s;\n  const [r, g, b] = rgb;\n  const onethird = 1.0 / 3.0;\n  const onesixth = 1.0 / 6.0;\n  const twothird = 2.0 / 3.0;\n\n  let cmax = r;\n  let cmin = r;\n\n  if (g > cmax) {\n    cmax = g;\n  } else if (g < cmin) {\n    cmin = g;\n  }\n  if (b > cmax) {\n    cmax = b;\n  } else if (b < cmin) {\n    cmin = b;\n  }\n  const v = cmax;\n\n  if (v > 0.0) {\n    s = (cmax - cmin) / cmax;\n  } else {\n    s = 0.0;\n  }\n  if (s > 0) {\n    if (r === cmax) {\n      h = (onesixth * (g - b)) / (cmax - cmin);\n    } else if (g === cmax) {\n      h = onethird + (onesixth * (b - r)) / (cmax - cmin);\n    } else {\n      h = twothird + (onesixth * (r - g)) / (cmax - cmin);\n    }\n    if (h < 0.0) {\n      h += 1.0;\n    }\n  } else {\n    h = 0.0;\n  }\n\n  // Set the values back to the array\n  hsv[0] = h;\n  hsv[1] = s;\n  hsv[2] = v;\n}\n\nexport function hsv2rgb(hsv, rgb) {\n  const [h, s, v] = hsv;\n  const onethird = 1.0 / 3.0;\n  const onesixth = 1.0 / 6.0;\n  const twothird = 2.0 / 3.0;\n  const fivesixth = 5.0 / 6.0;\n  let r;\n  let g;\n  let b;\n\n  // compute RGB from HSV\n  if (h > onesixth && h <= onethird) {\n    // green/red\n    g = 1.0;\n    r = (onethird - h) / onesixth;\n    b = 0.0;\n  } else if (h > onethird && h <= 0.5) {\n    // green/blue\n    g = 1.0;\n    b = (h - onethird) / onesixth;\n    r = 0.0;\n  } else if (h > 0.5 && h <= twothird) {\n    // blue/green\n    b = 1.0;\n    g = (twothird - h) / onesixth;\n    r = 0.0;\n  } else if (h > twothird && h <= fivesixth) {\n    // blue/red\n    b = 1.0;\n    r = (h - twothird) / onesixth;\n    g = 0.0;\n  } else if (h > fivesixth && h <= 1.0) {\n    // red/blue\n    r = 1.0;\n    b = (1.0 - h) / onesixth;\n    g = 0.0;\n  } else {\n    // red/green\n    r = 1.0;\n    g = h / onesixth;\n    b = 0.0;\n  }\n\n  // add Saturation to the equation.\n  r = s * r + (1.0 - s);\n  g = s * g + (1.0 - s);\n  b = s * b + (1.0 - s);\n\n  r *= v;\n  g *= v;\n  b *= v;\n\n  // Assign back to the array\n  rgb[0] = r;\n  rgb[1] = g;\n  rgb[2] = b;\n}\n\nexport function lab2xyz(lab, xyz) {\n  // LAB to XYZ\n  const [L, a, b] = lab;\n  let var_Y = (L + 16) / 116;\n  let var_X = a / 500 + var_Y;\n  let var_Z = var_Y - b / 200;\n\n  if (var_Y ** 3 > 0.008856) {\n    var_Y **= 3;\n  } else {\n    var_Y = (var_Y - 16.0 / 116.0) / 7.787;\n  }\n\n  if (var_X ** 3 > 0.008856) {\n    var_X **= 3;\n  } else {\n    var_X = (var_X - 16.0 / 116.0) / 7.787;\n  }\n\n  if (var_Z ** 3 > 0.008856) {\n    var_Z **= 3;\n  } else {\n    var_Z = (var_Z - 16.0 / 116.0) / 7.787;\n  }\n  const ref_X = 0.9505;\n  const ref_Y = 1.0;\n  const ref_Z = 1.089;\n  xyz[0] = ref_X * var_X; // ref_X = 0.9505  Observer= 2 deg Illuminant= D65\n  xyz[1] = ref_Y * var_Y; // ref_Y = 1.000\n  xyz[2] = ref_Z * var_Z; // ref_Z = 1.089\n}\n\nexport function xyz2lab(xyz, lab) {\n  const [x, y, z] = xyz;\n  const ref_X = 0.9505;\n  const ref_Y = 1.0;\n  const ref_Z = 1.089;\n  let var_X = x / ref_X; // ref_X = 0.9505  Observer= 2 deg, Illuminant= D65\n  let var_Y = y / ref_Y; // ref_Y = 1.000\n  let var_Z = z / ref_Z; // ref_Z = 1.089\n\n  if (var_X > 0.008856) var_X **= 1.0 / 3.0;\n  else var_X = 7.787 * var_X + 16.0 / 116.0;\n  if (var_Y > 0.008856) var_Y **= 1.0 / 3.0;\n  else var_Y = 7.787 * var_Y + 16.0 / 116.0;\n  if (var_Z > 0.008856) var_Z **= 1.0 / 3.0;\n  else var_Z = 7.787 * var_Z + 16.0 / 116.0;\n\n  lab[0] = 116 * var_Y - 16;\n  lab[1] = 500 * (var_X - var_Y);\n  lab[2] = 200 * (var_Y - var_Z);\n}\n\nexport function xyz2rgb(xyz, rgb) {\n  const [x, y, z] = xyz;\n  let r = x * 3.2406 + y * -1.5372 + z * -0.4986;\n  let g = x * -0.9689 + y * 1.8758 + z * 0.0415;\n  let b = x * 0.0557 + y * -0.204 + z * 1.057;\n\n  // The following performs a \"gamma correction\" specified by the sRGB color\n  // space.  sRGB is defined by a canonical definition of a display monitor and\n  // has been standardized by the International Electrotechnical Commission (IEC\n  // 61966-2-1).  The nonlinearity of the correction is designed to make the\n  // colors more perceptually uniform.  This color space has been adopted by\n  // several applications including Adobe Photoshop and Microsoft Windows color\n  // management.  OpenGL is agnostic on its RGB color space, but it is reasonable\n  // to assume it is close to this one.\n  if (r > 0.0031308) r = 1.055 * r ** (1 / 2.4) - 0.055;\n  else r *= 12.92;\n  if (g > 0.0031308) g = 1.055 * g ** (1 / 2.4) - 0.055;\n  else g *= 12.92;\n  if (b > 0.0031308) b = 1.055 * b ** (1 / 2.4) - 0.055;\n  else b *= 12.92;\n\n  // Clip colors. ideally we would do something that is perceptually closest\n  // (since we can see colors outside of the display gamut), but this seems to\n  // work well enough.\n  let maxVal = r;\n  if (maxVal < g) maxVal = g;\n  if (maxVal < b) maxVal = b;\n  if (maxVal > 1.0) {\n    r /= maxVal;\n    g /= maxVal;\n    b /= maxVal;\n  }\n  if (r < 0) r = 0;\n  if (g < 0) g = 0;\n  if (b < 0) b = 0;\n\n  // Push values back to array\n  rgb[0] = r;\n  rgb[1] = g;\n  rgb[2] = b;\n}\n\nexport function rgb2xyz(rgb, xyz) {\n  let [r, g, b] = rgb;\n  // The following performs a \"gamma correction\" specified by the sRGB color\n  // space.  sRGB is defined by a canonical definition of a display monitor and\n  // has been standardized by the International Electrotechnical Commission (IEC\n  // 61966-2-1).  The nonlinearity of the correction is designed to make the\n  // colors more perceptually uniform.  This color space has been adopted by\n  // several applications including Adobe Photoshop and Microsoft Windows color\n  // management.  OpenGL is agnostic on its RGB color space, but it is reasonable\n  // to assume it is close to this one.\n  if (r > 0.04045) r = ((r + 0.055) / 1.055) ** 2.4;\n  else r /= 12.92;\n  if (g > 0.04045) g = ((g + 0.055) / 1.055) ** 2.4;\n  else g /= 12.92;\n  if (b > 0.04045) b = ((b + 0.055) / 1.055) ** 2.4;\n  else b /= 12.92;\n\n  // Observer. = 2 deg, Illuminant = D65\n  xyz[0] = r * 0.4124 + g * 0.3576 + b * 0.1805;\n  xyz[1] = r * 0.2126 + g * 0.7152 + b * 0.0722;\n  xyz[2] = r * 0.0193 + g * 0.1192 + b * 0.9505;\n}\n\nexport function rgb2lab(rgb, lab) {\n  const xyz = [0, 0, 0];\n  rgb2xyz(rgb, xyz);\n  xyz2lab(xyz, lab);\n}\n\nexport function lab2rgb(lab, rgb) {\n  const xyz = [0, 0, 0];\n  lab2xyz(lab, xyz);\n  xyz2rgb(xyz, rgb);\n}\n\nexport function uninitializeBounds(bounds) {\n  bounds[0] = 1.0;\n  bounds[1] = -1.0;\n  bounds[2] = 1.0;\n  bounds[3] = -1.0;\n  bounds[4] = 1.0;\n  bounds[5] = -1.0;\n  return bounds;\n}\n\nexport function areBoundsInitialized(bounds) {\n  return !(bounds[1] - bounds[0] < 0.0);\n}\n\nexport function computeBoundsFromPoints(point1, point2, bounds) {\n  bounds[0] = Math.min(point1[0], point2[0]);\n  bounds[1] = Math.max(point1[0], point2[0]);\n  bounds[2] = Math.min(point1[1], point2[1]);\n  bounds[3] = Math.max(point1[1], point2[1]);\n  bounds[4] = Math.min(point1[2], point2[2]);\n  bounds[5] = Math.max(point1[2], point2[2]);\n  return bounds;\n}\n\nexport function clampValue(value, minValue, maxValue) {\n  if (value < minValue) {\n    return minValue;\n  }\n  if (value > maxValue) {\n    return maxValue;\n  }\n  return value;\n}\n\nexport function clampVector(vector, minVector, maxVector, out = [0, 0, 0]) {\n  out[0] = clampValue(vector[0], minVector[0], maxVector[0]);\n  out[1] = clampValue(vector[1], minVector[1], maxVector[1]);\n  out[2] = clampValue(vector[2], minVector[2], maxVector[2]);\n\n  return out;\n}\n\nexport function clampAndNormalizeValue(value, range) {\n  let result = 0;\n  if (range[0] !== range[1]) {\n    // clamp\n    if (value < range[0]) {\n      result = range[0];\n    } else if (value > range[1]) {\n      result = range[1];\n    } else {\n      result = value;\n    }\n    // normalize\n    result = (result - range[0]) / (range[1] - range[0]);\n  }\n\n  return result;\n}\n\nexport const getScalarTypeFittingRange = notImplemented(\n  'GetScalarTypeFittingRange'\n);\nexport const getAdjustedScalarRange = notImplemented('GetAdjustedScalarRange');\n\nexport function extentIsWithinOtherExtent(extent1, extent2) {\n  if (!extent1 || !extent2) {\n    return 0;\n  }\n\n  for (let i = 0; i < 6; i += 2) {\n    if (\n      extent1[i] < extent2[i] ||\n      extent1[i] > extent2[i + 1] ||\n      extent1[i + 1] < extent2[i] ||\n      extent1[i + 1] > extent2[i + 1]\n    ) {\n      return 0;\n    }\n  }\n\n  return 1;\n}\n\nexport function boundsIsWithinOtherBounds(bounds1_6, bounds2_6, delta_3) {\n  if (!bounds1_6 || !bounds2_6) {\n    return 0;\n  }\n  for (let i = 0; i < 6; i += 2) {\n    if (\n      bounds1_6[i] + delta_3[i / 2] < bounds2_6[i] ||\n      bounds1_6[i] - delta_3[i / 2] > bounds2_6[i + 1] ||\n      bounds1_6[i + 1] + delta_3[i / 2] < bounds2_6[i] ||\n      bounds1_6[i + 1] - delta_3[i / 2] > bounds2_6[i + 1]\n    ) {\n      return 0;\n    }\n  }\n  return 1;\n}\n\nexport function pointIsWithinBounds(point_3, bounds_6, delta_3) {\n  if (!point_3 || !bounds_6 || !delta_3) {\n    return 0;\n  }\n  for (let i = 0; i < 3; i++) {\n    if (\n      point_3[i] + delta_3[i] < bounds_6[2 * i] ||\n      point_3[i] - delta_3[i] > bounds_6[2 * i + 1]\n    ) {\n      return 0;\n    }\n  }\n  return 1;\n}\n\nexport function solve3PointCircle(p1, p2, p3, center) {\n  const v21 = createArray(3);\n  const v32 = createArray(3);\n  const v13 = createArray(3);\n  const v12 = createArray(3);\n  const v23 = createArray(3);\n  const v31 = createArray(3);\n\n  for (let i = 0; i < 3; ++i) {\n    v21[i] = p1[i] - p2[i];\n    v32[i] = p2[i] - p3[i];\n    v13[i] = p3[i] - p1[i];\n    v12[i] = -v21[i];\n    v23[i] = -v32[i];\n    v31[i] = -v13[i];\n  }\n\n  const norm12 = norm(v12);\n  const norm23 = norm(v23);\n  const norm13 = norm(v13);\n\n  const crossv21v32 = createArray(3);\n  cross(v21, v32, crossv21v32);\n  const normCross = norm(crossv21v32);\n\n  const radius = (norm12 * norm23 * norm13) / (2 * normCross);\n\n  const normCross22 = 2 * normCross * normCross;\n  const alpha = (norm23 * norm23 * dot(v21, v31)) / normCross22;\n  const beta = (norm13 * norm13 * dot(v12, v32)) / normCross22;\n  const gamma = (norm12 * norm12 * dot(v13, v23)) / normCross22;\n\n  for (let i = 0; i < 3; ++i) {\n    center[i] = alpha * p1[i] + beta * p2[i] + gamma * p3[i];\n  }\n  return radius;\n}\n\nexport const inf = Infinity;\nexport const negInf = -Infinity;\n\nexport const isInf = (value) => !Number.isFinite(value);\nexport const { isFinite, isNaN } = Number;\nexport const isNan = isNaN;\n\n// JavaScript - add-on ----------------------\n\nexport function createUninitializedBounds() {\n  return [].concat([\n    Number.MAX_VALUE,\n    -Number.MAX_VALUE, // X\n    Number.MAX_VALUE,\n    -Number.MAX_VALUE, // Y\n    Number.MAX_VALUE,\n    -Number.MAX_VALUE, // Z\n  ]);\n}\n\nexport function getMajorAxisIndex(vector) {\n  let maxValue = -1;\n  let axisIndex = -1;\n  for (let i = 0; i < vector.length; i++) {\n    const value = Math.abs(vector[i]);\n    if (value > maxValue) {\n      axisIndex = i;\n      maxValue = value;\n    }\n  }\n\n  return axisIndex;\n}\n\nexport function floatToHex2(value) {\n  const integer = Math.floor(value * 255);\n  if (integer > 15) {\n    return integer.toString(16);\n  }\n  return `0${integer.toString(16)}`;\n}\n\nexport function floatRGB2HexCode(rgbArray, prefix = '#') {\n  return `${prefix}${rgbArray.map(floatToHex2).join('')}`;\n}\n\nfunction floatToChar(f) {\n  return Math.round(f * 255);\n}\n\nexport function float2CssRGBA(rgbArray) {\n  if (rgbArray.length === 3) {\n    return `rgb(${rgbArray.map(floatToChar).join(', ')})`;\n  }\n  return `rgba(${floatToChar(rgbArray[0] || 0)}, ${floatToChar(\n    rgbArray[1] || 0\n  )}, ${floatToChar(rgbArray[2] || 0)}, ${rgbArray[3] || 0})`;\n}\n\n// ----------------------------------------------------------------------------\n// Only Static API\n// ----------------------------------------------------------------------------\n\nexport default {\n  Pi,\n  radiansFromDegrees,\n  degreesFromRadians,\n  round,\n  floor,\n  ceil,\n  ceilLog2,\n  min,\n  max,\n  arrayMin,\n  arrayMax,\n  arrayRange,\n  isPowerOfTwo,\n  nearestPowerOfTwo,\n  factorial,\n  binomial,\n  beginCombination,\n  nextCombination,\n  randomSeed,\n  getSeed,\n  random,\n  gaussian,\n  add,\n  subtract,\n  multiplyScalar,\n  multiplyScalar2D,\n  multiplyAccumulate,\n  multiplyAccumulate2D,\n  dot,\n  outer,\n  cross,\n  norm,\n  normalize,\n  perpendiculars,\n  projectVector,\n  projectVector2D,\n  distance2BetweenPoints,\n  angleBetweenVectors,\n  gaussianAmplitude,\n  gaussianWeight,\n  dot2D,\n  outer2D,\n  norm2D,\n  normalize2D,\n  determinant2x2,\n  LUFactor3x3,\n  LUSolve3x3,\n  linearSolve3x3,\n  multiply3x3_vect3,\n  multiply3x3_mat3,\n  multiplyMatrix,\n  transpose3x3,\n  invert3x3,\n  identity3x3,\n  identity,\n  determinant3x3,\n  quaternionToMatrix3x3,\n  areEquals,\n  areMatricesEqual,\n  roundNumber,\n  roundVector,\n  matrix3x3ToQuaternion,\n  multiplyQuaternion,\n  orthogonalize3x3,\n  diagonalize3x3,\n  singularValueDecomposition3x3,\n  solveLinearSystem,\n  invertMatrix,\n  luFactorLinearSystem,\n  luSolveLinearSystem,\n  estimateMatrixCondition,\n  jacobi,\n  jacobiN,\n  solveHomogeneousLeastSquares,\n  solveLeastSquares,\n  hex2float,\n  rgb2hsv,\n  hsv2rgb,\n  lab2xyz,\n  xyz2lab,\n  xyz2rgb,\n  rgb2xyz,\n  rgb2lab,\n  lab2rgb,\n  uninitializeBounds,\n  areBoundsInitialized,\n  computeBoundsFromPoints,\n  clampValue,\n  clampVector,\n  clampAndNormalizeValue,\n  getScalarTypeFittingRange,\n  getAdjustedScalarRange,\n  extentIsWithinOtherExtent,\n  boundsIsWithinOtherBounds,\n  pointIsWithinBounds,\n  solve3PointCircle,\n  inf,\n  negInf,\n  isInf,\n  isNan: isNaN,\n  isNaN,\n  isFinite,\n\n  // JS add-on\n  createUninitializedBounds,\n  getMajorAxisIndex,\n  floatToHex2,\n  floatRGB2HexCode,\n  float2CssRGBA,\n};\n"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AAEA,MAAM;EAAEC,aAAF;EAAiBC;AAAjB,IAAqCF,KAA3C,C,CAEA;;AACA;;AACA;;AACA;;AACA;AACA;;AACA,IAAIG,eAAe,GAAG,CAAtB;AACA,MAAMC,iBAAiB,GAAG,EAA1B;AACA,MAAMC,gBAAgB,GAAG,OAAzB;;AAEA,SAASC,cAAT,CAAwBC,MAAxB,EAAgC;EAC9B,OAAO,MAAMN,aAAa,CAAE,YAAWM,MAAO,oBAApB,CAA1B;AACD,C,CAED;;;AACA,SAASC,kBAAT,CAA4BC,MAA5B,EAAoCC,CAApC,EAAuCC,IAAvC,EAA6CC,IAA7C,EAAmD;EACjD,IAAIC,GAAJ;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;IAC1BD,GAAG,GAAGJ,MAAM,CAACE,IAAI,GAAGD,CAAP,GAAWI,CAAZ,CAAZ;IACAL,MAAM,CAACE,IAAI,GAAGD,CAAP,GAAWI,CAAZ,CAAN,GAAuBL,MAAM,CAACG,IAAI,GAAGF,CAAP,GAAWI,CAAZ,CAA7B;IACAL,MAAM,CAACG,IAAI,GAAGF,CAAP,GAAWI,CAAZ,CAAN,GAAuBD,GAAvB;EACD;AACF,C,CAED;;;AACA,SAASE,qBAAT,CAA+BN,MAA/B,EAAuCC,CAAvC,EAA0CM,OAA1C,EAAmDC,OAAnD,EAA4D;EAC1D,IAAIJ,GAAJ;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;IAC1BD,GAAG,GAAGJ,MAAM,CAACK,CAAC,GAAGJ,CAAJ,GAAQM,OAAT,CAAZ;IACAP,MAAM,CAACK,CAAC,GAAGJ,CAAJ,GAAQM,OAAT,CAAN,GAA0BP,MAAM,CAACK,CAAC,GAAGJ,CAAJ,GAAQO,OAAT,CAAhC;IACAR,MAAM,CAACK,CAAC,GAAGJ,CAAJ,GAAQO,OAAT,CAAN,GAA0BJ,GAA1B;EACD;AACF,C,CAED;AACA;AACA;;;AAEA,OAAO,SAASK,WAAT,GAA+B;EAAA,IAAVC,IAAU,uEAAH,CAAG;EACpC;EACA,OAAOC,KAAK,CAACD,IAAD,CAAL,CAAYE,IAAZ,CAAiB,CAAjB,CAAP;AACD;AAED,OAAO,MAAMC,EAAE,GAAG,MAAMC,IAAI,CAACC,EAAtB;AAEP,OAAO,SAASC,kBAAT,CAA4BC,GAA5B,EAAiC;EACtC,OAAQA,GAAG,GAAG,GAAP,GAAcH,IAAI,CAACC,EAA1B;AACD;AAED,OAAO,SAASG,kBAAT,CAA4BC,GAA5B,EAAiC;EACtC,OAAQA,GAAG,GAAG,GAAP,GAAcL,IAAI,CAACC,EAA1B;AACD;AAED,OAAO,MAAM;EAAEK,KAAF;EAASC,KAAT;EAAgBC,IAAhB;EAAsBC,GAAtB;EAA2BC;AAA3B,IAAmCV,IAAzC;AAEP,OAAO,SAASW,QAAT,CAAkBC,GAAlB,EAA+C;EAAA,IAAxBC,MAAwB,uEAAf,CAAe;EAAA,IAAZC,MAAY,uEAAH,CAAG;EACpD,IAAIC,QAAQ,GAAGC,QAAf;;EACA,KAAK,IAAIzB,CAAC,GAAGsB,MAAR,EAAgBI,GAAG,GAAGL,GAAG,CAACM,MAA/B,EAAuC3B,CAAC,GAAG0B,GAA3C,EAAgD1B,CAAC,IAAIuB,MAArD,EAA6D;IAC3D,IAAIF,GAAG,CAACrB,CAAD,CAAH,GAASwB,QAAb,EAAuB;MACrBA,QAAQ,GAAGH,GAAG,CAACrB,CAAD,CAAd;IACD;EACF;;EAED,OAAOwB,QAAP;AACD;AAED,OAAO,SAASI,QAAT,CAAkBP,GAAlB,EAA+C;EAAA,IAAxBC,MAAwB,uEAAf,CAAe;EAAA,IAAZC,MAAY,uEAAH,CAAG;EACpD,IAAIM,QAAQ,GAAG,CAACJ,QAAhB;;EACA,KAAK,IAAIzB,CAAC,GAAGsB,MAAR,EAAgBI,GAAG,GAAGL,GAAG,CAACM,MAA/B,EAAuC3B,CAAC,GAAG0B,GAA3C,EAAgD1B,CAAC,IAAIuB,MAArD,EAA6D;IAC3D,IAAIM,QAAQ,GAAGR,GAAG,CAACrB,CAAD,CAAlB,EAAuB;MACrB6B,QAAQ,GAAGR,GAAG,CAACrB,CAAD,CAAd;IACD;EACF;;EAED,OAAO6B,QAAP;AACD;AAED,OAAO,SAASC,UAAT,CAAoBT,GAApB,EAAiD;EAAA,IAAxBC,MAAwB,uEAAf,CAAe;EAAA,IAAZC,MAAY,uEAAH,CAAG;EACtD,IAAIC,QAAQ,GAAGC,QAAf;EACA,IAAII,QAAQ,GAAG,CAACJ,QAAhB;;EACA,KAAK,IAAIzB,CAAC,GAAGsB,MAAR,EAAgBI,GAAG,GAAGL,GAAG,CAACM,MAA/B,EAAuC3B,CAAC,GAAG0B,GAA3C,EAAgD1B,CAAC,IAAIuB,MAArD,EAA6D;IAC3D,IAAIF,GAAG,CAACrB,CAAD,CAAH,GAASwB,QAAb,EAAuB;MACrBA,QAAQ,GAAGH,GAAG,CAACrB,CAAD,CAAd;IACD;;IACD,IAAI6B,QAAQ,GAAGR,GAAG,CAACrB,CAAD,CAAlB,EAAuB;MACrB6B,QAAQ,GAAGR,GAAG,CAACrB,CAAD,CAAd;IACD;EACF;;EAED,OAAO,CAACwB,QAAD,EAAWK,QAAX,CAAP;AACD;AAED,OAAO,MAAME,QAAQ,GAAGvC,cAAc,CAAC,UAAD,CAA/B;AACP,OAAO,MAAMwC,SAAS,GAAGxC,cAAc,CAAC,WAAD,CAAhC;AAEP,OAAO,SAASyC,iBAAT,CAA2BC,EAA3B,EAA+B;EACpC,IAAIC,CAAC,GAAG,CAAR;;EACA,OAAOA,CAAC,GAAGD,EAAX,EAAe;IACbC,CAAC,IAAI,CAAL;EACD;;EACD,OAAOA,CAAP;AACD;AAED,OAAO,SAASC,YAAT,CAAsBC,CAAtB,EAAyB;EAC9B,OAAOA,CAAC,KAAKJ,iBAAiB,CAACI,CAAD,CAA9B;AACD;AAED,OAAO,SAASC,QAAT,CAAkBC,CAAlB,EAAqB3C,CAArB,EAAwB;EAC7B,IAAI4C,CAAC,GAAG,CAAR;;EACA,KAAK,IAAIxC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,CAArB,EAAwB,EAAEI,CAA1B,EAA6B;IAC3BwC,CAAC,IAAI,CAACD,CAAC,GAAGvC,CAAJ,GAAQ,CAAT,IAAcA,CAAnB;EACD;;EACD,OAAOS,IAAI,CAACO,KAAL,CAAWwB,CAAX,CAAP;AACD;AAED,OAAO,SAASC,gBAAT,CAA0BF,CAA1B,EAA6B3C,CAA7B,EAAgC;EACrC,IAAI2C,CAAC,GAAG3C,CAAR,EAAW;IACT,OAAO,CAAP;EACD;;EAED,MAAM4C,CAAC,GAAGpC,WAAW,CAACR,CAAD,CAArB;;EACA,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuB,EAAEI,CAAzB,EAA4B;IAC1BwC,CAAC,CAACxC,CAAD,CAAD,GAAOA,CAAP;EACD;;EACD,OAAOwC,CAAP;AACD;AAED,OAAO,SAASE,eAAT,CAAyBH,CAAzB,EAA4B3C,CAA5B,EAA+B4C,CAA/B,EAAkC;EACvC,IAAIG,MAAM,GAAG,CAAb;;EACA,KAAK,IAAI3C,CAAC,GAAGJ,CAAC,GAAG,CAAjB,EAAoBI,CAAC,IAAI,CAAzB,EAA4B,EAAEA,CAA9B,EAAiC;IAC/B,IAAIwC,CAAC,CAACxC,CAAD,CAAD,GAAOuC,CAAC,GAAG3C,CAAJ,GAAQI,CAAnB,EAAsB;MACpB,IAAI4C,CAAC,GAAGJ,CAAC,CAACxC,CAAD,CAAD,GAAO,CAAf;;MACA,OAAOA,CAAC,GAAGJ,CAAX,EAAc;QACZ4C,CAAC,CAACxC,CAAC,EAAF,CAAD,GAAS4C,CAAC,EAAV;MACD;;MACDD,MAAM,GAAG,CAAT;MACA;IACD;EACF;;EACD,OAAOA,MAAP;AACD;AAED,OAAO,SAASE,UAAT,CAAoBC,IAApB,EAA0B;EAC/B7D,UAAU,CAAE,GAAE6D,IAAK,EAAT,EAAY;IAAEC,MAAM,EAAE;EAAV,CAAZ,CAAV;EACA1D,eAAe,GAAGyD,IAAlB;AACD;AAED,OAAO,SAASE,OAAT,GAAmB;EACxB,OAAO3D,eAAP;AACD;AAED,OAAO,SAAS4D,MAAT,GAA4C;EAAA,IAA5BzB,QAA4B,uEAAjB,CAAiB;EAAA,IAAdK,QAAc,uEAAH,CAAG;EACjD,MAAMqB,KAAK,GAAGrB,QAAQ,GAAGL,QAAzB;EACA,OAAOA,QAAQ,GAAG0B,KAAK,GAAGzC,IAAI,CAACwC,MAAL,EAA1B;AACD;AAED,OAAO,MAAME,QAAQ,GAAG3D,cAAc,CAAC,UAAD,CAA/B,C,CAEP;;AACA,OAAO,SAAS4D,GAAT,CAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,GAAnB,EAAwB;EAC7BA,GAAG,CAAC,CAAD,CAAH,GAASF,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAjB;EACAC,GAAG,CAAC,CAAD,CAAH,GAASF,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAjB;EACAC,GAAG,CAAC,CAAD,CAAH,GAASF,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAjB;EACA,OAAOC,GAAP;AACD;AAED,OAAO,SAASC,QAAT,CAAkBH,CAAlB,EAAqBC,CAArB,EAAwBC,GAAxB,EAA6B;EAClCA,GAAG,CAAC,CAAD,CAAH,GAASF,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAjB;EACAC,GAAG,CAAC,CAAD,CAAH,GAASF,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAjB;EACAC,GAAG,CAAC,CAAD,CAAH,GAASF,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAjB;EACA,OAAOC,GAAP;AACD;AAED,OAAO,SAASE,cAAT,CAAwBC,GAAxB,EAA6BC,MAA7B,EAAqC;EAC1CD,GAAG,CAAC,CAAD,CAAH,IAAUC,MAAV;EACAD,GAAG,CAAC,CAAD,CAAH,IAAUC,MAAV;EACAD,GAAG,CAAC,CAAD,CAAH,IAAUC,MAAV;EACA,OAAOD,GAAP;AACD;AAED,OAAO,SAASE,gBAAT,CAA0BF,GAA1B,EAA+BC,MAA/B,EAAuC;EAC5CD,GAAG,CAAC,CAAD,CAAH,IAAUC,MAAV;EACAD,GAAG,CAAC,CAAD,CAAH,IAAUC,MAAV;EACA,OAAOD,GAAP;AACD;AAED,OAAO,SAASG,kBAAT,CAA4BR,CAA5B,EAA+BC,CAA/B,EAAkCK,MAAlC,EAA0CJ,GAA1C,EAA+C;EACpDA,GAAG,CAAC,CAAD,CAAH,GAASF,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAD,GAAOK,MAAvB;EACAJ,GAAG,CAAC,CAAD,CAAH,GAASF,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAD,GAAOK,MAAvB;EACAJ,GAAG,CAAC,CAAD,CAAH,GAASF,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAD,GAAOK,MAAvB;EACA,OAAOJ,GAAP;AACD;AAED,OAAO,SAASO,oBAAT,CAA8BT,CAA9B,EAAiCC,CAAjC,EAAoCK,MAApC,EAA4CJ,GAA5C,EAAiD;EACtDA,GAAG,CAAC,CAAD,CAAH,GAASF,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAD,GAAOK,MAAvB;EACAJ,GAAG,CAAC,CAAD,CAAH,GAASF,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAD,GAAOK,MAAvB;EACA,OAAOJ,GAAP;AACD;AAED,OAAO,SAASQ,GAAT,CAAa1B,CAAb,EAAgB2B,CAAhB,EAAmB;EACxB,OAAO3B,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAAR,GAAc3B,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAAtB,GAA4B3B,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAA3C;AACD;AAED,OAAO,SAASC,KAAT,CAAe5B,CAAf,EAAkB2B,CAAlB,EAAqBE,OAArB,EAA8B;EACnCA,OAAO,CAAC,CAAD,CAAP,GAAa7B,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAArB;EACAE,OAAO,CAAC,CAAD,CAAP,GAAa7B,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAArB;EACAE,OAAO,CAAC,CAAD,CAAP,GAAa7B,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAArB;EACAE,OAAO,CAAC,CAAD,CAAP,GAAa7B,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAArB;EACAE,OAAO,CAAC,CAAD,CAAP,GAAa7B,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAArB;EACAE,OAAO,CAAC,CAAD,CAAP,GAAa7B,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAArB;EACAE,OAAO,CAAC,CAAD,CAAP,GAAa7B,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAArB;EACAE,OAAO,CAAC,CAAD,CAAP,GAAa7B,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAArB;EACAE,OAAO,CAAC,CAAD,CAAP,GAAa7B,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAArB;AACD;AAED,OAAO,SAASG,KAAT,CAAe9B,CAAf,EAAkB2B,CAAlB,EAAqBT,GAArB,EAA0B;EAC/B,MAAMa,EAAE,GAAG/B,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAAR,GAAc3B,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAAjC;EACA,MAAMK,EAAE,GAAGhC,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAAR,GAAc3B,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAAjC;EACA,MAAMM,EAAE,GAAGjC,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAAR,GAAc3B,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAAjC;EACAT,GAAG,CAAC,CAAD,CAAH,GAASa,EAAT;EACAb,GAAG,CAAC,CAAD,CAAH,GAASc,EAAT;EACAd,GAAG,CAAC,CAAD,CAAH,GAASe,EAAT;EACA,OAAOf,GAAP;AACD;AAED,OAAO,SAASgB,IAAT,CAAclC,CAAd,EAAwB;EAAA,IAAPzC,CAAO,uEAAH,CAAG;;EAC7B,QAAQA,CAAR;IACE,KAAK,CAAL;MACE,OAAOa,IAAI,CAAC+D,GAAL,CAASnC,CAAT,CAAP;;IACF,KAAK,CAAL;MACE,OAAO5B,IAAI,CAACgE,IAAL,CAAUpC,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAR,GAAcA,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAhC,CAAP;;IACF,KAAK,CAAL;MACE,OAAO5B,IAAI,CAACgE,IAAL,CAAUpC,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAR,GAAcA,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAtB,GAA4BA,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAA9C,CAAP;;IACF;MAAS;QACP,IAAIqC,GAAG,GAAG,CAAV;;QACA,KAAK,IAAI1E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;UAC1B0E,GAAG,IAAIrC,CAAC,CAACrC,CAAD,CAAD,GAAOqC,CAAC,CAACrC,CAAD,CAAf;QACD;;QACD,OAAOS,IAAI,CAACgE,IAAL,CAAUC,GAAV,CAAP;MACD;EAbH;AAeD;AAED,OAAO,SAASC,SAAT,CAAmBtC,CAAnB,EAAsB;EAC3B,MAAMuC,GAAG,GAAGL,IAAI,CAAClC,CAAD,CAAhB;;EACA,IAAIuC,GAAG,KAAK,GAAZ,EAAiB;IACfvC,CAAC,CAAC,CAAD,CAAD,IAAQuC,GAAR;IACAvC,CAAC,CAAC,CAAD,CAAD,IAAQuC,GAAR;IACAvC,CAAC,CAAC,CAAD,CAAD,IAAQuC,GAAR;EACD;;EACD,OAAOA,GAAP;AACD;AAED,OAAO,SAASC,cAAT,CAAwBxC,CAAxB,EAA2B2B,CAA3B,EAA8Bc,CAA9B,EAAiCC,KAAjC,EAAwC;EAC7C,MAAMC,EAAE,GAAG3C,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAnB;EACA,MAAM4C,EAAE,GAAG5C,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAnB;EACA,MAAM6C,EAAE,GAAG7C,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAnB;EACA,MAAMG,CAAC,GAAG/B,IAAI,CAACgE,IAAL,CAAUO,EAAE,GAAGC,EAAL,GAAUC,EAApB,CAAV;EAEA,IAAIC,EAAJ;EACA,IAAIC,EAAJ;EACA,IAAIC,EAAJ,CAR6C,CAU7C;;EACA,IAAIL,EAAE,GAAGC,EAAL,IAAWD,EAAE,GAAGE,EAApB,EAAwB;IACtBC,EAAE,GAAG,CAAL;IACAC,EAAE,GAAG,CAAL;IACAC,EAAE,GAAG,CAAL;EACD,CAJD,MAIO,IAAIJ,EAAE,GAAGC,EAAT,EAAa;IAClBC,EAAE,GAAG,CAAL;IACAC,EAAE,GAAG,CAAL;IACAC,EAAE,GAAG,CAAL;EACD,CAJM,MAIA;IACLF,EAAE,GAAG,CAAL;IACAC,EAAE,GAAG,CAAL;IACAC,EAAE,GAAG,CAAL;EACD;;EAED,MAAMhC,CAAC,GAAGhB,CAAC,CAAC8C,EAAD,CAAD,GAAQ3C,CAAlB;EACA,MAAMc,CAAC,GAAGjB,CAAC,CAAC+C,EAAD,CAAD,GAAQ5C,CAAlB;EACA,MAAM8C,CAAC,GAAGjD,CAAC,CAACgD,EAAD,CAAD,GAAQ7C,CAAlB;EACA,MAAMzC,GAAG,GAAGU,IAAI,CAACgE,IAAL,CAAUpB,CAAC,GAAGA,CAAJ,GAAQiC,CAAC,GAAGA,CAAtB,CAAZ;;EAEA,IAAIP,KAAK,KAAK,CAAd,EAAiB;IACf,MAAMQ,QAAQ,GAAG9E,IAAI,CAAC+E,GAAL,CAAST,KAAT,CAAjB;IACA,MAAMU,QAAQ,GAAGhF,IAAI,CAACiF,GAAL,CAASX,KAAT,CAAjB;;IAEA,IAAIf,CAAJ,EAAO;MACLA,CAAC,CAACmB,EAAD,CAAD,GAAQ,CAACG,CAAC,GAAGG,QAAJ,GAAepC,CAAC,GAAGC,CAAJ,GAAQiC,QAAxB,IAAoCxF,GAA5C;MACAiE,CAAC,CAACoB,EAAD,CAAD,GAAQG,QAAQ,GAAGxF,GAAnB;MACAiE,CAAC,CAACqB,EAAD,CAAD,GAAQ,CAAC,EAAEhC,CAAC,GAAGoC,QAAN,IAAkBnC,CAAC,GAAGgC,CAAJ,GAAQC,QAA3B,IAAuCxF,GAA/C;IACD;;IAED,IAAI+E,CAAJ,EAAO;MACLA,CAAC,CAACK,EAAD,CAAD,GAAQ,CAAC,EAAEG,CAAC,GAAGC,QAAN,IAAkBlC,CAAC,GAAGC,CAAJ,GAAQmC,QAA3B,IAAuC1F,GAA/C;MACA+E,CAAC,CAACM,EAAD,CAAD,GAAQK,QAAQ,GAAG1F,GAAnB;MACA+E,CAAC,CAACO,EAAD,CAAD,GAAQ,CAAChC,CAAC,GAAGkC,QAAJ,GAAejC,CAAC,GAAGgC,CAAJ,GAAQG,QAAxB,IAAoC1F,GAA5C;IACD;EACF,CAfD,MAeO;IACL,IAAIiE,CAAJ,EAAO;MACLA,CAAC,CAACmB,EAAD,CAAD,GAAQG,CAAC,GAAGvF,GAAZ;MACAiE,CAAC,CAACoB,EAAD,CAAD,GAAQ,CAAR;MACApB,CAAC,CAACqB,EAAD,CAAD,GAAQ,CAAChC,CAAD,GAAKtD,GAAb;IACD;;IAED,IAAI+E,CAAJ,EAAO;MACLA,CAAC,CAACK,EAAD,CAAD,GAAS,CAAC9B,CAAD,GAAKC,CAAN,GAAWvD,GAAnB;MACA+E,CAAC,CAACM,EAAD,CAAD,GAAQrF,GAAR;MACA+E,CAAC,CAACO,EAAD,CAAD,GAAS,CAAC/B,CAAD,GAAKgC,CAAN,GAAWvF,GAAnB;IACD;EACF;AACF;AAED,OAAO,SAAS4F,aAAT,CAAuBtC,CAAvB,EAA0BC,CAA1B,EAA6BsC,UAA7B,EAAyC;EAC9C,MAAMC,QAAQ,GAAG9B,GAAG,CAACT,CAAD,EAAIA,CAAJ,CAApB;;EAEA,IAAIuC,QAAQ,KAAK,CAAjB,EAAoB;IAClBD,UAAU,CAAC,CAAD,CAAV,GAAgB,CAAhB;IACAA,UAAU,CAAC,CAAD,CAAV,GAAgB,CAAhB;IACAA,UAAU,CAAC,CAAD,CAAV,GAAgB,CAAhB;IACA,OAAO,KAAP;EACD;;EAED,MAAME,KAAK,GAAG/B,GAAG,CAACV,CAAD,EAAIC,CAAJ,CAAH,GAAYuC,QAA1B;;EAEA,KAAK,IAAI7F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;IAC1B4F,UAAU,CAAC5F,CAAD,CAAV,GAAgBsD,CAAC,CAACtD,CAAD,CAAjB;EACD;;EACDyD,cAAc,CAACmC,UAAD,EAAaE,KAAb,CAAd;EAEA,OAAO,IAAP;AACD;AAED,OAAO,SAASC,KAAT,CAAe1D,CAAf,EAAkB2B,CAAlB,EAAqB;EAC1B,OAAO3B,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAAR,GAAc3B,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAA7B;AACD;AAED,OAAO,SAASgC,eAAT,CAAyB3C,CAAzB,EAA4BC,CAA5B,EAA+BsC,UAA/B,EAA2C;EAChD,MAAMC,QAAQ,GAAGE,KAAK,CAACzC,CAAD,EAAIA,CAAJ,CAAtB;;EAEA,IAAIuC,QAAQ,KAAK,CAAjB,EAAoB;IAClBD,UAAU,CAAC,CAAD,CAAV,GAAgB,CAAhB;IACAA,UAAU,CAAC,CAAD,CAAV,GAAgB,CAAhB;IACA,OAAO,KAAP;EACD;;EAED,MAAME,KAAK,GAAGC,KAAK,CAAC1C,CAAD,EAAIC,CAAJ,CAAL,GAAcuC,QAA5B;;EAEA,KAAK,IAAI7F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;IAC1B4F,UAAU,CAAC5F,CAAD,CAAV,GAAgBsD,CAAC,CAACtD,CAAD,CAAjB;EACD;;EACD4D,gBAAgB,CAACgC,UAAD,EAAaE,KAAb,CAAhB;EAEA,OAAO,IAAP;AACD;AAED,OAAO,SAASG,sBAAT,CAAgC5D,CAAhC,EAAmC2B,CAAnC,EAAsC;EAC3C,OACE,CAAC3B,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAAT,KAAiB3B,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAAzB,IACA,CAAC3B,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAAT,KAAiB3B,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAAzB,CADA,GAEA,CAAC3B,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAAT,KAAiB3B,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAAzB,CAHF;AAKD;AAED,OAAO,SAASkC,mBAAT,CAA6BC,EAA7B,EAAiCC,EAAjC,EAAqC;EAC1C,MAAMC,SAAS,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAlB;EACAlC,KAAK,CAACgC,EAAD,EAAKC,EAAL,EAASC,SAAT,CAAL;EACA,OAAO5F,IAAI,CAAC6F,KAAL,CAAW/B,IAAI,CAAC8B,SAAD,CAAf,EAA4BtC,GAAG,CAACoC,EAAD,EAAKC,EAAL,CAA/B,CAAP;AACD;AAED,OAAO,SAASG,yBAAT,CAAmCJ,EAAnC,EAAuCC,EAAvC,EAA2CI,EAA3C,EAA+C;EACpD,MAAMH,SAAS,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAlB;EACAlC,KAAK,CAACgC,EAAD,EAAKC,EAAL,EAASC,SAAT,CAAL;EACA,MAAMI,KAAK,GAAGhG,IAAI,CAAC6F,KAAL,CAAW/B,IAAI,CAAC8B,SAAD,CAAf,EAA4BtC,GAAG,CAACoC,EAAD,EAAKC,EAAL,CAA/B,CAAd;EACA,OAAOrC,GAAG,CAACsC,SAAD,EAAYG,EAAZ,CAAH,IAAsB,CAAtB,GAA0BC,KAA1B,GAAkC,CAACA,KAA1C;AACD;AAED,OAAO,SAASC,iBAAT,CAA2BC,IAA3B,EAAiCC,QAAjC,EAA2CC,QAA3C,EAAqD;EAC1D,MAAMC,gBAAgB,GAAGrG,IAAI,CAAC+D,GAAL,CAASmC,IAAI,GAAGE,QAAhB,CAAzB;EACA,OACG,IAAIpG,IAAI,CAACgE,IAAL,CAAU,IAAIhE,IAAI,CAACC,EAAT,GAAckG,QAAxB,CAAL,GACAnG,IAAI,CAACsG,GAAL,CAAS,EAAED,gBAAgB,IAAI,CAAtB,KAA4B,IAAIF,QAAhC,CAAT,CAFF;AAID;AAED,OAAO,SAASI,cAAT,CAAwBL,IAAxB,EAA8BC,QAA9B,EAAwCC,QAAxC,EAAkD;EACvD,MAAMC,gBAAgB,GAAGrG,IAAI,CAAC+D,GAAL,CAASmC,IAAI,GAAGE,QAAhB,CAAzB;EACA,OAAOpG,IAAI,CAACsG,GAAL,CAAS,EAAED,gBAAgB,IAAI,CAAtB,KAA4B,IAAIF,QAAhC,CAAT,CAAP;AACD;AAED,OAAO,SAASK,OAAT,CAAiB5E,CAAjB,EAAoB2B,CAApB,EAAuBkD,OAAvB,EAAgC;EACrCA,OAAO,CAAC,CAAD,CAAP,GAAa7E,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAArB;EACAkD,OAAO,CAAC,CAAD,CAAP,GAAa7E,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAArB;EACAkD,OAAO,CAAC,CAAD,CAAP,GAAa7E,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAArB;EACAkD,OAAO,CAAC,CAAD,CAAP,GAAa7E,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAArB;AACD;AAED,OAAO,SAASmD,MAAT,CAAgBC,GAAhB,EAAqB;EAC1B,OAAO3G,IAAI,CAACgE,IAAL,CAAU2C,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAZ,GAAkBA,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAxC,CAAP;AACD;AAED,OAAO,SAASC,WAAT,CAAqBhF,CAArB,EAAwB;EAC7B,MAAMuC,GAAG,GAAGuC,MAAM,CAAC9E,CAAD,CAAlB;;EACA,IAAIuC,GAAG,KAAK,GAAZ,EAAiB;IACfvC,CAAC,CAAC,CAAD,CAAD,IAAQuC,GAAR;IACAvC,CAAC,CAAC,CAAD,CAAD,IAAQuC,GAAR;EACD;;EACD,OAAOA,GAAP;AACD;AAED,OAAO,SAAS0C,UAAT,CAAoBC,IAApB,EAA0B1H,IAA1B,EAAgCC,IAAhC,EAAsC0H,IAAtC,EAA4CC,GAA5C,EAAiD;EACtD,KAAK,IAAIzH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;IAC1ByH,GAAG,CAACzH,CAAD,CAAH,GAASuH,IAAI,CAACvH,CAAD,CAAb;IACAyH,GAAG,CAAC,IAAIzH,CAAL,CAAH,GAAaH,IAAI,CAACG,CAAD,CAAjB;IACAyH,GAAG,CAAC,IAAIzH,CAAL,CAAH,GAAaF,IAAI,CAACE,CAAD,CAAjB;IACAyH,GAAG,CAAC,KAAKzH,CAAN,CAAH,GAAcwH,IAAI,CAACxH,CAAD,CAAlB;EACD;;EACD,OAAOyH,GAAP;AACD;AAED,OAAO,SAASC,aAAT,CAAuBC,OAAvB,EAAgCzH,OAAhC,EAAyCC,OAAzC,EAAkDyH,OAAlD,EAA2DH,GAA3D,EAAgE;EACrE,KAAK,IAAIzH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;IAC1ByH,GAAG,CAAC,IAAIzH,CAAL,CAAH,GAAa2H,OAAO,CAAC3H,CAAD,CAApB;IACAyH,GAAG,CAAC,IAAIzH,CAAJ,GAAQ,CAAT,CAAH,GAAiBE,OAAO,CAACF,CAAD,CAAxB;IACAyH,GAAG,CAAC,IAAIzH,CAAJ,GAAQ,CAAT,CAAH,GAAiBG,OAAO,CAACH,CAAD,CAAxB;IACAyH,GAAG,CAAC,IAAIzH,CAAJ,GAAQ,CAAT,CAAH,GAAiB4H,OAAO,CAAC5H,CAAD,CAAxB;EACD;;EACD,OAAOyH,GAAP;AACD;AAED,OAAO,SAASI,UAAT,CAAoBN,IAApB,EAA0B1H,IAA1B,EAAgCC,IAAhC,EAAsC2H,GAAtC,EAA2C;EAChD,KAAK,IAAIzH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;IAC1ByH,GAAG,CAACzH,CAAD,CAAH,GAASuH,IAAI,CAACvH,CAAD,CAAb;IACAyH,GAAG,CAAC,IAAIzH,CAAL,CAAH,GAAaH,IAAI,CAACG,CAAD,CAAjB;IACAyH,GAAG,CAAC,IAAIzH,CAAL,CAAH,GAAaF,IAAI,CAACE,CAAD,CAAjB;EACD;;EACD,OAAOyH,GAAP;AACD;AAED,OAAO,SAASK,aAAT,CAAuBH,OAAvB,EAAgCzH,OAAhC,EAAyCC,OAAzC,EAAkDsH,GAAlD,EAAuD;EAC5D,KAAK,IAAIzH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;IAC1ByH,GAAG,CAAC,IAAIzH,CAAL,CAAH,GAAa2H,OAAO,CAAC3H,CAAD,CAApB;IACAyH,GAAG,CAAC,IAAIzH,CAAJ,GAAQ,CAAT,CAAH,GAAiBE,OAAO,CAACF,CAAD,CAAxB;IACAyH,GAAG,CAAC,IAAIzH,CAAJ,GAAQ,CAAT,CAAH,GAAiBG,OAAO,CAACH,CAAD,CAAxB;EACD;;EACD,OAAOyH,GAAP;AACD;AAED,OAAO,SAASM,cAAT,GAAiC;EAAA,kCAANC,IAAM;IAANA,IAAM;EAAA;;EACtC,IAAIA,IAAI,CAACrG,MAAL,KAAgB,CAApB,EAAuB;IACrB,OAAOqG,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,IAAaA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAAb,GAA0BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,IAAaA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAA9C;EACD;;EACD,IAAIA,IAAI,CAACrG,MAAL,KAAgB,CAApB,EAAuB;IACrB,OAAOqG,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAd,GAAoBA,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAzC;EACD;;EACD,OAAOC,MAAM,CAACC,GAAd;AACD;AAED,OAAO,SAASC,WAAT,CAAqBC,OAArB,EAA8BC,OAA9B,EAAuC;EAC5C,IAAIC,IAAJ;EACA,IAAIvI,GAAJ;EACA,IAAIwI,OAAJ;EACA,MAAMzC,KAAK,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAd,CAJ4C,CAM5C;;EACA,KAAK,IAAI9F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;IAC1BuI,OAAO,GAAG9H,IAAI,CAAC+D,GAAL,CAAS4D,OAAO,CAACpI,CAAC,GAAG,CAAL,CAAhB,CAAV;;IACA,IAAI,CAACD,GAAG,GAAGU,IAAI,CAAC+D,GAAL,CAAS4D,OAAO,CAACpI,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAhB,CAAP,IAAuCuI,OAA3C,EAAoD;MAClDA,OAAO,GAAGxI,GAAV;IACD;;IACD,IAAI,CAACA,GAAG,GAAGU,IAAI,CAAC+D,GAAL,CAAS4D,OAAO,CAACpI,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAhB,CAAP,IAAuCuI,OAA3C,EAAoD;MAClDA,OAAO,GAAGxI,GAAV;IACD;;IACD+F,KAAK,CAAC9F,CAAD,CAAL,GAAW,IAAIuI,OAAf;EACD,CAhB2C,CAkB5C;EAEA;;;EACAA,OAAO,GAAGzC,KAAK,CAAC,CAAD,CAAL,GAAWrF,IAAI,CAAC+D,GAAL,CAAS4D,OAAO,CAAC,CAAD,CAAhB,CAArB;EACAE,IAAI,GAAG,CAAP;;EACA,IAAI,CAACvI,GAAG,GAAG+F,KAAK,CAAC,CAAD,CAAL,GAAWrF,IAAI,CAAC+D,GAAL,CAAS4D,OAAO,CAAC,CAAD,CAAhB,CAAlB,KAA2CG,OAA/C,EAAwD;IACtDA,OAAO,GAAGxI,GAAV;IACAuI,IAAI,GAAG,CAAP;EACD;;EACD,IAAI,CAACvI,GAAG,GAAG+F,KAAK,CAAC,CAAD,CAAL,GAAWrF,IAAI,CAAC+D,GAAL,CAAS4D,OAAO,CAAC,CAAD,CAAhB,CAAlB,KAA2CG,OAA/C,EAAwD;IACtDD,IAAI,GAAG,CAAP;EACD;;EACD,IAAIA,IAAI,KAAK,CAAb,EAAgB;IACd5I,kBAAkB,CAAC0I,OAAD,EAAU,CAAV,EAAaE,IAAb,EAAmB,CAAnB,CAAlB;IACAxC,KAAK,CAACwC,IAAD,CAAL,GAAcxC,KAAK,CAAC,CAAD,CAAnB;EACD;;EACDuC,OAAO,CAAC,CAAD,CAAP,GAAaC,IAAb;EAEAF,OAAO,CAAC,CAAD,CAAP,IAAcA,OAAO,CAAC,CAAD,CAArB;EACAA,OAAO,CAAC,CAAD,CAAP,IAAcA,OAAO,CAAC,CAAD,CAArB,CArC4C,CAuC5C;;EACAA,OAAO,CAAC,CAAD,CAAP,IAAcA,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAAlC;EACAA,OAAO,CAAC,CAAD,CAAP,IAAcA,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAAlC;EACAG,OAAO,GAAGzC,KAAK,CAAC,CAAD,CAAL,GAAWrF,IAAI,CAAC+D,GAAL,CAAS4D,OAAO,CAAC,CAAD,CAAhB,CAArB;EACAE,IAAI,GAAG,CAAP;;EACA,IAAI,CAACvI,GAAG,GAAG+F,KAAK,CAAC,CAAD,CAAL,GAAWrF,IAAI,CAAC+D,GAAL,CAAS4D,OAAO,CAAC,CAAD,CAAhB,CAAlB,KAA2CG,OAA/C,EAAwD;IACtDD,IAAI,GAAG,CAAP;IACA5I,kBAAkB,CAAC0I,OAAD,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAAlB;IACAtC,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAhB;EACD;;EACDuC,OAAO,CAAC,CAAD,CAAP,GAAaC,IAAb;EACAF,OAAO,CAAC,CAAD,CAAP,IAAcA,OAAO,CAAC,CAAD,CAArB,CAlD4C,CAoD5C;;EACAA,OAAO,CAAC,CAAD,CAAP,IAAcA,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAAlC;EACAA,OAAO,CAAC,CAAD,CAAP,IAAcA,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAApB,GAA0BA,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAA5D;EACAC,OAAO,CAAC,CAAD,CAAP,GAAa,CAAb;AACD;AAED,OAAO,SAASG,UAAT,CAAoBJ,OAApB,EAA6BC,OAA7B,EAAsCI,GAAtC,EAA2C;EAChD;EACA,IAAI/D,GAAG,GAAG+D,GAAG,CAACJ,OAAO,CAAC,CAAD,CAAR,CAAb;EACAI,GAAG,CAACJ,OAAO,CAAC,CAAD,CAAR,CAAH,GAAkBI,GAAG,CAAC,CAAD,CAArB;EACAA,GAAG,CAAC,CAAD,CAAH,GAAS/D,GAAT;EAEAA,GAAG,GAAG+D,GAAG,CAACJ,OAAO,CAAC,CAAD,CAAR,CAAT;EACAI,GAAG,CAACJ,OAAO,CAAC,CAAD,CAAR,CAAH,GAAkBI,GAAG,CAAC,CAAD,CAArB;EACAA,GAAG,CAAC,CAAD,CAAH,GAAS/D,GAAG,GAAG0D,OAAO,CAAC,CAAD,CAAP,GAAaK,GAAG,CAAC,CAAD,CAA/B;EAEA/D,GAAG,GAAG+D,GAAG,CAACJ,OAAO,CAAC,CAAD,CAAR,CAAT;EACAI,GAAG,CAACJ,OAAO,CAAC,CAAD,CAAR,CAAH,GAAkBI,GAAG,CAAC,CAAD,CAArB;EACAA,GAAG,CAAC,CAAD,CAAH,GAAS/D,GAAG,GAAG0D,OAAO,CAAC,CAAD,CAAP,GAAaK,GAAG,CAAC,CAAD,CAAtB,GAA4BL,OAAO,CAAC,CAAD,CAAP,GAAaK,GAAG,CAAC,CAAD,CAArD,CAZgD,CAchD;;EACAA,GAAG,CAAC,CAAD,CAAH,IAAUL,OAAO,CAAC,CAAD,CAAjB;EACAK,GAAG,CAAC,CAAD,CAAH,GAAS,CAACA,GAAG,CAAC,CAAD,CAAH,GAASL,OAAO,CAAC,CAAD,CAAP,GAAaK,GAAG,CAAC,CAAD,CAA1B,IAAiCL,OAAO,CAAC,CAAD,CAAjD;EACAK,GAAG,CAAC,CAAD,CAAH,GAAS,CAACA,GAAG,CAAC,CAAD,CAAH,GAASL,OAAO,CAAC,CAAD,CAAP,GAAaK,GAAG,CAAC,CAAD,CAAzB,GAA+BL,OAAO,CAAC,CAAD,CAAP,GAAaK,GAAG,CAAC,CAAD,CAAhD,IAAuDL,OAAO,CAAC,CAAD,CAAvE;AACD;AAED,OAAO,SAASM,cAAT,CAAwBN,OAAxB,EAAiCK,GAAjC,EAAsCE,GAAtC,EAA2C;EAChD,MAAMC,EAAE,GAAGR,OAAO,CAAC,CAAD,CAAlB;EACA,MAAMS,EAAE,GAAGT,OAAO,CAAC,CAAD,CAAlB;EACA,MAAMU,EAAE,GAAGV,OAAO,CAAC,CAAD,CAAlB;EACA,MAAMW,EAAE,GAAGX,OAAO,CAAC,CAAD,CAAlB;EACA,MAAMY,EAAE,GAAGZ,OAAO,CAAC,CAAD,CAAlB;EACA,MAAMa,EAAE,GAAGb,OAAO,CAAC,CAAD,CAAlB;EACA,MAAMc,EAAE,GAAGd,OAAO,CAAC,CAAD,CAAlB;EACA,MAAMe,EAAE,GAAGf,OAAO,CAAC,CAAD,CAAlB;EACA,MAAMgB,EAAE,GAAGhB,OAAO,CAAC,CAAD,CAAlB,CATgD,CAWhD;;EACA,MAAMiB,EAAE,GAAG,CAACtB,cAAc,CAACiB,EAAD,EAAKG,EAAL,EAASF,EAAT,EAAaG,EAAb,CAA1B;EACA,MAAME,EAAE,GAAG,CAACvB,cAAc,CAACgB,EAAD,EAAKG,EAAL,EAASD,EAAT,EAAaG,EAAb,CAA1B;EACA,MAAMG,EAAE,GAAG,CAACxB,cAAc,CAACgB,EAAD,EAAKG,EAAL,EAASF,EAAT,EAAaG,EAAb,CAA1B;EAEA,MAAMK,EAAE,GAAG,CAACzB,cAAc,CAACc,EAAD,EAAKM,EAAL,EAASL,EAAT,EAAaM,EAAb,CAA1B;EACA,MAAMK,EAAE,GAAG,CAAC1B,cAAc,CAACa,EAAD,EAAKM,EAAL,EAASJ,EAAT,EAAaM,EAAb,CAA1B;EACA,MAAMM,EAAE,GAAG,CAAC3B,cAAc,CAACa,EAAD,EAAKM,EAAL,EAASL,EAAT,EAAaM,EAAb,CAA1B;EAEA,MAAMQ,EAAE,GAAG,CAAC5B,cAAc,CAACc,EAAD,EAAKG,EAAL,EAASF,EAAT,EAAaG,EAAb,CAA1B;EACA,MAAMW,EAAE,GAAG,CAAC7B,cAAc,CAACa,EAAD,EAAKG,EAAL,EAASD,EAAT,EAAaG,EAAb,CAA1B;EACA,MAAMY,EAAE,GAAG,CAAC9B,cAAc,CAACa,EAAD,EAAKG,EAAL,EAASF,EAAT,EAAaG,EAAb,CAA1B,CAtBgD,CAwBhD;;EACA,MAAMc,GAAG,GAAGlB,EAAE,GAAGS,EAAL,GAAUR,EAAE,GAAGS,EAAf,GAAoBR,EAAE,GAAGS,EAArC,CAzBgD,CA2BhD;;EACA,MAAMpD,EAAE,GAAGkD,EAAE,GAAGZ,GAAG,CAAC,CAAD,CAAR,GAAce,EAAE,GAAGf,GAAG,CAAC,CAAD,CAAtB,GAA4BkB,EAAE,GAAGlB,GAAG,CAAC,CAAD,CAA/C;EACA,MAAMrC,EAAE,GAAGkD,EAAE,GAAGb,GAAG,CAAC,CAAD,CAAR,GAAcgB,EAAE,GAAGhB,GAAG,CAAC,CAAD,CAAtB,GAA4BmB,EAAE,GAAGnB,GAAG,CAAC,CAAD,CAA/C;EACA,MAAMsB,EAAE,GAAGR,EAAE,GAAGd,GAAG,CAAC,CAAD,CAAR,GAAciB,EAAE,GAAGjB,GAAG,CAAC,CAAD,CAAtB,GAA4BoB,EAAE,GAAGpB,GAAG,CAAC,CAAD,CAA/C,CA9BgD,CAgChD;;EACAE,GAAG,CAAC,CAAD,CAAH,GAASxC,EAAE,GAAG2D,GAAd;EACAnB,GAAG,CAAC,CAAD,CAAH,GAASvC,EAAE,GAAG0D,GAAd;EACAnB,GAAG,CAAC,CAAD,CAAH,GAASoB,EAAE,GAAGD,GAAd;AACD;AAED,OAAO,SAASE,iBAAT,CAA2B5B,OAA3B,EAAoC6B,IAApC,EAA0CC,KAA1C,EAAiD;EACtD,MAAM7H,CAAC,GAAG+F,OAAO,CAAC,CAAD,CAAP,GAAa6B,IAAI,CAAC,CAAD,CAAjB,GAAuB7B,OAAO,CAAC,CAAD,CAAP,GAAa6B,IAAI,CAAC,CAAD,CAAxC,GAA8C7B,OAAO,CAAC,CAAD,CAAP,GAAa6B,IAAI,CAAC,CAAD,CAAzE;EACA,MAAMjG,CAAC,GAAGoE,OAAO,CAAC,CAAD,CAAP,GAAa6B,IAAI,CAAC,CAAD,CAAjB,GAAuB7B,OAAO,CAAC,CAAD,CAAP,GAAa6B,IAAI,CAAC,CAAD,CAAxC,GAA8C7B,OAAO,CAAC,CAAD,CAAP,GAAa6B,IAAI,CAAC,CAAD,CAAzE;EACA,MAAMnF,CAAC,GAAGsD,OAAO,CAAC,CAAD,CAAP,GAAa6B,IAAI,CAAC,CAAD,CAAjB,GAAuB7B,OAAO,CAAC,CAAD,CAAP,GAAa6B,IAAI,CAAC,CAAD,CAAxC,GAA8C7B,OAAO,CAAC,CAAD,CAAP,GAAa6B,IAAI,CAAC,CAAD,CAAzE;EAEAC,KAAK,CAAC,CAAD,CAAL,GAAW7H,CAAX;EACA6H,KAAK,CAAC,CAAD,CAAL,GAAWlG,CAAX;EACAkG,KAAK,CAAC,CAAD,CAAL,GAAWpF,CAAX;AACD;AAED,OAAO,SAASqF,gBAAT,CAA0BC,KAA1B,EAAiCC,KAAjC,EAAwCnG,OAAxC,EAAiD;EACtD,MAAMoG,KAAK,GAAG,CAAC,GAAGF,KAAJ,CAAd;EACA,MAAMG,KAAK,GAAG,CAAC,GAAGF,KAAJ,CAAd;;EACA,KAAK,IAAIrK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;IAC1BkE,OAAO,CAAClE,CAAD,CAAP,GACEsK,KAAK,CAAC,CAAD,CAAL,GAAWC,KAAK,CAACvK,CAAD,CAAhB,GAAsBsK,KAAK,CAAC,CAAD,CAAL,GAAWC,KAAK,CAACvK,CAAC,GAAG,CAAL,CAAtC,GAAgDsK,KAAK,CAAC,CAAD,CAAL,GAAWC,KAAK,CAACvK,CAAC,GAAG,CAAL,CADlE;IAEAkE,OAAO,CAAClE,CAAC,GAAG,CAAL,CAAP,GACEsK,KAAK,CAAC,CAAD,CAAL,GAAWC,KAAK,CAACvK,CAAD,CAAhB,GAAsBsK,KAAK,CAAC,CAAD,CAAL,GAAWC,KAAK,CAACvK,CAAC,GAAG,CAAL,CAAtC,GAAgDsK,KAAK,CAAC,CAAD,CAAL,GAAWC,KAAK,CAACvK,CAAC,GAAG,CAAL,CADlE;IAEAkE,OAAO,CAAClE,CAAC,GAAG,CAAL,CAAP,GACEsK,KAAK,CAAC,CAAD,CAAL,GAAWC,KAAK,CAACvK,CAAD,CAAhB,GAAsBsK,KAAK,CAAC,CAAD,CAAL,GAAWC,KAAK,CAACvK,CAAC,GAAG,CAAL,CAAtC,GAAgDsK,KAAK,CAAC,CAAD,CAAL,GAAWC,KAAK,CAACvK,CAAC,GAAG,CAAL,CADlE;EAED;AACF;AAED,OAAO,SAASwK,cAAT,CAAwBnH,CAAxB,EAA2BC,CAA3B,EAA8BmH,IAA9B,EAAoCC,IAApC,EAA0CC,IAA1C,EAAgDC,IAAhD,EAAsDC,WAAtD,EAAmE;EACxE;EACA,IAAIH,IAAI,KAAKC,IAAb,EAAmB;IACjBxL,aAAa,CAAC,wDAAD,CAAb;EACD,CAJuE,CAMxE;;;EACA,MAAMmL,KAAK,GAAG,CAAC,GAAGjH,CAAJ,CAAd;EACA,MAAMkH,KAAK,GAAG,CAAC,GAAGjH,CAAJ,CAAd,CARwE,CASxE;EACA;;EACA,KAAK,IAAItD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyK,IAApB,EAA0BzK,CAAC,EAA3B,EAA+B;IAC7B;IACA,KAAK,IAAI4C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgI,IAApB,EAA0BhI,CAAC,EAA3B,EAA+B;MAC7BiI,WAAW,CAAC7K,CAAC,GAAG4K,IAAJ,GAAWhI,CAAZ,CAAX,GAA4B,CAA5B,CAD6B,CAE7B;;MACA,KAAK,IAAIkI,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;QAC7BD,WAAW,CAAC7K,CAAC,GAAG4K,IAAJ,GAAWhI,CAAZ,CAAX,IAA6B0H,KAAK,CAACtK,CAAC,GAAG0K,IAAJ,GAAWI,CAAZ,CAAL,GAAsBP,KAAK,CAAC3H,CAAC,GAAGgI,IAAI,GAAGE,CAAZ,CAAxD;MACD;IACF;EACF;AACF;AAED,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,QAA9B,EAAwC;EAC7C,IAAIlL,GAAJ,CAD6C,CAG7C;;EACAA,GAAG,GAAGiL,MAAM,CAAC,CAAD,CAAZ;EACAC,QAAQ,CAAC,CAAD,CAAR,GAAcD,MAAM,CAAC,CAAD,CAApB;EACAC,QAAQ,CAAC,CAAD,CAAR,GAAclL,GAAd;EACAA,GAAG,GAAGiL,MAAM,CAAC,CAAD,CAAZ;EACAC,QAAQ,CAAC,CAAD,CAAR,GAAcD,MAAM,CAAC,CAAD,CAApB;EACAC,QAAQ,CAAC,CAAD,CAAR,GAAclL,GAAd;EACAA,GAAG,GAAGiL,MAAM,CAAC,CAAD,CAAZ;EACAC,QAAQ,CAAC,CAAD,CAAR,GAAcD,MAAM,CAAC,CAAD,CAApB;EACAC,QAAQ,CAAC,CAAD,CAAR,GAAclL,GAAd,CAZ6C,CAc7C;;EACAkL,QAAQ,CAAC,CAAD,CAAR,GAAcD,MAAM,CAAC,CAAD,CAApB;EACAC,QAAQ,CAAC,CAAD,CAAR,GAAcD,MAAM,CAAC,CAAD,CAApB;EACAC,QAAQ,CAAC,CAAD,CAAR,GAAcD,MAAM,CAAC,CAAD,CAApB;AACD;AAED,OAAO,SAASE,SAAT,CAAmBF,MAAnB,EAA2BG,QAA3B,EAAqC;EAC1C,MAAMvC,EAAE,GAAGoC,MAAM,CAAC,CAAD,CAAjB;EACA,MAAMnC,EAAE,GAAGmC,MAAM,CAAC,CAAD,CAAjB;EACA,MAAMlC,EAAE,GAAGkC,MAAM,CAAC,CAAD,CAAjB;EACA,MAAMjC,EAAE,GAAGiC,MAAM,CAAC,CAAD,CAAjB;EACA,MAAMhC,EAAE,GAAGgC,MAAM,CAAC,CAAD,CAAjB;EACA,MAAM/B,EAAE,GAAG+B,MAAM,CAAC,CAAD,CAAjB;EACA,MAAM9B,EAAE,GAAG8B,MAAM,CAAC,CAAD,CAAjB;EACA,MAAM7B,EAAE,GAAG6B,MAAM,CAAC,CAAD,CAAjB;EACA,MAAM5B,EAAE,GAAG4B,MAAM,CAAC,CAAD,CAAjB,CAT0C,CAW1C;;EACA,MAAM3B,EAAE,GAAG,CAACtB,cAAc,CAACiB,EAAD,EAAKG,EAAL,EAASF,EAAT,EAAaG,EAAb,CAA1B;EACA,MAAME,EAAE,GAAG,CAACvB,cAAc,CAACgB,EAAD,EAAKG,EAAL,EAASD,EAAT,EAAaG,EAAb,CAA1B;EACA,MAAMG,EAAE,GAAG,CAACxB,cAAc,CAACgB,EAAD,EAAKG,EAAL,EAASF,EAAT,EAAaG,EAAb,CAA1B;EAEA,MAAMK,EAAE,GAAG,CAACzB,cAAc,CAACc,EAAD,EAAKM,EAAL,EAASL,EAAT,EAAaM,EAAb,CAA1B;EACA,MAAMK,EAAE,GAAG,CAAC1B,cAAc,CAACa,EAAD,EAAKM,EAAL,EAASJ,EAAT,EAAaM,EAAb,CAA1B;EACA,MAAMM,EAAE,GAAG,CAAC3B,cAAc,CAACa,EAAD,EAAKM,EAAL,EAASL,EAAT,EAAaM,EAAb,CAA1B;EAEA,MAAMQ,EAAE,GAAG,CAAC5B,cAAc,CAACc,EAAD,EAAKG,EAAL,EAASF,EAAT,EAAaG,EAAb,CAA1B;EACA,MAAMW,EAAE,GAAG,CAAC7B,cAAc,CAACa,EAAD,EAAKG,EAAL,EAASD,EAAT,EAAaG,EAAb,CAA1B;EACA,MAAMY,EAAE,GAAG,CAAC9B,cAAc,CAACa,EAAD,EAAKG,EAAL,EAASF,EAAT,EAAaG,EAAb,CAA1B,CAtB0C,CAwB1C;;EACA,MAAMc,GAAG,GAAGlB,EAAE,GAAGS,EAAL,GAAUR,EAAE,GAAGS,EAAf,GAAoBR,EAAE,GAAGS,EAArC;;EACA,IAAIO,GAAG,KAAK,CAAZ,EAAe;IACb1K,eAAe,CAAC,0BAAD,CAAf;EACD;;EAED+L,QAAQ,CAAC,CAAD,CAAR,GAAc9B,EAAE,GAAGS,GAAnB;EACAqB,QAAQ,CAAC,CAAD,CAAR,GAAc7B,EAAE,GAAGQ,GAAnB;EACAqB,QAAQ,CAAC,CAAD,CAAR,GAAc5B,EAAE,GAAGO,GAAnB;EAEAqB,QAAQ,CAAC,CAAD,CAAR,GAAc3B,EAAE,GAAGM,GAAnB;EACAqB,QAAQ,CAAC,CAAD,CAAR,GAAc1B,EAAE,GAAGK,GAAnB;EACAqB,QAAQ,CAAC,CAAD,CAAR,GAAczB,EAAE,GAAGI,GAAnB;EAEAqB,QAAQ,CAAC,CAAD,CAAR,GAAcxB,EAAE,GAAGG,GAAnB;EACAqB,QAAQ,CAAC,CAAD,CAAR,GAAcvB,EAAE,GAAGE,GAAnB;EACAqB,QAAQ,CAAC,CAAD,CAAR,GAActB,EAAE,GAAGC,GAAnB;AACD;AAED,OAAO,SAASsB,cAAT,CAAwBhD,OAAxB,EAAiC;EACtC,OACEA,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAApB,GAA0BA,OAAO,CAAC,CAAD,CAAjC,GACAA,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAApB,GAA0BA,OAAO,CAAC,CAAD,CADjC,GAEAA,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAApB,GAA0BA,OAAO,CAAC,CAAD,CAFjC,GAGAA,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAApB,GAA0BA,OAAO,CAAC,CAAD,CAHjC,GAIAA,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAApB,GAA0BA,OAAO,CAAC,CAAD,CAJjC,GAKAA,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAApB,GAA0BA,OAAO,CAAC,CAAD,CANnC;AAQD;AAED,OAAO,SAASiD,WAAT,CAAqBjD,OAArB,EAA8B;EACnC,KAAK,IAAIpI,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;IAC1B;IACAoI,OAAO,CAACpI,CAAC,GAAG,CAAL,CAAP,GAAiBoI,OAAO,CAACpI,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAP,GAAqBoI,OAAO,CAACpI,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAP,GAAqB,CAA3D;IACAoI,OAAO,CAACpI,CAAC,GAAG,CAAJ,GAAQA,CAAT,CAAP,GAAqB,CAArB;EACD;AACF;AAED,OAAO,SAASsL,QAAT,CAAkB1L,CAAlB,EAAqB6H,GAArB,EAA0B;EAC/B,KAAK,IAAIzH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;IAC1B,KAAK,IAAI4C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhD,CAApB,EAAuBgD,CAAC,EAAxB,EAA4B;MAC1B6E,GAAG,CAACzH,CAAC,GAAGJ,CAAJ,GAAQgD,CAAT,CAAH,GAAiB,CAAjB;IACD;;IACD6E,GAAG,CAACzH,CAAC,GAAGJ,CAAJ,GAAQI,CAAT,CAAH,GAAiB,CAAjB;EACD;;EACD,OAAOyH,GAAP;AACD;AAED,OAAO,SAAS8D,qBAAT,CAA+BC,MAA/B,EAAuCpD,OAAvC,EAAgD;EACrD,MAAMqD,EAAE,GAAGD,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAA7B;EACA,MAAME,EAAE,GAAGF,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAA7B;EACA,MAAMG,EAAE,GAAGH,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAA7B;EACA,MAAMI,EAAE,GAAGJ,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAA7B;EAEA,MAAMK,EAAE,GAAGL,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAA7B;EACA,MAAMM,EAAE,GAAGN,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAA7B;EACA,MAAMO,EAAE,GAAGP,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAA7B;EAEA,MAAMQ,EAAE,GAAGR,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAA7B;EACA,MAAMS,EAAE,GAAGT,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAA7B;EACA,MAAMU,EAAE,GAAGV,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAA7B;EAEA,MAAMW,EAAE,GAAGN,EAAE,GAAGC,EAAL,GAAUC,EAArB,CAdqD,CAerD;;EACA,IAAIK,CAAC,GAAG,KAAKX,EAAE,GAAGU,EAAV,CAAR;EACA,MAAME,CAAC,GAAG,CAACZ,EAAE,GAAGU,EAAN,IAAYC,CAAtB;EACAA,CAAC,IAAI,CAAL;EAEAhE,OAAO,CAAC,CAAD,CAAP,GAAayD,EAAE,GAAGO,CAAL,GAASC,CAAtB;EACAjE,OAAO,CAAC,CAAD,CAAP,GAAa,CAAC4D,EAAE,GAAGJ,EAAN,IAAYQ,CAAzB;EACAhE,OAAO,CAAC,CAAD,CAAP,GAAa,CAAC6D,EAAE,GAAGN,EAAN,IAAYS,CAAzB;EAEAhE,OAAO,CAAC,CAAD,CAAP,GAAa,CAAC4D,EAAE,GAAGJ,EAAN,IAAYQ,CAAzB;EACAhE,OAAO,CAAC,CAAD,CAAP,GAAa0D,EAAE,GAAGM,CAAL,GAASC,CAAtB;EACAjE,OAAO,CAAC,CAAD,CAAP,GAAa,CAAC8D,EAAE,GAAGR,EAAN,IAAYU,CAAzB;EAEAhE,OAAO,CAAC,CAAD,CAAP,GAAa,CAAC6D,EAAE,GAAGN,EAAN,IAAYS,CAAzB;EACAhE,OAAO,CAAC,CAAD,CAAP,GAAa,CAAC8D,EAAE,GAAGR,EAAN,IAAYU,CAAzB;EACAhE,OAAO,CAAC,CAAD,CAAP,GAAa2D,EAAE,GAAGK,CAAL,GAASC,CAAtB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAmBjJ,CAAnB,EAAsBC,CAAtB,EAAqC;EAAA,IAAZiJ,GAAY,uEAAN,IAAM;;EAC1C,IAAIlJ,CAAC,CAAC1B,MAAF,KAAa2B,CAAC,CAAC3B,MAAnB,EAA2B;IACzB,OAAO,KAAP;EACD;;EAED,SAAS6K,OAAT,CAAiBC,OAAjB,EAA0BC,KAA1B,EAAiC;IAC/B,OAAOjM,IAAI,CAAC+D,GAAL,CAASiI,OAAO,GAAGnJ,CAAC,CAACoJ,KAAD,CAApB,KAAgCH,GAAvC;EACD;;EACD,OAAOlJ,CAAC,CAACsJ,KAAF,CAAQH,OAAR,CAAP;AACD;AAED,OAAO,MAAMI,gBAAgB,GAAGN,SAAzB;AAEP,OAAO,SAASO,WAAT,CAAqBC,GAArB,EAAsC;EAAA,IAAZC,MAAY,uEAAH,CAAG;;EAC3C,IAAI,CAAE,GAAED,GAAI,EAAP,CAASE,QAAT,CAAkB,GAAlB,CAAL,EAA6B;IAC3B,OAAO,CAAE,GAAEvM,IAAI,CAACM,KAAL,CAAY,GAAE+L,GAAI,KAAIC,MAAO,EAA7B,CAAgC,KAAIA,MAAO,EAAtD;EACD;;EACD,MAAM1L,GAAG,GAAI,GAAEyL,GAAI,EAAP,CAASG,KAAT,CAAe,GAAf,CAAZ;EACA,IAAIC,GAAG,GAAG,EAAV;;EACA,IAAI,CAAC7L,GAAG,CAAC,CAAD,CAAJ,GAAU0L,MAAV,GAAmB,CAAvB,EAA0B;IACxBG,GAAG,GAAG,GAAN;EACD;;EACD,OAAO,CAAE,GAAEzM,IAAI,CAACM,KAAL,CAAY,GAAE,CAACM,GAAG,CAAC,CAAD,CAAI,IAAG6L,GAAI,GAAE,CAAC7L,GAAG,CAAC,CAAD,CAAJ,GAAU0L,MAAO,EAAhD,CAAmD,KAAIA,MAAO,EAAzE;AACD;AAED,OAAO,SAASI,WAAT,CAAqBC,MAArB,EAA0D;EAAA,IAA7B7J,GAA6B,uEAAvB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAuB;EAAA,IAAZwJ,MAAY,uEAAH,CAAG;EAC/DxJ,GAAG,CAAC,CAAD,CAAH,GAASsJ,WAAW,CAACO,MAAM,CAAC,CAAD,CAAP,EAAYL,MAAZ,CAApB;EACAxJ,GAAG,CAAC,CAAD,CAAH,GAASsJ,WAAW,CAACO,MAAM,CAAC,CAAD,CAAP,EAAYL,MAAZ,CAApB;EACAxJ,GAAG,CAAC,CAAD,CAAH,GAASsJ,WAAW,CAACO,MAAM,CAAC,CAAD,CAAP,EAAYL,MAAZ,CAApB;EAEA,OAAOxJ,GAAP;AACD;AAED,OAAO,SAAS8J,OAAT,CAAiBhK,CAAjB,EAAoBzD,CAApB,EAAuB0N,CAAvB,EAA0BnL,CAA1B,EAA6B;EAClC,IAAInC,CAAJ;EACA,IAAI4C,CAAJ;EACA,IAAIkI,CAAJ;EACA,IAAIyC,EAAJ;EACA,IAAIC,EAAJ;EACA,IAAIC,MAAJ;EACA,IAAIC,KAAJ;EACA,IAAI3I,KAAJ;EACA,IAAI4I,CAAJ;EACA,IAAIC,GAAJ;EACA,IAAIC,EAAJ;EACA,IAAIxB,CAAJ;EACA,IAAIyB,CAAJ;EACA,IAAIC,CAAJ;EACA,IAAIzI,CAAJ;EACA,IAAIvF,GAAJ;EACA,MAAMuD,CAAC,GAAGlD,WAAW,CAACR,CAAD,CAArB;EACA,MAAMkF,CAAC,GAAG1E,WAAW,CAACR,CAAD,CAArB;;EAEA,MAAMoO,SAAS,GAAG,CAACC,EAAD,EAAKC,EAAL,EAASC,EAAT,KAAgB;IAChCJ,CAAC,GAAGE,EAAE,CAACC,EAAD,CAAN;IACAJ,CAAC,GAAGG,EAAE,CAACE,EAAD,CAAN;IACAF,EAAE,CAACC,EAAD,CAAF,GAASH,CAAC,GAAG1B,CAAC,IAAIyB,CAAC,GAAGC,CAAC,GAAGH,GAAZ,CAAd;IACAK,EAAE,CAACE,EAAD,CAAF,GAASL,CAAC,GAAGzB,CAAC,IAAI0B,CAAC,GAAGD,CAAC,GAAGF,GAAZ,CAAd;EACD,CALD,CApBkC,CA2BlC;;;EACAtC,QAAQ,CAAC1L,CAAD,EAAIuC,CAAJ,CAAR;;EACA,KAAKqL,EAAE,GAAG,CAAV,EAAaA,EAAE,GAAG5N,CAAlB,EAAqB4N,EAAE,EAAvB,EAA2B;IACzBlK,CAAC,CAACkK,EAAD,CAAD,GAAQF,CAAC,CAACE,EAAD,CAAD,GAAQnK,CAAC,CAACmK,EAAE,GAAGA,EAAE,GAAG5N,CAAX,CAAjB;IACAkF,CAAC,CAAC0I,EAAD,CAAD,GAAQ,GAAR;EACD,CAhCiC,CAkClC;;;EACA,KAAKxN,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGV,iBAAhB,EAAmCU,CAAC,EAApC,EAAwC;IACtC6N,EAAE,GAAG,GAAL;;IACA,KAAKL,EAAE,GAAG,CAAV,EAAaA,EAAE,GAAG5N,CAAC,GAAG,CAAtB,EAAyB4N,EAAE,EAA3B,EAA+B;MAC7B,KAAKD,EAAE,GAAGC,EAAE,GAAG,CAAf,EAAkBD,EAAE,GAAG3N,CAAvB,EAA0B2N,EAAE,EAA5B,EAAgC;QAC9BM,EAAE,IAAIpN,IAAI,CAAC+D,GAAL,CAASnB,CAAC,CAACmK,EAAE,GAAG5N,CAAL,GAAS2N,EAAV,CAAV,CAAN;MACD;IACF;;IACD,IAAIM,EAAE,KAAK,GAAX,EAAgB;MACd;IACD,CATqC,CAWtC;;;IACA,IAAI7N,CAAC,GAAG,CAAR,EAAW;MACT0N,KAAK,GAAI,MAAMG,EAAP,IAAcjO,CAAC,GAAGA,CAAlB,CAAR;IACD,CAFD,MAEO;MACL8N,KAAK,GAAG,GAAR;IACD;;IAED,KAAKF,EAAE,GAAG,CAAV,EAAaA,EAAE,GAAG5N,CAAC,GAAG,CAAtB,EAAyB4N,EAAE,EAA3B,EAA+B;MAC7B,KAAKD,EAAE,GAAGC,EAAE,GAAG,CAAf,EAAkBD,EAAE,GAAG3N,CAAvB,EAA0B2N,EAAE,EAA5B,EAAgC;QAC9BQ,CAAC,GAAG,QAAQtN,IAAI,CAAC+D,GAAL,CAASnB,CAAC,CAACmK,EAAE,GAAG5N,CAAL,GAAS2N,EAAV,CAAV,CAAZ,CAD8B,CAG9B;;QACA,IACEvN,CAAC,GAAG,CAAJ,IACAS,IAAI,CAAC+D,GAAL,CAAS8I,CAAC,CAACE,EAAD,CAAV,IAAkBO,CAAlB,KAAwBtN,IAAI,CAAC+D,GAAL,CAAS8I,CAAC,CAACE,EAAD,CAAV,CADxB,IAEA/M,IAAI,CAAC+D,GAAL,CAAS8I,CAAC,CAACC,EAAD,CAAV,IAAkBQ,CAAlB,KAAwBtN,IAAI,CAAC+D,GAAL,CAAS8I,CAAC,CAACC,EAAD,CAAV,CAH1B,EAIE;UACAlK,CAAC,CAACmK,EAAE,GAAG5N,CAAL,GAAS2N,EAAV,CAAD,GAAiB,GAAjB;QACD,CAND,MAMO,IAAI9M,IAAI,CAAC+D,GAAL,CAASnB,CAAC,CAACmK,EAAE,GAAG5N,CAAL,GAAS2N,EAAV,CAAV,IAA2BG,KAA/B,EAAsC;UAC3CI,CAAC,GAAGR,CAAC,CAACC,EAAD,CAAD,GAAQD,CAAC,CAACE,EAAD,CAAb;;UACA,IAAI/M,IAAI,CAAC+D,GAAL,CAASsJ,CAAT,IAAcC,CAAd,KAAoBtN,IAAI,CAAC+D,GAAL,CAASsJ,CAAT,CAAxB,EAAqC;YACnCH,CAAC,GAAGtK,CAAC,CAACmK,EAAE,GAAG5N,CAAL,GAAS2N,EAAV,CAAD,GAAiBO,CAArB;UACD,CAFD,MAEO;YACL/I,KAAK,GAAI,MAAM+I,CAAP,GAAYzK,CAAC,CAACmK,EAAE,GAAG5N,CAAL,GAAS2N,EAAV,CAArB;YACAI,CAAC,GAAG,OAAOlN,IAAI,CAAC+D,GAAL,CAASO,KAAT,IAAkBtE,IAAI,CAACgE,IAAL,CAAU,MAAMM,KAAK,GAAGA,KAAxB,CAAzB,CAAJ;;YACA,IAAIA,KAAK,GAAG,GAAZ,EAAiB;cACf4I,CAAC,GAAG,CAACA,CAAL;YACD;UACF;;UACDrI,CAAC,GAAG,MAAM7E,IAAI,CAACgE,IAAL,CAAU,IAAIkJ,CAAC,GAAGA,CAAlB,CAAV;UACAtB,CAAC,GAAGsB,CAAC,GAAGrI,CAAR;UACAsI,GAAG,GAAGvB,CAAC,IAAI,MAAM/G,CAAV,CAAP;UACAwI,CAAC,GAAGH,CAAC,GAAGtK,CAAC,CAACmK,EAAE,GAAG5N,CAAL,GAAS2N,EAAV,CAAT;UACAzI,CAAC,CAAC0I,EAAD,CAAD,IAASM,CAAT;UACAhJ,CAAC,CAACyI,EAAD,CAAD,IAASO,CAAT;UACAR,CAAC,CAACE,EAAD,CAAD,IAASM,CAAT;UACAR,CAAC,CAACC,EAAD,CAAD,IAASO,CAAT;UACAzK,CAAC,CAACmK,EAAE,GAAG5N,CAAL,GAAS2N,EAAV,CAAD,GAAiB,GAAjB,CAnB2C,CAqB3C;;UACA,KAAK3K,CAAC,GAAG,CAAT,EAAYA,CAAC,IAAI4K,EAAE,GAAG,CAAtB,EAAyB5K,CAAC,EAA1B,EAA8B;YAC5BoL,SAAS,CAAC3K,CAAD,EAAIT,CAAC,GAAGhD,CAAJ,GAAQ4N,EAAZ,EAAgB5K,CAAC,GAAGhD,CAAJ,GAAQ2N,EAAxB,CAAT;UACD,CAxB0C,CAyB3C;;;UACA,KAAK3K,CAAC,GAAG4K,EAAE,GAAG,CAAd,EAAiB5K,CAAC,IAAI2K,EAAE,GAAG,CAA3B,EAA8B3K,CAAC,EAA/B,EAAmC;YACjCoL,SAAS,CAAC3K,CAAD,EAAImK,EAAE,GAAG5N,CAAL,GAASgD,CAAb,EAAgBA,CAAC,GAAGhD,CAAJ,GAAQ2N,EAAxB,CAAT;UACD,CA5B0C,CA6B3C;;;UACA,KAAK3K,CAAC,GAAG2K,EAAE,GAAG,CAAd,EAAiB3K,CAAC,GAAGhD,CAArB,EAAwBgD,CAAC,EAAzB,EAA6B;YAC3BoL,SAAS,CAAC3K,CAAD,EAAImK,EAAE,GAAG5N,CAAL,GAASgD,CAAb,EAAgB2K,EAAE,GAAG3N,CAAL,GAASgD,CAAzB,CAAT;UACD;;UACD,KAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGhD,CAAhB,EAAmBgD,CAAC,EAApB,EAAwB;YACtBoL,SAAS,CAAC7L,CAAD,EAAIS,CAAC,GAAGhD,CAAJ,GAAQ4N,EAAZ,EAAgB5K,CAAC,GAAGhD,CAAJ,GAAQ2N,EAAxB,CAAT;UACD;QACF;MACF;IACF;;IAED,KAAKC,EAAE,GAAG,CAAV,EAAaA,EAAE,GAAG5N,CAAlB,EAAqB4N,EAAE,EAAvB,EAA2B;MACzBlK,CAAC,CAACkK,EAAD,CAAD,IAAS1I,CAAC,CAAC0I,EAAD,CAAV;MACAF,CAAC,CAACE,EAAD,CAAD,GAAQlK,CAAC,CAACkK,EAAD,CAAT;MACA1I,CAAC,CAAC0I,EAAD,CAAD,GAAQ,GAAR;IACD;EACF,CA7GiC,CA+GlC;;;EACA,IAAIxN,CAAC,IAAIV,iBAAT,EAA4B;IAC1BF,eAAe,CAAC,kDAAD,CAAf;IACA,OAAO,CAAP;EACD,CAnHiC,CAqHlC;;;EACA,KAAKwD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGhD,CAAC,GAAG,CAApB,EAAuBgD,CAAC,EAAxB,EAA4B;IAC1B;IACAkI,CAAC,GAAGlI,CAAJ;IACA7C,GAAG,GAAGuN,CAAC,CAACxC,CAAD,CAAP;;IACA,KAAK9K,CAAC,GAAG4C,CAAC,GAAG,CAAb,EAAgB5C,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;MAC1B;MACA,IAAIsN,CAAC,CAACtN,CAAD,CAAD,IAAQD,GAAR,IAAeU,IAAI,CAAC+D,GAAL,CAAS8I,CAAC,CAACtN,CAAD,CAAD,GAAOD,GAAhB,IAAuBR,gBAA1C,EAA4D;QAC1D;QACAuL,CAAC,GAAG9K,CAAJ;QACAD,GAAG,GAAGuN,CAAC,CAACxC,CAAD,CAAP;MACD;IACF;;IACD,IAAIA,CAAC,KAAKlI,CAAV,EAAa;MACX0K,CAAC,CAACxC,CAAD,CAAD,GAAOwC,CAAC,CAAC1K,CAAD,CAAR;MACA0K,CAAC,CAAC1K,CAAD,CAAD,GAAO7C,GAAP;MACAE,qBAAqB,CAACkC,CAAD,EAAIvC,CAAJ,EAAOgD,CAAP,EAAUkI,CAAV,CAArB;IACD;EACF,CAvIiC,CAwIlC;EACA;EACA;EACA;;;EACA,MAAMsD,WAAW,GAAG,CAACxO,CAAC,IAAI,CAAN,KAAYA,CAAC,GAAG,CAAhB,CAApB;;EAEA,KAAK6N,MAAM,GAAG,CAAT,EAAYzN,CAAC,GAAG,CAArB,EAAwBA,CAAC,GAAGJ,CAAC,GAAGA,CAAhC,EAAmCI,CAAC,EAApC,EAAwC;IACtC,IAAImC,CAAC,CAACnC,CAAD,CAAD,IAAQ,GAAZ,EAAiB;MACfyN,MAAM;IACP;EACF,CAlJiC,CAmJlC;;;EACA,IAAIA,MAAM,GAAGW,WAAb,EAA0B;IACxB,KAAKpO,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGJ,CAAhB,EAAmBI,CAAC,EAApB,EAAwB;MACtBmC,CAAC,CAACnC,CAAC,GAAGJ,CAAJ,GAAQgD,CAAT,CAAD,IAAgB,CAAC,GAAjB;IACD;EACF;;EACD,OAAO,CAAP;AACD;AAED,OAAO,SAASyL,qBAAT,CAA+BjG,OAA/B,EAAwCoD,MAAxC,EAAgD;EACrD,MAAMzL,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,CAA9C,CAAZ,CADqD,CAGrD;;EACAA,GAAG,CAAC,CAAD,CAAH,GAASqI,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAApB,GAA0BA,OAAO,CAAC,CAAD,CAA1C;EACArI,GAAG,CAAC,CAAD,CAAH,GAASqI,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAApB,GAA0BA,OAAO,CAAC,CAAD,CAA1C;EACArI,GAAG,CAAC,EAAD,CAAH,GAAU,CAACqI,OAAO,CAAC,CAAD,CAAR,GAAcA,OAAO,CAAC,CAAD,CAArB,GAA2BA,OAAO,CAAC,CAAD,CAA5C;EACArI,GAAG,CAAC,EAAD,CAAH,GAAU,CAACqI,OAAO,CAAC,CAAD,CAAR,GAAcA,OAAO,CAAC,CAAD,CAArB,GAA2BA,OAAO,CAAC,CAAD,CAA5C,CAPqD,CASrD;;EACArI,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAH,GAASqI,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAAtC;EACArI,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAH,GAASqI,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAAtC;EACArI,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,EAAD,CAAH,GAAUqI,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAAvC;EAEArI,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAH,GAASqI,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAAtC;EACArI,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,EAAD,CAAH,GAAUqI,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAAvC;EACArI,GAAG,CAAC,EAAD,CAAH,GAAUA,GAAG,CAAC,EAAD,CAAH,GAAUqI,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAAxC;EAEA,MAAMkG,YAAY,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,CAA9C,CAArB;EACA,MAAMC,WAAW,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAApB,CAnBqD,CAqBrD;EACA;EACA;;EACA,MAAMC,KAAK,GAAG,CAAC,GAAGzO,GAAJ,CAAd;EACAsN,OAAO,CAACmB,KAAD,EAAQ,CAAR,EAAWD,WAAX,EAAwBD,YAAxB,CAAP,CAzBqD,CA2BrD;;EACA9C,MAAM,CAAC,CAAD,CAAN,GAAY8C,YAAY,CAAC,CAAD,CAAxB;EACA9C,MAAM,CAAC,CAAD,CAAN,GAAY8C,YAAY,CAAC,CAAD,CAAxB;EACA9C,MAAM,CAAC,CAAD,CAAN,GAAY8C,YAAY,CAAC,CAAD,CAAxB;EACA9C,MAAM,CAAC,CAAD,CAAN,GAAY8C,YAAY,CAAC,EAAD,CAAxB;AACD;AAED,OAAO,SAASG,kBAAT,CAA4BC,MAA5B,EAAoCC,MAApC,EAA4CC,QAA5C,EAAsD;EAC3D,MAAMnD,EAAE,GAAGiD,MAAM,CAAC,CAAD,CAAN,GAAYC,MAAM,CAAC,CAAD,CAA7B;EACA,MAAMjD,EAAE,GAAGgD,MAAM,CAAC,CAAD,CAAN,GAAYC,MAAM,CAAC,CAAD,CAA7B;EACA,MAAMhD,EAAE,GAAG+C,MAAM,CAAC,CAAD,CAAN,GAAYC,MAAM,CAAC,CAAD,CAA7B;EACA,MAAM/C,EAAE,GAAG8C,MAAM,CAAC,CAAD,CAAN,GAAYC,MAAM,CAAC,CAAD,CAA7B;EAEA,MAAME,EAAE,GAAGH,MAAM,CAAC,CAAD,CAAN,GAAYC,MAAM,CAAC,CAAD,CAA7B;EACA,MAAM9C,EAAE,GAAG6C,MAAM,CAAC,CAAD,CAAN,GAAYC,MAAM,CAAC,CAAD,CAA7B;EACA,MAAM3C,EAAE,GAAG0C,MAAM,CAAC,CAAD,CAAN,GAAYC,MAAM,CAAC,CAAD,CAA7B;EACA,MAAM1C,EAAE,GAAGyC,MAAM,CAAC,CAAD,CAAN,GAAYC,MAAM,CAAC,CAAD,CAA7B;EAEA,MAAMG,EAAE,GAAGJ,MAAM,CAAC,CAAD,CAAN,GAAYC,MAAM,CAAC,CAAD,CAA7B;EACA,MAAMI,EAAE,GAAGL,MAAM,CAAC,CAAD,CAAN,GAAYC,MAAM,CAAC,CAAD,CAA7B;EACA,MAAM7C,EAAE,GAAG4C,MAAM,CAAC,CAAD,CAAN,GAAYC,MAAM,CAAC,CAAD,CAA7B;EACA,MAAMzC,EAAE,GAAGwC,MAAM,CAAC,CAAD,CAAN,GAAYC,MAAM,CAAC,CAAD,CAA7B;EAEA,MAAMK,EAAE,GAAGN,MAAM,CAAC,CAAD,CAAN,GAAYC,MAAM,CAAC,CAAD,CAA7B;EACA,MAAMM,EAAE,GAAGP,MAAM,CAAC,CAAD,CAAN,GAAYC,MAAM,CAAC,CAAD,CAA7B;EACA,MAAMO,EAAE,GAAGR,MAAM,CAAC,CAAD,CAAN,GAAYC,MAAM,CAAC,CAAD,CAA7B;EACA,MAAM5C,EAAE,GAAG2C,MAAM,CAAC,CAAD,CAAN,GAAYC,MAAM,CAAC,CAAD,CAA7B;EAEAC,QAAQ,CAAC,CAAD,CAAR,GAAcnD,EAAE,GAAGI,EAAL,GAAUC,EAAV,GAAeC,EAA7B;EACA6C,QAAQ,CAAC,CAAD,CAAR,GAAclD,EAAE,GAAGmD,EAAL,GAAU3C,EAAV,GAAegD,EAA7B;EACAN,QAAQ,CAAC,CAAD,CAAR,GAAcjD,EAAE,GAAGM,EAAL,GAAU6C,EAAV,GAAeG,EAA7B;EACAL,QAAQ,CAAC,CAAD,CAAR,GAAchD,EAAE,GAAGI,EAAL,GAAU+C,EAAV,GAAeC,EAA7B;AACD;AAED,OAAO,SAASG,gBAAT,CAA0B/E,KAA1B,EAAiClG,OAAjC,EAA0C;EAC/C;EACA,KAAK,IAAIlE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;IAC1BkE,OAAO,CAAClE,CAAD,CAAP,GAAaoK,KAAK,CAACpK,CAAD,CAAlB;EACD,CAJ8C,CAM/C;;;EACA,MAAM8F,KAAK,GAAG1F,WAAW,CAAC,CAAD,CAAzB;EACA,MAAMsM,KAAK,GAAGtM,WAAW,CAAC,CAAD,CAAzB;EACA,IAAImI,OAAJ,CAT+C,CAW/C;;EACA,KAAK,IAAIvI,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;IAC1B,MAAMoP,EAAE,GAAG3O,IAAI,CAAC+D,GAAL,CAASN,OAAO,CAAClE,CAAC,GAAG,CAAL,CAAhB,CAAX;IACA,MAAMgF,EAAE,GAAGvE,IAAI,CAAC+D,GAAL,CAASN,OAAO,CAAClE,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAhB,CAAX;IACA,MAAMqP,EAAE,GAAG5O,IAAI,CAAC+D,GAAL,CAASN,OAAO,CAAClE,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAhB,CAAX;IACAuI,OAAO,GAAGvD,EAAE,GAAGoK,EAAL,GAAUpK,EAAV,GAAeoK,EAAzB;IACA7G,OAAO,GAAG8G,EAAE,GAAG9G,OAAL,GAAe8G,EAAf,GAAoB9G,OAA9B;IACAzC,KAAK,CAAC9F,CAAD,CAAL,GAAW,CAAX;;IACA,IAAIuI,OAAO,KAAK,CAAhB,EAAmB;MACjBzC,KAAK,CAAC9F,CAAD,CAAL,IAAYuI,OAAZ;IACD;EACF,CAtB8C,CAwB/C;;;EACA,MAAM6G,EAAE,GAAG3O,IAAI,CAAC+D,GAAL,CAASN,OAAO,CAAC,CAAD,CAAhB,IAAuB4B,KAAK,CAAC,CAAD,CAAvC;EACA,MAAMd,EAAE,GAAGvE,IAAI,CAAC+D,GAAL,CAASN,OAAO,CAAC,CAAD,CAAhB,IAAuB4B,KAAK,CAAC,CAAD,CAAvC;EACA,MAAMuJ,EAAE,GAAG5O,IAAI,CAAC+D,GAAL,CAASN,OAAO,CAAC,CAAD,CAAhB,IAAuB4B,KAAK,CAAC,CAAD,CAAvC;EACA4G,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX;EACAnE,OAAO,GAAG6G,EAAV;;EACA,IAAIpK,EAAE,IAAIuD,OAAV,EAAmB;IACjBA,OAAO,GAAGvD,EAAV;IACA0H,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX;EACD;;EACD,IAAI2C,EAAE,IAAI9G,OAAV,EAAmB;IACjBmE,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX;EACD;;EACD,IAAIA,KAAK,CAAC,CAAD,CAAL,KAAa,CAAjB,EAAoB;IAClB;IACAzM,qBAAqB,CAACiE,OAAD,EAAU,CAAV,EAAawI,KAAK,CAAC,CAAD,CAAlB,EAAuB,CAAvB,CAArB;IACA5G,KAAK,CAAC4G,KAAK,CAAC,CAAD,CAAN,CAAL,GAAkB5G,KAAK,CAAC,CAAD,CAAvB;EACD,CAzC8C,CA2C/C;;;EACA,MAAMb,EAAE,GAAGxE,IAAI,CAAC+D,GAAL,CAASN,OAAO,CAAC,CAAD,CAAhB,IAAuB4B,KAAK,CAAC,CAAD,CAAvC;EACA,MAAMwJ,EAAE,GAAG7O,IAAI,CAAC+D,GAAL,CAASN,OAAO,CAAC,CAAD,CAAhB,IAAuB4B,KAAK,CAAC,CAAD,CAAvC;EACA4G,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX;EACAnE,OAAO,GAAGtD,EAAV;;EACA,IAAIqK,EAAE,IAAI/G,OAAV,EAAmB;IACjBmE,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX,CADiB,CAEjB;;IACAzM,qBAAqB,CAACiE,OAAD,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAArB;EACD,CApD8C,CAsD/C;;;EACAwI,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX,CAvD+C,CAyD/C;EACA;EACA;;EACA,IAAI6C,IAAI,GAAG,CAAX;;EACA,IAAInE,cAAc,CAAClH,OAAD,CAAd,GAA0B,CAA9B,EAAiC;IAC/BqL,IAAI,GAAG,CAAP;;IACA,KAAK,IAAIvP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;MAC1BkE,OAAO,CAAClE,CAAD,CAAP,GAAa,CAACkE,OAAO,CAAClE,CAAD,CAArB;IACD;EACF,CAlE8C,CAoE/C;EACA;EACA;EACA;;;EACA,MAAMwP,IAAI,GAAGpP,WAAW,CAAC,CAAD,CAAxB;EACAiO,qBAAqB,CAACnK,OAAD,EAAUsL,IAAV,CAArB;EACAjE,qBAAqB,CAACiE,IAAD,EAAOtL,OAAP,CAArB,CA1E+C,CA4E/C;;EACA,IAAIqL,IAAJ,EAAU;IACR,KAAK,IAAIvP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;MAC1BkE,OAAO,CAAClE,CAAD,CAAP,GAAa,CAACkE,OAAO,CAAClE,CAAD,CAArB;IACD;EACF,CAjF8C,CAmF/C;;;EACA,IAAI0M,KAAK,CAAC,CAAD,CAAL,KAAa,CAAjB,EAAoB;IAClBzM,qBAAqB,CAACiE,OAAD,EAAU,CAAV,EAAawI,KAAK,CAAC,CAAD,CAAlB,EAAuB,CAAvB,CAArB;EACD;;EACD,IAAIA,KAAK,CAAC,CAAD,CAAL,KAAa,CAAjB,EAAoB;IAClBzM,qBAAqB,CAACiE,OAAD,EAAU,CAAV,EAAawI,KAAK,CAAC,CAAD,CAAlB,EAAuB,CAAvB,CAArB;EACD;AACF;AAED,OAAO,SAAS+C,cAAT,CAAwBrF,KAAxB,EAA+BsF,GAA/B,EAAoCC,KAApC,EAA2C;EAChD,IAAI3P,CAAJ;EACA,IAAI4C,CAAJ;EACA,IAAIkI,CAAJ;EACA,IAAIxC,IAAJ;EACA,IAAIvI,GAAJ;EACA,IAAI6P,MAAJ,CANgD,CAQhD;;EACA,MAAMtF,KAAK,GAAG,CAAC,GAAGF,KAAJ,CAAd,CATgD,CAWhD;;EACAiD,OAAO,CAAC/C,KAAD,EAAQ,CAAR,EAAWoF,GAAX,EAAgBC,KAAhB,CAAP,CAZgD,CAchD;;EACA,IAAID,GAAG,CAAC,CAAD,CAAH,KAAWA,GAAG,CAAC,CAAD,CAAd,IAAqBA,GAAG,CAAC,CAAD,CAAH,KAAWA,GAAG,CAAC,CAAD,CAAvC,EAA4C;IAC1CrE,WAAW,CAACsE,KAAD,CAAX;IACA;EACD,CAlB+C,CAoBhD;;;EACA5E,YAAY,CAAC4E,KAAD,EAAQA,KAAR,CAAZ,CArBgD,CAuBhD;EACA;;EACA,KAAK3P,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;IACtB;IACA,IAAI0P,GAAG,CAAC,CAAC1P,CAAC,GAAG,CAAL,IAAU,CAAX,CAAH,KAAqB0P,GAAG,CAAC,CAAC1P,CAAC,GAAG,CAAL,IAAU,CAAX,CAA5B,EAA2C;MACzC;MACA4P,MAAM,GAAGnP,IAAI,CAAC+D,GAAL,CAASmL,KAAK,CAAC3P,CAAC,GAAG,CAAL,CAAd,CAAT;MACAsI,IAAI,GAAG,CAAP;;MACA,KAAK1F,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;QACtB,IAAIgN,MAAM,IAAI7P,GAAG,GAAGU,IAAI,CAAC+D,GAAL,CAASmL,KAAK,CAAC3P,CAAC,GAAG,CAAJ,GAAQ4C,CAAT,CAAd,CAAV,CAAV,EAAiD;UAC/CgN,MAAM,GAAG7P,GAAT;UACAuI,IAAI,GAAG1F,CAAP;QACD;MACF,CATwC,CAUzC;;;MACA,IAAI0F,IAAI,KAAKtI,CAAb,EAAgB;QACdD,GAAG,GAAG2P,GAAG,CAACpH,IAAD,CAAT;QACAoH,GAAG,CAACpH,IAAD,CAAH,GAAYoH,GAAG,CAAC1P,CAAD,CAAf;QACA0P,GAAG,CAAC1P,CAAD,CAAH,GAASD,GAAT;QACAL,kBAAkB,CAACiQ,KAAD,EAAQ,CAAR,EAAW3P,CAAX,EAAcsI,IAAd,CAAlB;MACD,CAhBwC,CAiBzC;;;MACA,IAAIqH,KAAK,CAACrH,IAAI,GAAG,CAAP,GAAWA,IAAZ,CAAL,GAAyB,CAA7B,EAAgC;QAC9BqH,KAAK,CAACrH,IAAI,GAAG,CAAR,CAAL,GAAkB,CAACqH,KAAK,CAACrH,IAAI,GAAG,CAAR,CAAxB;QACAqH,KAAK,CAACrH,IAAI,GAAG,CAAP,GAAW,CAAZ,CAAL,GAAsB,CAACqH,KAAK,CAACrH,IAAI,GAAG,CAAP,GAAW,CAAZ,CAA5B;QACAqH,KAAK,CAACrH,IAAI,GAAG,CAAP,GAAW,CAAZ,CAAL,GAAsB,CAACqH,KAAK,CAACrH,IAAI,GAAG,CAAP,GAAW,CAAZ,CAA5B;MACD,CAtBwC,CAwBzC;;;MACA1F,CAAC,GAAG,CAAC0F,IAAI,GAAG,CAAR,IAAa,CAAjB;MACAwC,CAAC,GAAG,CAACxC,IAAI,GAAG,CAAR,IAAa,CAAjB;MAEAqH,KAAK,CAAC/M,CAAC,GAAG,CAAL,CAAL,GAAe,GAAf;MACA+M,KAAK,CAAC/M,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAL,GAAmB,GAAnB;MACA+M,KAAK,CAAC/M,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAL,GAAmB,GAAnB;MACA+M,KAAK,CAAC/M,CAAC,GAAG,CAAJ,GAAQA,CAAT,CAAL,GAAmB,GAAnB;MACA,MAAMiN,QAAQ,GAAG1L,KAAK,CACpB,CAACwL,KAAK,CAACrH,IAAI,GAAG,CAAR,CAAN,EAAkBqH,KAAK,CAACrH,IAAI,GAAG,CAAP,GAAW,CAAZ,CAAvB,EAAuCqH,KAAK,CAACrH,IAAI,GAAG,CAAP,GAAW,CAAZ,CAA5C,CADoB,EAEpB,CAACqH,KAAK,CAAC/M,CAAC,GAAG,CAAL,CAAN,EAAe+M,KAAK,CAAC/M,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAApB,EAAiC+M,KAAK,CAAC/M,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAtC,CAFoB,EAGpB,EAHoB,CAAtB;MAKA+B,SAAS,CAACkL,QAAD,CAAT;MACA,MAAMC,QAAQ,GAAG3L,KAAK,CACpB0L,QADoB,EAEpB,CAACF,KAAK,CAACrH,IAAI,GAAG,CAAR,CAAN,EAAkBqH,KAAK,CAACrH,IAAI,GAAG,CAAP,GAAW,CAAZ,CAAvB,EAAuCqH,KAAK,CAACrH,IAAI,GAAG,CAAP,GAAW,CAAZ,CAA5C,CAFoB,EAGpB,EAHoB,CAAtB;;MAKA,KAAK,IAAIqF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;QAC1BgC,KAAK,CAAC7E,CAAC,GAAG,CAAJ,GAAQ6C,CAAT,CAAL,GAAmBkC,QAAQ,CAAClC,CAAD,CAA3B;QACAgC,KAAK,CAAC/M,CAAC,GAAG,CAAJ,GAAQ+K,CAAT,CAAL,GAAmBmC,QAAQ,CAACnC,CAAD,CAA3B;MACD,CA9CwC,CAgDzC;;;MACA5C,YAAY,CAAC4E,KAAD,EAAQA,KAAR,CAAZ;MACA;IACD;EACF,CA/E+C,CAiFhD;EACA;EAEA;EACA;;;EACAC,MAAM,GAAGnP,IAAI,CAAC+D,GAAL,CAASmL,KAAK,CAAC,CAAD,CAAd,CAAT;EACArH,IAAI,GAAG,CAAP;;EACA,KAAKtI,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;IACtB,IAAI4P,MAAM,IAAI7P,GAAG,GAAGU,IAAI,CAAC+D,GAAL,CAASmL,KAAK,CAAC3P,CAAC,GAAG,CAAL,CAAd,CAAV,CAAV,EAA6C;MAC3C4P,MAAM,GAAG7P,GAAT;MACAuI,IAAI,GAAGtI,CAAP;IACD;EACF,CA7F+C,CA8FhD;;;EACA,IAAIsI,IAAI,KAAK,CAAb,EAAgB;IACd,MAAMyH,WAAW,GAAGL,GAAG,CAACpH,IAAD,CAAvB;IACAoH,GAAG,CAACpH,IAAD,CAAH,GAAYoH,GAAG,CAAC,CAAD,CAAf;IACAA,GAAG,CAAC,CAAD,CAAH,GAASK,WAAT;IACArQ,kBAAkB,CAACiQ,KAAD,EAAQ,CAAR,EAAWrH,IAAX,EAAiB,CAAjB,CAAlB;EACD,CApG+C,CAqGhD;;;EACA,IAAI7H,IAAI,CAAC+D,GAAL,CAASmL,KAAK,CAAC,CAAD,CAAd,IAAqBlP,IAAI,CAAC+D,GAAL,CAASmL,KAAK,CAAC,CAAD,CAAd,CAAzB,EAA6C;IAC3C,MAAMI,WAAW,GAAGL,GAAG,CAAC,CAAD,CAAvB;IACAA,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAZ;IACAA,GAAG,CAAC,CAAD,CAAH,GAASK,WAAT;IACArQ,kBAAkB,CAACiQ,KAAD,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,CAAlB;EACD,CA3G+C,CA6GhD;;;EACA,KAAK3P,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;IACtB,IAAI2P,KAAK,CAAC3P,CAAC,GAAG,CAAJ,GAAQA,CAAT,CAAL,GAAmB,CAAvB,EAA0B;MACxB2P,KAAK,CAAC3P,CAAC,GAAG,CAAL,CAAL,GAAe,CAAC2P,KAAK,CAAC3P,CAAC,GAAG,CAAL,CAArB;MACA2P,KAAK,CAAC3P,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAL,GAAmB,CAAC2P,KAAK,CAAC3P,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAzB;MACA2P,KAAK,CAAC3P,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAL,GAAmB,CAAC2P,KAAK,CAAC3P,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAzB;IACD;EACF,CApH+C,CAqHhD;;;EACA,IAAIoL,cAAc,CAACuE,KAAD,CAAd,GAAwB,CAA5B,EAA+B;IAC7BA,KAAK,CAAC,CAAD,CAAL,GAAW,CAACA,KAAK,CAAC,CAAD,CAAjB;IACAA,KAAK,CAAC,CAAD,CAAL,GAAW,CAACA,KAAK,CAAC,CAAD,CAAjB;IACAA,KAAK,CAAC,CAAD,CAAL,GAAW,CAACA,KAAK,CAAC,CAAD,CAAjB;EACD,CA1H+C,CA4HhD;;;EACA5E,YAAY,CAAC4E,KAAD,EAAQA,KAAR,CAAZ;AACD;AAED,OAAO,SAASK,6BAAT,CAAuC5F,KAAvC,EAA8C6F,KAA9C,EAAqDP,GAArD,EAA0DQ,MAA1D,EAAkE;EACvE,IAAIlQ,CAAJ,CADuE,CAEvE;;EACA,MAAMmQ,CAAC,GAAG,CAAC,GAAG/F,KAAJ,CAAV,CAHuE,CAKvE;;EACA,MAAMgG,CAAC,GAAGhF,cAAc,CAAC+E,CAAD,CAAxB;;EACA,IAAIC,CAAC,GAAG,CAAR,EAAW;IACT,KAAKpQ,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;MACtBmQ,CAAC,CAACnQ,CAAD,CAAD,GAAO,CAACmQ,CAAC,CAACnQ,CAAD,CAAT;IACD;EACF,CAXsE,CAavE;;;EACAmP,gBAAgB,CAACgB,CAAD,EAAIF,KAAJ,CAAhB;EACAlF,YAAY,CAACoF,CAAD,EAAIA,CAAJ,CAAZ;EACAhG,gBAAgB,CAACgG,CAAD,EAAIF,KAAJ,EAAWC,MAAX,CAAhB;EACAT,cAAc,CAACS,MAAD,EAASR,GAAT,EAAcQ,MAAd,CAAd;EACA/F,gBAAgB,CAAC8F,KAAD,EAAQC,MAAR,EAAgBD,KAAhB,CAAhB;EACAlF,YAAY,CAACmF,MAAD,EAASA,MAAT,CAAZ,CAnBuE,CAqBvE;;EACA,IAAIE,CAAC,GAAG,CAAR,EAAW;IACTV,GAAG,CAAC,CAAD,CAAH,GAAS,CAACA,GAAG,CAAC,CAAD,CAAb;IACAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAACA,GAAG,CAAC,CAAD,CAAb;IACAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAACA,GAAG,CAAC,CAAD,CAAb;EACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASW,oBAAT,CAA8BC,CAA9B,EAAiC5D,KAAjC,EAAwCrM,IAAxC,EAA8C;EACnD,IAAIL,CAAJ;EACA,IAAI4C,CAAJ;EACA,IAAIkI,CAAJ;EACA,IAAIvC,OAAJ;EACA,IAAID,IAAI,GAAG,CAAX;EACA,IAAI5D,GAAJ;EACA,IAAI6L,KAAJ;EACA,IAAIC,KAAJ;EACA,MAAM1K,KAAK,GAAG1F,WAAW,CAACC,IAAD,CAAzB,CATmD,CAWnD;EACA;EACA;;EACA,KAAKL,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGK,IAAhB,EAAsBL,CAAC,EAAvB,EAA2B;IACzB,KAAKuI,OAAO,GAAG,GAAV,EAAe3F,CAAC,GAAG,CAAxB,EAA2BA,CAAC,GAAGvC,IAA/B,EAAqCuC,CAAC,EAAtC,EAA0C;MACxC,IAAI,CAAC4N,KAAK,GAAG/P,IAAI,CAAC+D,GAAL,CAAS8L,CAAC,CAACtQ,CAAC,GAAGK,IAAJ,GAAWuC,CAAZ,CAAV,CAAT,IAAsC2F,OAA1C,EAAmD;QACjDA,OAAO,GAAGiI,KAAV;MACD;IACF;;IAED,IAAIjI,OAAO,KAAK,GAAhB,EAAqB;MACnBnJ,eAAe,CAAC,gCAAD,CAAf;MACA,OAAO,CAAP;IACD;;IACD0G,KAAK,CAAC9F,CAAD,CAAL,GAAW,MAAMuI,OAAjB;EACD,CA1BkD,CA2BnD;EACA;EACA;;;EACA,KAAK3F,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGvC,IAAhB,EAAsBuC,CAAC,EAAvB,EAA2B;IACzB,KAAK5C,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG4C,CAAhB,EAAmB5C,CAAC,EAApB,EAAwB;MACtB0E,GAAG,GAAG4L,CAAC,CAACtQ,CAAC,GAAGK,IAAJ,GAAWuC,CAAZ,CAAP;;MACA,KAAKkI,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG9K,CAAhB,EAAmB8K,CAAC,EAApB,EAAwB;QACtBpG,GAAG,IAAI4L,CAAC,CAACtQ,CAAC,GAAGK,IAAJ,GAAWyK,CAAZ,CAAD,GAAkBwF,CAAC,CAACxF,CAAC,GAAGzK,IAAJ,GAAWuC,CAAZ,CAA1B;MACD;;MACD0N,CAAC,CAACtQ,CAAC,GAAGK,IAAJ,GAAWuC,CAAZ,CAAD,GAAkB8B,GAAlB;IACD,CAPwB,CAQzB;IACA;IACA;;;IACA,KAAK6D,OAAO,GAAG,GAAV,EAAevI,CAAC,GAAG4C,CAAxB,EAA2B5C,CAAC,GAAGK,IAA/B,EAAqCL,CAAC,EAAtC,EAA0C;MACxC0E,GAAG,GAAG4L,CAAC,CAACtQ,CAAC,GAAGK,IAAJ,GAAWuC,CAAZ,CAAP;;MACA,KAAKkI,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGlI,CAAhB,EAAmBkI,CAAC,EAApB,EAAwB;QACtBpG,GAAG,IAAI4L,CAAC,CAACtQ,CAAC,GAAGK,IAAJ,GAAWyK,CAAZ,CAAD,GAAkBwF,CAAC,CAACxF,CAAC,GAAGzK,IAAJ,GAAWuC,CAAZ,CAA1B;MACD;;MACD0N,CAAC,CAACtQ,CAAC,GAAGK,IAAJ,GAAWuC,CAAZ,CAAD,GAAkB8B,GAAlB;;MAEA,IAAI,CAAC6L,KAAK,GAAGzK,KAAK,CAAC9F,CAAD,CAAL,GAAWS,IAAI,CAAC+D,GAAL,CAASE,GAAT,CAApB,KAAsC6D,OAA1C,EAAmD;QACjDA,OAAO,GAAGgI,KAAV;QACAjI,IAAI,GAAGtI,CAAP;MACD;IACF,CAtBwB,CAuBzB;IACA;IACA;;;IACA,IAAI4C,CAAC,KAAK0F,IAAV,EAAgB;MACd,KAAKwC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGzK,IAAhB,EAAsByK,CAAC,EAAvB,EAA2B;QACzByF,KAAK,GAAGD,CAAC,CAAChI,IAAI,GAAGjI,IAAP,GAAcyK,CAAf,CAAT;QACAwF,CAAC,CAAChI,IAAI,GAAGjI,IAAP,GAAcyK,CAAf,CAAD,GAAqBwF,CAAC,CAAC1N,CAAC,GAAGvC,IAAJ,GAAWyK,CAAZ,CAAtB;QACAwF,CAAC,CAAC1N,CAAC,GAAGvC,IAAJ,GAAWyK,CAAZ,CAAD,GAAkByF,KAAlB;MACD;;MACDzK,KAAK,CAACwC,IAAD,CAAL,GAAcxC,KAAK,CAAClD,CAAD,CAAnB;IACD,CAjCwB,CAkCzB;IACA;IACA;;;IACA8J,KAAK,CAAC9J,CAAD,CAAL,GAAW0F,IAAX;;IAEA,IAAI7H,IAAI,CAAC+D,GAAL,CAAS8L,CAAC,CAAC1N,CAAC,GAAGvC,IAAJ,GAAWuC,CAAZ,CAAV,KAA6BrD,gBAAjC,EAAmD;MACjDH,eAAe,CAAC,gCAAD,CAAf;MACA,OAAO,CAAP;IACD;;IAED,IAAIwD,CAAC,KAAKvC,IAAI,GAAG,CAAjB,EAAoB;MAClBkQ,KAAK,GAAG,MAAMD,CAAC,CAAC1N,CAAC,GAAGvC,IAAJ,GAAWuC,CAAZ,CAAf;;MACA,KAAK5C,CAAC,GAAG4C,CAAC,GAAG,CAAb,EAAgB5C,CAAC,GAAGK,IAApB,EAA0BL,CAAC,EAA3B,EAA+B;QAC7BsQ,CAAC,CAACtQ,CAAC,GAAGK,IAAJ,GAAWuC,CAAZ,CAAD,IAAmB2N,KAAnB;MACD;IACF;EACF;;EACD,OAAO,CAAP;AACD;AAED,OAAO,SAASE,mBAAT,CAA6BH,CAA7B,EAAgC5D,KAAhC,EAAuCrK,CAAvC,EAA0ChC,IAA1C,EAAgD;EACrD,IAAIL,CAAJ;EACA,IAAI4C,CAAJ;EACA,IAAIsL,EAAJ;EACA,IAAIwC,GAAJ;EACA,IAAIhM,GAAJ,CALqD,CAMrD;EACA;EACA;EACA;;EACA,KAAKwJ,EAAE,GAAG,CAAC,CAAN,EAASlO,CAAC,GAAG,CAAlB,EAAqBA,CAAC,GAAGK,IAAzB,EAA+BL,CAAC,EAAhC,EAAoC;IAClC0Q,GAAG,GAAGhE,KAAK,CAAC1M,CAAD,CAAX;IACA0E,GAAG,GAAGrC,CAAC,CAACqO,GAAD,CAAP;IACArO,CAAC,CAACqO,GAAD,CAAD,GAASrO,CAAC,CAACrC,CAAD,CAAV;;IAEA,IAAIkO,EAAE,IAAI,CAAV,EAAa;MACX,KAAKtL,CAAC,GAAGsL,EAAT,EAAatL,CAAC,IAAI5C,CAAC,GAAG,CAAtB,EAAyB4C,CAAC,EAA1B,EAA8B;QAC5B8B,GAAG,IAAI4L,CAAC,CAACtQ,CAAC,GAAGK,IAAJ,GAAWuC,CAAZ,CAAD,GAAkBP,CAAC,CAACO,CAAD,CAA1B;MACD;IACF,CAJD,MAIO,IAAI8B,GAAG,KAAK,GAAZ,EAAiB;MACtBwJ,EAAE,GAAGlO,CAAL;IACD;;IAEDqC,CAAC,CAACrC,CAAD,CAAD,GAAO0E,GAAP;EACD,CAxBoD,CAyBrD;EACA;EACA;;;EACA,KAAK1E,CAAC,GAAGK,IAAI,GAAG,CAAhB,EAAmBL,CAAC,IAAI,CAAxB,EAA2BA,CAAC,EAA5B,EAAgC;IAC9B0E,GAAG,GAAGrC,CAAC,CAACrC,CAAD,CAAP;;IACA,KAAK4C,CAAC,GAAG5C,CAAC,GAAG,CAAb,EAAgB4C,CAAC,GAAGvC,IAApB,EAA0BuC,CAAC,EAA3B,EAA+B;MAC7B8B,GAAG,IAAI4L,CAAC,CAACtQ,CAAC,GAAGK,IAAJ,GAAWuC,CAAZ,CAAD,GAAkBP,CAAC,CAACO,CAAD,CAA1B;IACD;;IACDP,CAAC,CAACrC,CAAD,CAAD,GAAO0E,GAAG,GAAG4L,CAAC,CAACtQ,CAAC,GAAGK,IAAJ,GAAWL,CAAZ,CAAd;EACD;AACF;AAED,OAAO,SAAS2Q,iBAAT,CAA2BL,CAA3B,EAA8BjO,CAA9B,EAAiChC,IAAjC,EAAuC;EAC5C;EACA,IAAIA,IAAI,KAAK,CAAb,EAAgB;IACd,MAAM2D,CAAC,GAAG5D,WAAW,CAAC,CAAD,CAArB;IACA,MAAM0J,GAAG,GAAG/B,cAAc,CAACuI,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,EAAaA,CAAC,CAAC,CAAD,CAAd,EAAmBA,CAAC,CAAC,CAAD,CAApB,CAA1B;;IAEA,IAAIxG,GAAG,KAAK,GAAZ,EAAiB;MACf;MACA,OAAO,CAAP;IACD;;IAED9F,CAAC,CAAC,CAAD,CAAD,GAAO,CAACsM,CAAC,CAAC,CAAD,CAAD,GAAOjO,CAAC,CAAC,CAAD,CAAR,GAAciO,CAAC,CAAC,CAAD,CAAD,GAAOjO,CAAC,CAAC,CAAD,CAAvB,IAA8ByH,GAArC;IACA9F,CAAC,CAAC,CAAD,CAAD,GAAO,CAAC,EAAEsM,CAAC,CAAC,CAAD,CAAD,GAAOjO,CAAC,CAAC,CAAD,CAAV,IAAiBiO,CAAC,CAAC,CAAD,CAAD,GAAOjO,CAAC,CAAC,CAAD,CAA1B,IAAiCyH,GAAxC;IAEAzH,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAAR;IACA3B,CAAC,CAAC,CAAD,CAAD,GAAO2B,CAAC,CAAC,CAAD,CAAR;IACA,OAAO,CAAP;EACD;;EAED,IAAI3D,IAAI,KAAK,CAAb,EAAgB;IACd,IAAIiQ,CAAC,CAAC,CAAD,CAAD,KAAS,GAAb,EAAkB;MAChB;MACA,OAAO,CAAP;IACD;;IAEDjO,CAAC,CAAC,CAAD,CAAD,IAAQiO,CAAC,CAAC,CAAD,CAAT;IACA,OAAO,CAAP;EACD,CA3B2C,CA6B5C;EACA;EACA;EAEA;;;EACA,MAAM5D,KAAK,GAAGtM,WAAW,CAACC,IAAD,CAAzB,CAlC4C,CAoC5C;;EACA,IAAIgQ,oBAAoB,CAACC,CAAD,EAAI5D,KAAJ,EAAWrM,IAAX,CAApB,KAAyC,CAA7C,EAAgD;IAC9C,OAAO,CAAP;EACD;;EACDoQ,mBAAmB,CAACH,CAAD,EAAI5D,KAAJ,EAAWrK,CAAX,EAAchC,IAAd,CAAnB;EAEA,OAAO,CAAP;AACD;AAED,OAAO,SAASuQ,YAAT,CAAsBN,CAAtB,EAAyBO,EAAzB,EAA6BxQ,IAA7B,EAAgE;EAAA,IAA7BqM,KAA6B,uEAArB,IAAqB;EAAA,IAAfoE,MAAe,uEAAN,IAAM;EACrE,MAAMC,QAAQ,GAAGrE,KAAK,IAAItM,WAAW,CAACC,IAAD,CAArC;EACA,MAAM2Q,QAAQ,GAAGF,MAAM,IAAI1Q,WAAW,CAACC,IAAD,CAAtC,CAFqE,CAIrE;EACA;EACA;;EACA,IAAIgQ,oBAAoB,CAACC,CAAD,EAAIS,QAAJ,EAAc1Q,IAAd,EAAoB2Q,QAApB,CAApB,KAAsD,CAA1D,EAA6D;IAC3D,OAAO,CAAP;EACD;;EAED,KAAK,IAAIpO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvC,IAApB,EAA0BuC,CAAC,EAA3B,EAA+B;IAC7B,KAAK,IAAI5C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,IAApB,EAA0BL,CAAC,EAA3B,EAA+B;MAC7BgR,QAAQ,CAAChR,CAAD,CAAR,GAAc,GAAd;IACD;;IACDgR,QAAQ,CAACpO,CAAD,CAAR,GAAc,GAAd;IAEA6N,mBAAmB,CAACH,CAAD,EAAIS,QAAJ,EAAcC,QAAd,EAAwB3Q,IAAxB,CAAnB;;IAEA,KAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,IAApB,EAA0BL,CAAC,EAA3B,EAA+B;MAC7B6Q,EAAE,CAAC7Q,CAAC,GAAGK,IAAJ,GAAWuC,CAAZ,CAAF,GAAmBoO,QAAQ,CAAChR,CAAD,CAA3B;IACD;EACF;;EAED,OAAO,CAAP;AACD;AAED,OAAO,SAASiR,uBAAT,CAAiCX,CAAjC,EAAoCjQ,IAApC,EAA0C;EAC/C,IAAImB,QAAQ,GAAG,CAACyG,MAAM,CAACiJ,SAAvB;EACA,IAAIrP,QAAQ,GAAG,CAACoG,MAAM,CAACiJ,SAAvB,CAF+C,CAI/C;;EACA,KAAK,IAAIlR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,IAApB,EAA0BL,CAAC,EAA3B,EAA+B;IAC7B,KAAK,IAAI4C,CAAC,GAAG5C,CAAb,EAAgB4C,CAAC,GAAGvC,IAApB,EAA0BuC,CAAC,EAA3B,EAA+B;MAC7B,IAAInC,IAAI,CAAC+D,GAAL,CAAS8L,CAAC,CAACtQ,CAAC,GAAGK,IAAJ,GAAWuC,CAAZ,CAAV,IAA4Bf,QAAhC,EAA0C;QACxCA,QAAQ,GAAGpB,IAAI,CAAC+D,GAAL,CAAS8L,CAAC,CAACtQ,CAAC,GAAGK,IAAJ,GAAWuC,CAAZ,CAAV,CAAX;MACD;IACF;EACF,CAX8C,CAa/C;;;EACA,KAAK,IAAI5C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,IAApB,EAA0BL,CAAC,EAA3B,EAA+B;IAC7B,IAAIS,IAAI,CAAC+D,GAAL,CAAS8L,CAAC,CAACtQ,CAAC,GAAGK,IAAJ,GAAWL,CAAZ,CAAV,IAA4BwB,QAAhC,EAA0C;MACxCA,QAAQ,GAAGf,IAAI,CAAC+D,GAAL,CAAS8L,CAAC,CAACtQ,CAAC,GAAGK,IAAJ,GAAWL,CAAZ,CAAV,CAAX;IACD;EACF;;EAED,IAAIwB,QAAQ,KAAK,GAAjB,EAAsB;IACpB,OAAOyG,MAAM,CAACiJ,SAAd;EACD;;EACD,OAAOrP,QAAQ,GAAGL,QAAlB;AACD;AAED,OAAO,SAAS2P,MAAT,CAAgB/G,KAAhB,EAAuBkD,CAAvB,EAA0BnL,CAA1B,EAA6B;EAClC,OAAOkL,OAAO,CAACjD,KAAD,EAAQ,CAAR,EAAWkD,CAAX,EAAcnL,CAAd,CAAd;AACD;AAED,OAAO,SAASiP,4BAAT,CAAsCC,eAAtC,EAAuDC,EAAvD,EAA2DC,MAA3D,EAAmEC,EAAnE,EAAuE;EAC5E;EACA,IAAIH,eAAe,GAAGE,MAAtB,EAA8B;IAC5BnS,eAAe,CAAC,kDAAD,CAAf;IACA,OAAO,CAAP;EACD;;EAED,IAAIY,CAAJ;EACA,IAAI4C,CAAJ;EACA,IAAIkI,CAAJ,CAT4E,CAW5E;EACA;;EACA,MAAM2G,GAAG,GAAGrR,WAAW,CAACmR,MAAM,GAAGA,MAAV,CAAvB,CAb4E,CAalC;EAC1C;;EACA,MAAMG,SAAS,GAAGtR,WAAW,CAACmR,MAAD,CAA7B;EACA,MAAMI,SAAS,GAAGvR,WAAW,CAACmR,MAAM,GAAGA,MAAV,CAA7B,CAhB4E,CAkB5E;;EACA,KAAKzG,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGuG,eAAhB,EAAiCvG,CAAC,EAAlC,EAAsC;IACpC,KAAK9K,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGuR,MAAhB,EAAwBvR,CAAC,EAAzB,EAA6B;MAC3B,KAAK4C,CAAC,GAAG5C,CAAT,EAAY4C,CAAC,GAAG2O,MAAhB,EAAwB3O,CAAC,EAAzB,EAA6B;QAC3B6O,GAAG,CAACzR,CAAC,GAAGuR,MAAJ,GAAa3O,CAAd,CAAH,IAAuB0O,EAAE,CAACxG,CAAC,GAAGyG,MAAJ,GAAavR,CAAd,CAAF,GAAqBsR,EAAE,CAACxG,CAAC,GAAGyG,MAAJ,GAAa3O,CAAd,CAA9C;MACD;IACF;EACF,CAzB2E,CA2B5E;;;EACA,KAAK5C,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGuR,MAAhB,EAAwBvR,CAAC,EAAzB,EAA6B;IAC3B,KAAK4C,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG5C,CAAhB,EAAmB4C,CAAC,EAApB,EAAwB;MACtB6O,GAAG,CAACzR,CAAC,GAAGuR,MAAJ,GAAa3O,CAAd,CAAH,GAAsB6O,GAAG,CAAC7O,CAAC,GAAG2O,MAAJ,GAAavR,CAAd,CAAzB;IACD;EACF,CAhC2E,CAkC5E;;;EACAqN,OAAO,CAACoE,GAAD,EAAMF,MAAN,EAAcG,SAAd,EAAyBC,SAAzB,CAAP,CAnC4E,CAqC5E;EACA;;EACA,KAAK3R,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGuR,MAAhB,EAAwBvR,CAAC,EAAzB,EAA6B;IAC3BwR,EAAE,CAACxR,CAAD,CAAF,GAAQ2R,SAAS,CAAC3R,CAAC,GAAGuR,MAAJ,GAAaA,MAAb,GAAsB,CAAvB,CAAjB;EACD;;EAED,OAAO,CAAP;AACD;AAED,OAAO,SAASK,iBAAT,CACLP,eADK,EAELC,EAFK,EAGLC,MAHK,EAILM,EAJK,EAKLC,MALK,EAMLN,EANK,EAQL;EAAA,IADAO,gBACA,uEADmB,IACnB;;EACA;EACA,IAAIV,eAAe,GAAGE,MAAlB,IAA4BF,eAAe,GAAGS,MAAlD,EAA0D;IACxD1S,eAAe,CAAC,kDAAD,CAAf;IACA,OAAO,CAAP;EACD;;EAED,MAAM4S,YAAY,GAAG5R,WAAW,CAAC0R,MAAD,CAAhC;EACA,IAAIG,cAAc,GAAG,CAArB;EACA,IAAIC,GAAJ;EACA,IAAIC,OAAO,GAAG,CAAd;EACA,IAAInS,CAAJ;EACA,IAAI4C,CAAJ;EACA,IAAIkI,CAAJ;EACA,IAAIsH,eAAe,GAAG,CAAtB,CAdA,CAgBA;;EACA,IAAIL,gBAAJ,EAAsB;IACpB;IACA;IACA;IACA;IACA;IACA;IAEA;IACA,KAAKnP,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGkP,MAAhB,EAAwBlP,CAAC,EAAzB,EAA6B;MAC3BoP,YAAY,CAACpP,CAAD,CAAZ,GAAkB,CAAlB;IACD;;IACD,KAAK5C,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGqR,eAAhB,EAAiCrR,CAAC,EAAlC,EAAsC;MACpC,KAAK4C,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGkP,MAAhB,EAAwBlP,CAAC,EAAzB,EAA6B;QAC3B,IAAInC,IAAI,CAAC+D,GAAL,CAASqN,EAAE,CAAC7R,CAAC,GAAG8R,MAAJ,GAAalP,CAAd,CAAX,IAA+BrD,gBAAnC,EAAqD;UACnD0S,cAAc,GAAG,CAAjB;UACAD,YAAY,CAACpP,CAAD,CAAZ,GAAkB,CAAlB;QACD;MACF;IACF,CAnBmB,CAqBpB;;;IACA,IAAIqP,cAAc,IAAIH,MAAM,KAAK,CAAjC,EAAoC;MAClC1S,eAAe,CACb,2EADa,CAAf;MAGA,OAAOgS,4BAA4B,CAACC,eAAD,EAAkBC,EAAlB,EAAsBC,MAAtB,EAA8BC,EAA9B,CAAnC;IACD,CA3BmB,CA6BpB;IACA;IACA;;;IACA,IAAIS,cAAJ,EAAoB;MAClBG,eAAe,GAAG,CAAlB;IACD,CAFD,MAEO;MACL,KAAKxP,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGkP,MAAhB,EAAwBlP,CAAC,EAAzB,EAA6B;QAC3B,IAAIoP,YAAY,CAACpP,CAAD,CAAhB,EAAqB;UACnBwP,eAAe,GAAG,CAAlB;QACD;MACF;IACF;EACF,CA1DD,CA4DA;;;EACA,IAAIA,eAAJ,EAAqB;IACnB;IACA;IACAF,GAAG,GAAG9R,WAAW,CAACmR,MAAD,CAAjB,CAHmB,CAKnB;;IACAY,OAAO,GAAGf,4BAA4B,CAACC,eAAD,EAAkBC,EAAlB,EAAsBC,MAAtB,EAA8BW,GAA9B,CAAtC;EACD,CApED,CAsEA;;;EACA,MAAMT,GAAG,GAAGrR,WAAW,CAACmR,MAAM,GAAGA,MAAV,CAAvB,CAvEA,CAuE0C;;EAC1C,MAAMc,IAAI,GAAGjS,WAAW,CAACmR,MAAM,GAAGA,MAAV,CAAxB,CAxEA,CAwE2C;;EAC3C,MAAMe,GAAG,GAAGlS,WAAW,CAACmR,MAAM,GAAGO,MAAV,CAAvB,CAzEA,CAyE0C;EAE1C;;EACA,KAAKhH,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGuG,eAAhB,EAAiCvG,CAAC,EAAlC,EAAsC;IACpC,KAAK9K,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGuR,MAAhB,EAAwBvR,CAAC,EAAzB,EAA6B;MAC3B;MACA,KAAK4C,CAAC,GAAG5C,CAAT,EAAY4C,CAAC,GAAG2O,MAAhB,EAAwB3O,CAAC,EAAzB,EAA6B;QAC3B6O,GAAG,CAACzR,CAAC,GAAGuR,MAAJ,GAAa3O,CAAd,CAAH,IAAuB0O,EAAE,CAACxG,CAAC,GAAGyG,MAAJ,GAAavR,CAAd,CAAF,GAAqBsR,EAAE,CAACxG,CAAC,GAAGyG,MAAJ,GAAa3O,CAAd,CAA9C;MACD,CAJ0B,CAM3B;;;MACA,KAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGkP,MAAhB,EAAwBlP,CAAC,EAAzB,EAA6B;QAC3B0P,GAAG,CAACtS,CAAC,GAAG8R,MAAJ,GAAalP,CAAd,CAAH,IAAuB0O,EAAE,CAACxG,CAAC,GAAGyG,MAAJ,GAAavR,CAAd,CAAF,GAAqB6R,EAAE,CAAC/G,CAAC,GAAGgH,MAAJ,GAAalP,CAAd,CAA9C;MACD;IACF;EACF,CAxFD,CA0FA;;;EACA,KAAK5C,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGuR,MAAhB,EAAwBvR,CAAC,EAAzB,EAA6B;IAC3B,KAAK4C,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG5C,CAAhB,EAAmB4C,CAAC,EAApB,EAAwB;MACtB6O,GAAG,CAACzR,CAAC,GAAGuR,MAAJ,GAAa3O,CAAd,CAAH,GAAsB6O,GAAG,CAAC7O,CAAC,GAAG2O,MAAJ,GAAavR,CAAd,CAAzB;IACD;EACF;;EAED,MAAMuS,WAAW,GAAG3B,YAAY,CAACa,GAAD,EAAMY,IAAN,EAAYd,MAAZ,CAAhC,CAjGA,CAmGA;;EACA,IAAIgB,WAAJ,EAAiB;IACf,KAAKvS,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGuR,MAAhB,EAAwBvR,CAAC,EAAzB,EAA6B;MAC3B,KAAK4C,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGkP,MAAhB,EAAwBlP,CAAC,EAAzB,EAA6B;QAC3B4O,EAAE,CAACxR,CAAC,GAAG8R,MAAJ,GAAalP,CAAd,CAAF,GAAqB,GAArB;;QACA,KAAKkI,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGyG,MAAhB,EAAwBzG,CAAC,EAAzB,EAA6B;UAC3B0G,EAAE,CAACxR,CAAC,GAAG8R,MAAJ,GAAalP,CAAd,CAAF,IAAsByP,IAAI,CAACrS,CAAC,GAAGuR,MAAJ,GAAazG,CAAd,CAAJ,GAAuBwH,GAAG,CAACxH,CAAC,GAAGgH,MAAJ,GAAalP,CAAd,CAAhD;QACD;MACF;IACF;EACF,CA7GD,CA+GA;EACA;;;EACA,IAAIwP,eAAJ,EAAqB;IACnB,KAAKxP,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGkP,MAAhB,EAAwBlP,CAAC,EAAzB,EAA6B;MAC3B,IAAIoP,YAAY,CAACpP,CAAD,CAAhB,EAAqB;QACnB;QACA,KAAK5C,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGuR,MAAhB,EAAwBvR,CAAC,EAAzB,EAA6B;UAC3BwR,EAAE,CAACxR,CAAC,GAAG8R,MAAJ,GAAalP,CAAd,CAAF,GAAqBsP,GAAG,CAAClS,CAAC,GAAG8R,MAAL,CAAxB;QACD;MACF;IACF;EACF;;EAED,IAAIM,eAAJ,EAAqB;IACnB,OAAOD,OAAO,IAAII,WAAlB;EACD;;EAED,OAAOA,WAAP;AACD;AAED,OAAO,SAASC,SAAT,CAAmBC,MAAnB,EAAwD;EAAA,IAA7BC,aAA6B,uEAAb,CAAC,CAAD,EAAI,GAAJ,EAAS,CAAT,CAAa;;EAC7D,QAAQD,MAAM,CAAC9Q,MAAf;IACE,KAAK,CAAL;MAAQ;MACN+Q,aAAa,CAAC,CAAD,CAAb,GAAoBC,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAAR,GAA0B,EAA3B,GAAiC,GAApD;MACAC,aAAa,CAAC,CAAD,CAAb,GAAoBC,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAAR,GAA0B,EAA3B,GAAiC,GAApD;MACAC,aAAa,CAAC,CAAD,CAAb,GAAoBC,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAAR,GAA0B,EAA3B,GAAiC,GAApD;MACA,OAAOC,aAAP;;IACF,KAAK,CAAL;MAAQ;MACNA,aAAa,CAAC,CAAD,CAAb,GAAoBC,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAAR,GAA0B,EAA3B,GAAiC,GAApD;MACAC,aAAa,CAAC,CAAD,CAAb,GAAoBC,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAAR,GAA0B,EAA3B,GAAiC,GAApD;MACAC,aAAa,CAAC,CAAD,CAAb,GAAoBC,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAAR,GAA0B,EAA3B,GAAiC,GAApD;MACA,OAAOC,aAAP;;IACF,KAAK,CAAL;MAAQ;MACNA,aAAa,CAAC,CAAD,CAAb,GAAmBC,QAAQ,CAACF,MAAM,CAACG,MAAP,CAAc,CAAd,EAAiB,CAAjB,CAAD,EAAsB,EAAtB,CAAR,GAAoC,GAAvD;MACAF,aAAa,CAAC,CAAD,CAAb,GAAmBC,QAAQ,CAACF,MAAM,CAACG,MAAP,CAAc,CAAd,EAAiB,CAAjB,CAAD,EAAsB,EAAtB,CAAR,GAAoC,GAAvD;MACAF,aAAa,CAAC,CAAD,CAAb,GAAmBC,QAAQ,CAACF,MAAM,CAACG,MAAP,CAAc,CAAd,EAAiB,CAAjB,CAAD,EAAsB,EAAtB,CAAR,GAAoC,GAAvD;MACA,OAAOF,aAAP;;IACF,KAAK,CAAL;MAAQ;MACNA,aAAa,CAAC,CAAD,CAAb,GAAmBC,QAAQ,CAACF,MAAM,CAACG,MAAP,CAAc,CAAd,EAAiB,CAAjB,CAAD,EAAsB,EAAtB,CAAR,GAAoC,GAAvD;MACAF,aAAa,CAAC,CAAD,CAAb,GAAmBC,QAAQ,CAACF,MAAM,CAACG,MAAP,CAAc,CAAd,EAAiB,CAAjB,CAAD,EAAsB,EAAtB,CAAR,GAAoC,GAAvD;MACAF,aAAa,CAAC,CAAD,CAAb,GAAmBC,QAAQ,CAACF,MAAM,CAACG,MAAP,CAAc,CAAd,EAAiB,CAAjB,CAAD,EAAsB,EAAtB,CAAR,GAAoC,GAAvD;MACA,OAAOF,aAAP;;IACF,KAAK,CAAL;MAAQ;MACNA,aAAa,CAAC,CAAD,CAAb,GAAmBC,QAAQ,CAACF,MAAM,CAACG,MAAP,CAAc,CAAd,EAAiB,CAAjB,CAAD,EAAsB,EAAtB,CAAR,GAAoC,GAAvD;MACAF,aAAa,CAAC,CAAD,CAAb,GAAmBC,QAAQ,CAACF,MAAM,CAACG,MAAP,CAAc,CAAd,EAAiB,CAAjB,CAAD,EAAsB,EAAtB,CAAR,GAAoC,GAAvD;MACAF,aAAa,CAAC,CAAD,CAAb,GAAmBC,QAAQ,CAACF,MAAM,CAACG,MAAP,CAAc,CAAd,EAAiB,CAAjB,CAAD,EAAsB,EAAtB,CAAR,GAAoC,GAAvD;MACAF,aAAa,CAAC,CAAD,CAAb,GAAmBC,QAAQ,CAACF,MAAM,CAACG,MAAP,CAAc,CAAd,EAAiB,CAAjB,CAAD,EAAsB,EAAtB,CAAR,GAAoC,GAAvD;MACA,OAAOF,aAAP;;IACF;MACE,OAAOA,aAAP;EA5BJ;AA8BD;AAED,OAAO,SAASG,OAAT,CAAiBC,GAAjB,EAAsBC,GAAtB,EAA2B;EAChC,IAAIjF,CAAJ;EACA,IAAIzB,CAAJ;EACA,MAAM,CAAC7J,CAAD,EAAIuL,CAAJ,EAAOzK,CAAP,IAAYwP,GAAlB;EACA,MAAME,QAAQ,GAAG,MAAM,GAAvB;EACA,MAAMC,QAAQ,GAAG,MAAM,GAAvB;EACA,MAAMC,QAAQ,GAAG,MAAM,GAAvB;EAEA,IAAIC,IAAI,GAAG3Q,CAAX;EACA,IAAI4Q,IAAI,GAAG5Q,CAAX;;EAEA,IAAIuL,CAAC,GAAGoF,IAAR,EAAc;IACZA,IAAI,GAAGpF,CAAP;EACD,CAFD,MAEO,IAAIA,CAAC,GAAGqF,IAAR,EAAc;IACnBA,IAAI,GAAGrF,CAAP;EACD;;EACD,IAAIzK,CAAC,GAAG6P,IAAR,EAAc;IACZA,IAAI,GAAG7P,CAAP;EACD,CAFD,MAEO,IAAIA,CAAC,GAAG8P,IAAR,EAAc;IACnBA,IAAI,GAAG9P,CAAP;EACD;;EACD,MAAMnB,CAAC,GAAGgR,IAAV;;EAEA,IAAIhR,CAAC,GAAG,GAAR,EAAa;IACXkK,CAAC,GAAG,CAAC8G,IAAI,GAAGC,IAAR,IAAgBD,IAApB;EACD,CAFD,MAEO;IACL9G,CAAC,GAAG,GAAJ;EACD;;EACD,IAAIA,CAAC,GAAG,CAAR,EAAW;IACT,IAAI7J,CAAC,KAAK2Q,IAAV,EAAgB;MACdrF,CAAC,GAAImF,QAAQ,IAAIlF,CAAC,GAAGzK,CAAR,CAAT,IAAwB6P,IAAI,GAAGC,IAA/B,CAAJ;IACD,CAFD,MAEO,IAAIrF,CAAC,KAAKoF,IAAV,EAAgB;MACrBrF,CAAC,GAAGkF,QAAQ,GAAIC,QAAQ,IAAI3P,CAAC,GAAGd,CAAR,CAAT,IAAwB2Q,IAAI,GAAGC,IAA/B,CAAf;IACD,CAFM,MAEA;MACLtF,CAAC,GAAGoF,QAAQ,GAAID,QAAQ,IAAIzQ,CAAC,GAAGuL,CAAR,CAAT,IAAwBoF,IAAI,GAAGC,IAA/B,CAAf;IACD;;IACD,IAAItF,CAAC,GAAG,GAAR,EAAa;MACXA,CAAC,IAAI,GAAL;IACD;EACF,CAXD,MAWO;IACLA,CAAC,GAAG,GAAJ;EACD,CAzC+B,CA2ChC;;;EACAiF,GAAG,CAAC,CAAD,CAAH,GAASjF,CAAT;EACAiF,GAAG,CAAC,CAAD,CAAH,GAAS1G,CAAT;EACA0G,GAAG,CAAC,CAAD,CAAH,GAAS5Q,CAAT;AACD;AAED,OAAO,SAASkR,OAAT,CAAiBN,GAAjB,EAAsBD,GAAtB,EAA2B;EAChC,MAAM,CAAChF,CAAD,EAAIzB,CAAJ,EAAOlK,CAAP,IAAY4Q,GAAlB;EACA,MAAMC,QAAQ,GAAG,MAAM,GAAvB;EACA,MAAMC,QAAQ,GAAG,MAAM,GAAvB;EACA,MAAMC,QAAQ,GAAG,MAAM,GAAvB;EACA,MAAMI,SAAS,GAAG,MAAM,GAAxB;EACA,IAAI9Q,CAAJ;EACA,IAAIuL,CAAJ;EACA,IAAIzK,CAAJ,CARgC,CAUhC;;EACA,IAAIwK,CAAC,GAAGmF,QAAJ,IAAgBnF,CAAC,IAAIkF,QAAzB,EAAmC;IACjC;IACAjF,CAAC,GAAG,GAAJ;IACAvL,CAAC,GAAG,CAACwQ,QAAQ,GAAGlF,CAAZ,IAAiBmF,QAArB;IACA3P,CAAC,GAAG,GAAJ;EACD,CALD,MAKO,IAAIwK,CAAC,GAAGkF,QAAJ,IAAgBlF,CAAC,IAAI,GAAzB,EAA8B;IACnC;IACAC,CAAC,GAAG,GAAJ;IACAzK,CAAC,GAAG,CAACwK,CAAC,GAAGkF,QAAL,IAAiBC,QAArB;IACAzQ,CAAC,GAAG,GAAJ;EACD,CALM,MAKA,IAAIsL,CAAC,GAAG,GAAJ,IAAWA,CAAC,IAAIoF,QAApB,EAA8B;IACnC;IACA5P,CAAC,GAAG,GAAJ;IACAyK,CAAC,GAAG,CAACmF,QAAQ,GAAGpF,CAAZ,IAAiBmF,QAArB;IACAzQ,CAAC,GAAG,GAAJ;EACD,CALM,MAKA,IAAIsL,CAAC,GAAGoF,QAAJ,IAAgBpF,CAAC,IAAIwF,SAAzB,EAAoC;IACzC;IACAhQ,CAAC,GAAG,GAAJ;IACAd,CAAC,GAAG,CAACsL,CAAC,GAAGoF,QAAL,IAAiBD,QAArB;IACAlF,CAAC,GAAG,GAAJ;EACD,CALM,MAKA,IAAID,CAAC,GAAGwF,SAAJ,IAAiBxF,CAAC,IAAI,GAA1B,EAA+B;IACpC;IACAtL,CAAC,GAAG,GAAJ;IACAc,CAAC,GAAG,CAAC,MAAMwK,CAAP,IAAYmF,QAAhB;IACAlF,CAAC,GAAG,GAAJ;EACD,CALM,MAKA;IACL;IACAvL,CAAC,GAAG,GAAJ;IACAuL,CAAC,GAAGD,CAAC,GAAGmF,QAAR;IACA3P,CAAC,GAAG,GAAJ;EACD,CAzC+B,CA2ChC;;;EACAd,CAAC,GAAG6J,CAAC,GAAG7J,CAAJ,IAAS,MAAM6J,CAAf,CAAJ;EACA0B,CAAC,GAAG1B,CAAC,GAAG0B,CAAJ,IAAS,MAAM1B,CAAf,CAAJ;EACA/I,CAAC,GAAG+I,CAAC,GAAG/I,CAAJ,IAAS,MAAM+I,CAAf,CAAJ;EAEA7J,CAAC,IAAIL,CAAL;EACA4L,CAAC,IAAI5L,CAAL;EACAmB,CAAC,IAAInB,CAAL,CAlDgC,CAoDhC;;EACA2Q,GAAG,CAAC,CAAD,CAAH,GAAStQ,CAAT;EACAsQ,GAAG,CAAC,CAAD,CAAH,GAAS/E,CAAT;EACA+E,GAAG,CAAC,CAAD,CAAH,GAASxP,CAAT;AACD;AAED,OAAO,SAASiQ,OAAT,CAAiBC,GAAjB,EAAsBC,GAAtB,EAA2B;EAChC;EACA,MAAM,CAACC,CAAD,EAAIrQ,CAAJ,EAAOC,CAAP,IAAYkQ,GAAlB;EACA,IAAIG,KAAK,GAAG,CAACD,CAAC,GAAG,EAAL,IAAW,GAAvB;EACA,IAAIE,KAAK,GAAGvQ,CAAC,GAAG,GAAJ,GAAUsQ,KAAtB;EACA,IAAIE,KAAK,GAAGF,KAAK,GAAGrQ,CAAC,GAAG,GAAxB;;EAEA,IAAIqQ,KAAK,IAAI,CAAT,GAAa,QAAjB,EAA2B;IACzBA,KAAK,KAAK,CAAV;EACD,CAFD,MAEO;IACLA,KAAK,GAAG,CAACA,KAAK,GAAG,OAAO,KAAhB,IAAyB,KAAjC;EACD;;EAED,IAAIC,KAAK,IAAI,CAAT,GAAa,QAAjB,EAA2B;IACzBA,KAAK,KAAK,CAAV;EACD,CAFD,MAEO;IACLA,KAAK,GAAG,CAACA,KAAK,GAAG,OAAO,KAAhB,IAAyB,KAAjC;EACD;;EAED,IAAIC,KAAK,IAAI,CAAT,GAAa,QAAjB,EAA2B;IACzBA,KAAK,KAAK,CAAV;EACD,CAFD,MAEO;IACLA,KAAK,GAAG,CAACA,KAAK,GAAG,OAAO,KAAhB,IAAyB,KAAjC;EACD;;EACD,MAAMC,KAAK,GAAG,MAAd;EACA,MAAMC,KAAK,GAAG,GAAd;EACA,MAAMC,KAAK,GAAG,KAAd;EACAP,GAAG,CAAC,CAAD,CAAH,GAASK,KAAK,GAAGF,KAAjB,CA3BgC,CA2BR;;EACxBH,GAAG,CAAC,CAAD,CAAH,GAASM,KAAK,GAAGJ,KAAjB,CA5BgC,CA4BR;;EACxBF,GAAG,CAAC,CAAD,CAAH,GAASO,KAAK,GAAGH,KAAjB,CA7BgC,CA6BR;AACzB;AAED,OAAO,SAASI,OAAT,CAAiBR,GAAjB,EAAsBD,GAAtB,EAA2B;EAChC,MAAM,CAACnR,CAAD,EAAI2B,CAAJ,EAAOc,CAAP,IAAY2O,GAAlB;EACA,MAAMK,KAAK,GAAG,MAAd;EACA,MAAMC,KAAK,GAAG,GAAd;EACA,MAAMC,KAAK,GAAG,KAAd;EACA,IAAIJ,KAAK,GAAGvR,CAAC,GAAGyR,KAAhB,CALgC,CAKT;;EACvB,IAAIH,KAAK,GAAG3P,CAAC,GAAG+P,KAAhB,CANgC,CAMT;;EACvB,IAAIF,KAAK,GAAG/O,CAAC,GAAGkP,KAAhB,CAPgC,CAOT;;EAEvB,IAAIJ,KAAK,GAAG,QAAZ,EAAsBA,KAAK,KAAK,MAAM,GAAhB,CAAtB,KACKA,KAAK,GAAG,QAAQA,KAAR,GAAgB,OAAO,KAA/B;EACL,IAAID,KAAK,GAAG,QAAZ,EAAsBA,KAAK,KAAK,MAAM,GAAhB,CAAtB,KACKA,KAAK,GAAG,QAAQA,KAAR,GAAgB,OAAO,KAA/B;EACL,IAAIE,KAAK,GAAG,QAAZ,EAAsBA,KAAK,KAAK,MAAM,GAAhB,CAAtB,KACKA,KAAK,GAAG,QAAQA,KAAR,GAAgB,OAAO,KAA/B;EAELL,GAAG,CAAC,CAAD,CAAH,GAAS,MAAMG,KAAN,GAAc,EAAvB;EACAH,GAAG,CAAC,CAAD,CAAH,GAAS,OAAOI,KAAK,GAAGD,KAAf,CAAT;EACAH,GAAG,CAAC,CAAD,CAAH,GAAS,OAAOG,KAAK,GAAGE,KAAf,CAAT;AACD;AAED,OAAO,SAASK,OAAT,CAAiBT,GAAjB,EAAsBX,GAAtB,EAA2B;EAChC,MAAM,CAACzQ,CAAD,EAAI2B,CAAJ,EAAOc,CAAP,IAAY2O,GAAlB;EACA,IAAIjR,CAAC,GAAGH,CAAC,GAAG,MAAJ,GAAa2B,CAAC,GAAG,CAAC,MAAlB,GAA2Bc,CAAC,GAAG,CAAC,MAAxC;EACA,IAAIiJ,CAAC,GAAG1L,CAAC,GAAG,CAAC,MAAL,GAAc2B,CAAC,GAAG,MAAlB,GAA2Bc,CAAC,GAAG,MAAvC;EACA,IAAIxB,CAAC,GAAGjB,CAAC,GAAG,MAAJ,GAAa2B,CAAC,GAAG,CAAC,KAAlB,GAA0Bc,CAAC,GAAG,KAAtC,CAJgC,CAMhC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,IAAItC,CAAC,GAAG,SAAR,EAAmBA,CAAC,GAAG,QAAQA,CAAC,KAAK,IAAI,GAAT,CAAT,GAAyB,KAA7B,CAAnB,KACKA,CAAC,IAAI,KAAL;EACL,IAAIuL,CAAC,GAAG,SAAR,EAAmBA,CAAC,GAAG,QAAQA,CAAC,KAAK,IAAI,GAAT,CAAT,GAAyB,KAA7B,CAAnB,KACKA,CAAC,IAAI,KAAL;EACL,IAAIzK,CAAC,GAAG,SAAR,EAAmBA,CAAC,GAAG,QAAQA,CAAC,KAAK,IAAI,GAAT,CAAT,GAAyB,KAA7B,CAAnB,KACKA,CAAC,IAAI,KAAL,CAnB2B,CAqBhC;EACA;EACA;;EACA,IAAIsM,MAAM,GAAGpN,CAAb;EACA,IAAIoN,MAAM,GAAG7B,CAAb,EAAgB6B,MAAM,GAAG7B,CAAT;EAChB,IAAI6B,MAAM,GAAGtM,CAAb,EAAgBsM,MAAM,GAAGtM,CAAT;;EAChB,IAAIsM,MAAM,GAAG,GAAb,EAAkB;IAChBpN,CAAC,IAAIoN,MAAL;IACA7B,CAAC,IAAI6B,MAAL;IACAtM,CAAC,IAAIsM,MAAL;EACD;;EACD,IAAIpN,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG,CAAJ;EACX,IAAIuL,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG,CAAJ;EACX,IAAIzK,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG,CAAJ,CAlCqB,CAoChC;;EACAwP,GAAG,CAAC,CAAD,CAAH,GAAStQ,CAAT;EACAsQ,GAAG,CAAC,CAAD,CAAH,GAAS/E,CAAT;EACA+E,GAAG,CAAC,CAAD,CAAH,GAASxP,CAAT;AACD;AAED,OAAO,SAAS6Q,OAAT,CAAiBrB,GAAjB,EAAsBW,GAAtB,EAA2B;EAChC,IAAI,CAACjR,CAAD,EAAIuL,CAAJ,EAAOzK,CAAP,IAAYwP,GAAhB,CADgC,CAEhC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,IAAItQ,CAAC,GAAG,OAAR,EAAiBA,CAAC,GAAG,CAAC,CAACA,CAAC,GAAG,KAAL,IAAc,KAAf,KAAyB,GAA7B,CAAjB,KACKA,CAAC,IAAI,KAAL;EACL,IAAIuL,CAAC,GAAG,OAAR,EAAiBA,CAAC,GAAG,CAAC,CAACA,CAAC,GAAG,KAAL,IAAc,KAAf,KAAyB,GAA7B,CAAjB,KACKA,CAAC,IAAI,KAAL;EACL,IAAIzK,CAAC,GAAG,OAAR,EAAiBA,CAAC,GAAG,CAAC,CAACA,CAAC,GAAG,KAAL,IAAc,KAAf,KAAyB,GAA7B,CAAjB,KACKA,CAAC,IAAI,KAAL,CAf2B,CAiBhC;;EACAmQ,GAAG,CAAC,CAAD,CAAH,GAASjR,CAAC,GAAG,MAAJ,GAAauL,CAAC,GAAG,MAAjB,GAA0BzK,CAAC,GAAG,MAAvC;EACAmQ,GAAG,CAAC,CAAD,CAAH,GAASjR,CAAC,GAAG,MAAJ,GAAauL,CAAC,GAAG,MAAjB,GAA0BzK,CAAC,GAAG,MAAvC;EACAmQ,GAAG,CAAC,CAAD,CAAH,GAASjR,CAAC,GAAG,MAAJ,GAAauL,CAAC,GAAG,MAAjB,GAA0BzK,CAAC,GAAG,MAAvC;AACD;AAED,OAAO,SAAS8Q,OAAT,CAAiBtB,GAAjB,EAAsBU,GAAtB,EAA2B;EAChC,MAAMC,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAZ;EACAU,OAAO,CAACrB,GAAD,EAAMW,GAAN,CAAP;EACAQ,OAAO,CAACR,GAAD,EAAMD,GAAN,CAAP;AACD;AAED,OAAO,SAASa,OAAT,CAAiBb,GAAjB,EAAsBV,GAAtB,EAA2B;EAChC,MAAMW,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAZ;EACAF,OAAO,CAACC,GAAD,EAAMC,GAAN,CAAP;EACAS,OAAO,CAACT,GAAD,EAAMX,GAAN,CAAP;AACD;AAED,OAAO,SAASwB,kBAAT,CAA4BC,MAA5B,EAAoC;EACzCA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;EACAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAAC,GAAb;EACAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;EACAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAAC,GAAb;EACAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ;EACAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAAC,GAAb;EACA,OAAOA,MAAP;AACD;AAED,OAAO,SAASC,oBAAT,CAA8BD,MAA9B,EAAsC;EAC3C,OAAO,EAAEA,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAlB,GAAwB,GAA1B,CAAP;AACD;AAED,OAAO,SAASE,uBAAT,CAAiCC,MAAjC,EAAyCC,MAAzC,EAAiDJ,MAAjD,EAAyD;EAC9DA,MAAM,CAAC,CAAD,CAAN,GAAY9T,IAAI,CAACS,GAAL,CAASwT,MAAM,CAAC,CAAD,CAAf,EAAoBC,MAAM,CAAC,CAAD,CAA1B,CAAZ;EACAJ,MAAM,CAAC,CAAD,CAAN,GAAY9T,IAAI,CAACU,GAAL,CAASuT,MAAM,CAAC,CAAD,CAAf,EAAoBC,MAAM,CAAC,CAAD,CAA1B,CAAZ;EACAJ,MAAM,CAAC,CAAD,CAAN,GAAY9T,IAAI,CAACS,GAAL,CAASwT,MAAM,CAAC,CAAD,CAAf,EAAoBC,MAAM,CAAC,CAAD,CAA1B,CAAZ;EACAJ,MAAM,CAAC,CAAD,CAAN,GAAY9T,IAAI,CAACU,GAAL,CAASuT,MAAM,CAAC,CAAD,CAAf,EAAoBC,MAAM,CAAC,CAAD,CAA1B,CAAZ;EACAJ,MAAM,CAAC,CAAD,CAAN,GAAY9T,IAAI,CAACS,GAAL,CAASwT,MAAM,CAAC,CAAD,CAAf,EAAoBC,MAAM,CAAC,CAAD,CAA1B,CAAZ;EACAJ,MAAM,CAAC,CAAD,CAAN,GAAY9T,IAAI,CAACU,GAAL,CAASuT,MAAM,CAAC,CAAD,CAAf,EAAoBC,MAAM,CAAC,CAAD,CAA1B,CAAZ;EACA,OAAOJ,MAAP;AACD;AAED,OAAO,SAASK,UAAT,CAAoBC,KAApB,EAA2BrT,QAA3B,EAAqCK,QAArC,EAA+C;EACpD,IAAIgT,KAAK,GAAGrT,QAAZ,EAAsB;IACpB,OAAOA,QAAP;EACD;;EACD,IAAIqT,KAAK,GAAGhT,QAAZ,EAAsB;IACpB,OAAOA,QAAP;EACD;;EACD,OAAOgT,KAAP;AACD;AAED,OAAO,SAASC,WAAT,CAAqB1H,MAArB,EAA6B2H,SAA7B,EAAwCC,SAAxC,EAAoE;EAAA,IAAjBzR,GAAiB,uEAAX,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAW;EACzEA,GAAG,CAAC,CAAD,CAAH,GAASqR,UAAU,CAACxH,MAAM,CAAC,CAAD,CAAP,EAAY2H,SAAS,CAAC,CAAD,CAArB,EAA0BC,SAAS,CAAC,CAAD,CAAnC,CAAnB;EACAzR,GAAG,CAAC,CAAD,CAAH,GAASqR,UAAU,CAACxH,MAAM,CAAC,CAAD,CAAP,EAAY2H,SAAS,CAAC,CAAD,CAArB,EAA0BC,SAAS,CAAC,CAAD,CAAnC,CAAnB;EACAzR,GAAG,CAAC,CAAD,CAAH,GAASqR,UAAU,CAACxH,MAAM,CAAC,CAAD,CAAP,EAAY2H,SAAS,CAAC,CAAD,CAArB,EAA0BC,SAAS,CAAC,CAAD,CAAnC,CAAnB;EAEA,OAAOzR,GAAP;AACD;AAED,OAAO,SAAS0R,sBAAT,CAAgCJ,KAAhC,EAAuCK,KAAvC,EAA8C;EACnD,IAAIC,MAAM,GAAG,CAAb;;EACA,IAAID,KAAK,CAAC,CAAD,CAAL,KAAaA,KAAK,CAAC,CAAD,CAAtB,EAA2B;IACzB;IACA,IAAIL,KAAK,GAAGK,KAAK,CAAC,CAAD,CAAjB,EAAsB;MACpBC,MAAM,GAAGD,KAAK,CAAC,CAAD,CAAd;IACD,CAFD,MAEO,IAAIL,KAAK,GAAGK,KAAK,CAAC,CAAD,CAAjB,EAAsB;MAC3BC,MAAM,GAAGD,KAAK,CAAC,CAAD,CAAd;IACD,CAFM,MAEA;MACLC,MAAM,GAAGN,KAAT;IACD,CARwB,CASzB;;;IACAM,MAAM,GAAG,CAACA,MAAM,GAAGD,KAAK,CAAC,CAAD,CAAf,KAAuBA,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAvC,CAAT;EACD;;EAED,OAAOC,MAAP;AACD;AAED,OAAO,MAAMC,yBAAyB,GAAG5V,cAAc,CACrD,2BADqD,CAAhD;AAGP,OAAO,MAAM6V,sBAAsB,GAAG7V,cAAc,CAAC,wBAAD,CAA7C;AAEP,OAAO,SAAS8V,yBAAT,CAAmCC,OAAnC,EAA4CC,OAA5C,EAAqD;EAC1D,IAAI,CAACD,OAAD,IAAY,CAACC,OAAjB,EAA0B;IACxB,OAAO,CAAP;EACD;;EAED,KAAK,IAAIxV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;IAC7B,IACEuV,OAAO,CAACvV,CAAD,CAAP,GAAawV,OAAO,CAACxV,CAAD,CAApB,IACAuV,OAAO,CAACvV,CAAD,CAAP,GAAawV,OAAO,CAACxV,CAAC,GAAG,CAAL,CADpB,IAEAuV,OAAO,CAACvV,CAAC,GAAG,CAAL,CAAP,GAAiBwV,OAAO,CAACxV,CAAD,CAFxB,IAGAuV,OAAO,CAACvV,CAAC,GAAG,CAAL,CAAP,GAAiBwV,OAAO,CAACxV,CAAC,GAAG,CAAL,CAJ1B,EAKE;MACA,OAAO,CAAP;IACD;EACF;;EAED,OAAO,CAAP;AACD;AAED,OAAO,SAASyV,yBAAT,CAAmCC,SAAnC,EAA8CC,SAA9C,EAAyDC,OAAzD,EAAkE;EACvE,IAAI,CAACF,SAAD,IAAc,CAACC,SAAnB,EAA8B;IAC5B,OAAO,CAAP;EACD;;EACD,KAAK,IAAI3V,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;IAC7B,IACE0V,SAAS,CAAC1V,CAAD,CAAT,GAAe4V,OAAO,CAAC5V,CAAC,GAAG,CAAL,CAAtB,GAAgC2V,SAAS,CAAC3V,CAAD,CAAzC,IACA0V,SAAS,CAAC1V,CAAD,CAAT,GAAe4V,OAAO,CAAC5V,CAAC,GAAG,CAAL,CAAtB,GAAgC2V,SAAS,CAAC3V,CAAC,GAAG,CAAL,CADzC,IAEA0V,SAAS,CAAC1V,CAAC,GAAG,CAAL,CAAT,GAAmB4V,OAAO,CAAC5V,CAAC,GAAG,CAAL,CAA1B,GAAoC2V,SAAS,CAAC3V,CAAD,CAF7C,IAGA0V,SAAS,CAAC1V,CAAC,GAAG,CAAL,CAAT,GAAmB4V,OAAO,CAAC5V,CAAC,GAAG,CAAL,CAA1B,GAAoC2V,SAAS,CAAC3V,CAAC,GAAG,CAAL,CAJ/C,EAKE;MACA,OAAO,CAAP;IACD;EACF;;EACD,OAAO,CAAP;AACD;AAED,OAAO,SAAS6V,mBAAT,CAA6BC,OAA7B,EAAsCC,QAAtC,EAAgDH,OAAhD,EAAyD;EAC9D,IAAI,CAACE,OAAD,IAAY,CAACC,QAAb,IAAyB,CAACH,OAA9B,EAAuC;IACrC,OAAO,CAAP;EACD;;EACD,KAAK,IAAI5V,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;IAC1B,IACE8V,OAAO,CAAC9V,CAAD,CAAP,GAAa4V,OAAO,CAAC5V,CAAD,CAApB,GAA0B+V,QAAQ,CAAC,IAAI/V,CAAL,CAAlC,IACA8V,OAAO,CAAC9V,CAAD,CAAP,GAAa4V,OAAO,CAAC5V,CAAD,CAApB,GAA0B+V,QAAQ,CAAC,IAAI/V,CAAJ,GAAQ,CAAT,CAFpC,EAGE;MACA,OAAO,CAAP;IACD;EACF;;EACD,OAAO,CAAP;AACD;AAED,OAAO,SAASgW,iBAAT,CAA2BC,EAA3B,EAA+BC,EAA/B,EAAmCC,EAAnC,EAAuCC,MAAvC,EAA+C;EACpD,MAAMC,GAAG,GAAGjW,WAAW,CAAC,CAAD,CAAvB;EACA,MAAMkW,GAAG,GAAGlW,WAAW,CAAC,CAAD,CAAvB;EACA,MAAMmW,GAAG,GAAGnW,WAAW,CAAC,CAAD,CAAvB;EACA,MAAMoW,GAAG,GAAGpW,WAAW,CAAC,CAAD,CAAvB;EACA,MAAMqW,GAAG,GAAGrW,WAAW,CAAC,CAAD,CAAvB;EACA,MAAMsW,GAAG,GAAGtW,WAAW,CAAC,CAAD,CAAvB;;EAEA,KAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuB,EAAEA,CAAzB,EAA4B;IAC1BqW,GAAG,CAACrW,CAAD,CAAH,GAASiW,EAAE,CAACjW,CAAD,CAAF,GAAQkW,EAAE,CAAClW,CAAD,CAAnB;IACAsW,GAAG,CAACtW,CAAD,CAAH,GAASkW,EAAE,CAAClW,CAAD,CAAF,GAAQmW,EAAE,CAACnW,CAAD,CAAnB;IACAuW,GAAG,CAACvW,CAAD,CAAH,GAASmW,EAAE,CAACnW,CAAD,CAAF,GAAQiW,EAAE,CAACjW,CAAD,CAAnB;IACAwW,GAAG,CAACxW,CAAD,CAAH,GAAS,CAACqW,GAAG,CAACrW,CAAD,CAAb;IACAyW,GAAG,CAACzW,CAAD,CAAH,GAAS,CAACsW,GAAG,CAACtW,CAAD,CAAb;IACA0W,GAAG,CAAC1W,CAAD,CAAH,GAAS,CAACuW,GAAG,CAACvW,CAAD,CAAb;EACD;;EAED,MAAM2W,MAAM,GAAGpS,IAAI,CAACiS,GAAD,CAAnB;EACA,MAAMI,MAAM,GAAGrS,IAAI,CAACkS,GAAD,CAAnB;EACA,MAAMI,MAAM,GAAGtS,IAAI,CAACgS,GAAD,CAAnB;EAEA,MAAMO,WAAW,GAAG1W,WAAW,CAAC,CAAD,CAA/B;EACA+D,KAAK,CAACkS,GAAD,EAAMC,GAAN,EAAWQ,WAAX,CAAL;EACA,MAAMC,SAAS,GAAGxS,IAAI,CAACuS,WAAD,CAAtB;EAEA,MAAME,MAAM,GAAIL,MAAM,GAAGC,MAAT,GAAkBC,MAAnB,IAA8B,IAAIE,SAAlC,CAAf;EAEA,MAAME,WAAW,GAAG,IAAIF,SAAJ,GAAgBA,SAApC;EACA,MAAMG,KAAK,GAAIN,MAAM,GAAGA,MAAT,GAAkB7S,GAAG,CAACsS,GAAD,EAAMK,GAAN,CAAtB,GAAoCO,WAAlD;EACA,MAAME,IAAI,GAAIN,MAAM,GAAGA,MAAT,GAAkB9S,GAAG,CAACyS,GAAD,EAAMF,GAAN,CAAtB,GAAoCW,WAAjD;EACA,MAAMG,KAAK,GAAIT,MAAM,GAAGA,MAAT,GAAkB5S,GAAG,CAACwS,GAAD,EAAME,GAAN,CAAtB,GAAoCQ,WAAlD;;EAEA,KAAK,IAAIjX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuB,EAAEA,CAAzB,EAA4B;IAC1BoW,MAAM,CAACpW,CAAD,CAAN,GAAYkX,KAAK,GAAGjB,EAAE,CAACjW,CAAD,CAAV,GAAgBmX,IAAI,GAAGjB,EAAE,CAAClW,CAAD,CAAzB,GAA+BoX,KAAK,GAAGjB,EAAE,CAACnW,CAAD,CAArD;EACD;;EACD,OAAOgX,MAAP;AACD;AAED,OAAO,MAAMK,GAAG,GAAG5V,QAAZ;AACP,OAAO,MAAM6V,MAAM,GAAG,CAAC7V,QAAhB;AAEP,OAAO,MAAM8V,KAAK,GAAI1C,KAAD,IAAW,CAAC5M,MAAM,CAACuP,QAAP,CAAgB3C,KAAhB,CAA1B;AACP,OAAO,MAAM;EAAE2C,QAAF;EAAYC;AAAZ,IAAsBxP,MAA5B;AACP,OAAO,MAAMyP,KAAK,GAAGD,KAAd,C,CAEP;;AAEA,OAAO,SAASE,yBAAT,GAAqC;EAC1C,OAAO,GAAGC,MAAH,CAAU,CACf3P,MAAM,CAACiJ,SADQ,EAEf,CAACjJ,MAAM,CAACiJ,SAFO,EAEI;EACnBjJ,MAAM,CAACiJ,SAHQ,EAIf,CAACjJ,MAAM,CAACiJ,SAJO,EAII;EACnBjJ,MAAM,CAACiJ,SALQ,EAMf,CAACjJ,MAAM,CAACiJ,SANO,CAMI;EANJ,CAAV,CAAP;AAQD;AAED,OAAO,SAAS2G,iBAAT,CAA2BzK,MAA3B,EAAmC;EACxC,IAAIvL,QAAQ,GAAG,CAAC,CAAhB;EACA,IAAIiW,SAAS,GAAG,CAAC,CAAjB;;EACA,KAAK,IAAI9X,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoN,MAAM,CAACzL,MAA3B,EAAmC3B,CAAC,EAApC,EAAwC;IACtC,MAAM6U,KAAK,GAAGpU,IAAI,CAAC+D,GAAL,CAAS4I,MAAM,CAACpN,CAAD,CAAf,CAAd;;IACA,IAAI6U,KAAK,GAAGhT,QAAZ,EAAsB;MACpBiW,SAAS,GAAG9X,CAAZ;MACA6B,QAAQ,GAAGgT,KAAX;IACD;EACF;;EAED,OAAOiD,SAAP;AACD;AAED,OAAO,SAASC,WAAT,CAAqBlD,KAArB,EAA4B;EACjC,MAAMmD,OAAO,GAAGvX,IAAI,CAACO,KAAL,CAAW6T,KAAK,GAAG,GAAnB,CAAhB;;EACA,IAAImD,OAAO,GAAG,EAAd,EAAkB;IAChB,OAAOA,OAAO,CAACC,QAAR,CAAiB,EAAjB,CAAP;EACD;;EACD,OAAQ,IAAGD,OAAO,CAACC,QAAR,CAAiB,EAAjB,CAAqB,EAAhC;AACD;AAED,OAAO,SAASC,gBAAT,CAA0BC,QAA1B,EAAkD;EAAA,IAAdC,MAAc,uEAAL,GAAK;EACvD,OAAQ,GAAEA,MAAO,GAAED,QAAQ,CAACE,GAAT,CAAaN,WAAb,EAA0BO,IAA1B,CAA+B,EAA/B,CAAmC,EAAtD;AACD;;AAED,SAASC,WAAT,CAAqBnM,CAArB,EAAwB;EACtB,OAAO3L,IAAI,CAACM,KAAL,CAAWqL,CAAC,GAAG,GAAf,CAAP;AACD;;AAED,OAAO,SAASoM,aAAT,CAAuBL,QAAvB,EAAiC;EACtC,IAAIA,QAAQ,CAACxW,MAAT,KAAoB,CAAxB,EAA2B;IACzB,OAAQ,OAAMwW,QAAQ,CAACE,GAAT,CAAaE,WAAb,EAA0BD,IAA1B,CAA+B,IAA/B,CAAqC,GAAnD;EACD;;EACD,OAAQ,QAAOC,WAAW,CAACJ,QAAQ,CAAC,CAAD,CAAR,IAAe,CAAhB,CAAmB,KAAII,WAAW,CAC1DJ,QAAQ,CAAC,CAAD,CAAR,IAAe,CAD2C,CAE1D,KAAII,WAAW,CAACJ,QAAQ,CAAC,CAAD,CAAR,IAAe,CAAhB,CAAmB,KAAIA,QAAQ,CAAC,CAAD,CAAR,IAAe,CAAE,GAFzD;AAGD,C,CAED;AACA;AACA;;AAEA,eAAe;EACb3X,EADa;EAEbG,kBAFa;EAGbE,kBAHa;EAIbE,KAJa;EAKbC,KALa;EAMbC,IANa;EAObc,QAPa;EAQbb,GARa;EASbC,GATa;EAUbC,QAVa;EAWbQ,QAXa;EAYbE,UAZa;EAabM,YAba;EAcbH,iBAda;EAebD,SAfa;EAgBbM,QAhBa;EAiBbG,gBAjBa;EAkBbC,eAlBa;EAmBbG,UAnBa;EAoBbG,OApBa;EAqBbC,MArBa;EAsBbE,QAtBa;EAuBbC,GAvBa;EAwBbI,QAxBa;EAyBbC,cAzBa;EA0BbG,gBA1Ba;EA2BbC,kBA3Ba;EA4BbC,oBA5Ba;EA6BbC,GA7Ba;EA8BbE,KA9Ba;EA+BbE,KA/Ba;EAgCbI,IAhCa;EAiCbI,SAjCa;EAkCbE,cAlCa;EAmCbc,aAnCa;EAoCbK,eApCa;EAqCbC,sBArCa;EAsCbC,mBAtCa;EAuCbQ,iBAvCa;EAwCbM,cAxCa;EAyCbjB,KAzCa;EA0CbkB,OA1Ca;EA2CbE,MA3Ca;EA4CbE,WA5Ca;EA6CbU,cA7Ca;EA8CbI,WA9Ca;EA+CbK,UA/Ca;EAgDbE,cAhDa;EAiDbsB,iBAjDa;EAkDbG,gBAlDa;EAmDbK,cAnDa;EAoDbO,YApDa;EAqDbG,SArDa;EAsDbG,WAtDa;EAuDbC,QAvDa;EAwDbF,cAxDa;EAyDbG,qBAzDa;EA0Dbe,SA1Da;EA2DbM,gBA3Da;EA4DbC,WA5Da;EA6DbM,WA7Da;EA8DbkB,qBA9Da;EA+DbI,kBA/Da;EAgEbU,gBAhEa;EAiEbM,cAjEa;EAkEbO,6BAlEa;EAmEbW,iBAnEa;EAoEbC,YApEa;EAqEbP,oBArEa;EAsEbI,mBAtEa;EAuEbQ,uBAvEa;EAwEbE,MAxEa;EAyEb9D,OAzEa;EA0Eb+D,4BA1Ea;EA2EbQ,iBA3Ea;EA4EbY,SA5Ea;EA6EbK,OA7Ea;EA8EbQ,OA9Ea;EA+EbE,OA/Ea;EAgFbU,OAhFa;EAiFbC,OAjFa;EAkFbC,OAlFa;EAmFbC,OAnFa;EAoFbC,OApFa;EAqFbC,kBArFa;EAsFbE,oBAtFa;EAuFbC,uBAvFa;EAwFbG,UAxFa;EAyFbE,WAzFa;EA0FbG,sBA1Fa;EA2FbG,yBA3Fa;EA4FbC,sBA5Fa;EA6FbC,yBA7Fa;EA8FbG,yBA9Fa;EA+FbI,mBA/Fa;EAgGbG,iBAhGa;EAiGbqB,GAjGa;EAkGbC,MAlGa;EAmGbC,KAnGa;EAoGbG,KAAK,EAAED,KApGM;EAqGbA,KArGa;EAsGbD,QAtGa;EAwGb;EACAG,yBAzGa;EA0GbE,iBA1Ga;EA2GbE,WA3Ga;EA4GbG,gBA5Ga;EA6GbM;AA7Ga,CAAf"},"metadata":{},"sourceType":"module"}