{"ast":null,"code":"import macro from 'vtk.js/Sources/macros';\nimport Constants from 'vtk.js/Sources/Common/DataModel/Line/Constants';\nimport vtkCell from 'vtk.js/Sources/Common/DataModel/Cell';\nimport * as vtkMath from 'vtk.js/Sources/Common/Core/Math';\nconst {\n  IntersectionState\n} = Constants; // ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nfunction distanceToLine(x, p1, p2) {\n  let closestPoint = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  const outObj = {\n    t: Number.MIN_VALUE,\n    distance: 0\n  };\n  const p21 = [];\n  let closest; // Determine appropriate vector\n\n  p21[0] = p2[0] - p1[0];\n  p21[1] = p2[1] - p1[1];\n  p21[2] = p2[2] - p1[2]; // Get parametric location\n\n  const num = p21[0] * (x[0] - p1[0]) + p21[1] * (x[1] - p1[1]) + p21[2] * (x[2] - p1[2]);\n  const denom = vtkMath.dot(p21, p21); // trying to avoid an expensive fabs\n\n  let tolerance = 1e-5 * num;\n\n  if (denom !== 0.0) {\n    outObj.t = num / denom;\n  }\n\n  if (tolerance < 0.0) {\n    tolerance = -tolerance;\n  }\n\n  if (-tolerance < denom && denom < tolerance) {\n    closest = p1;\n  } else if (denom <= 0.0 || outObj.t < 0.0) {\n    // If parametric coordinate is within 0<=p<=1, then the point is closest to\n    // the line.  Otherwise, it's closest to a point at the end of the line.\n    closest = p1;\n  } else if (outObj.t > 1.0) {\n    closest = p2;\n  } else {\n    closest = p21;\n    p21[0] = p1[0] + outObj.t * p21[0];\n    p21[1] = p1[1] + outObj.t * p21[1];\n    p21[2] = p1[2] + outObj.t * p21[2];\n  }\n\n  if (closestPoint) {\n    closestPoint[0] = closest[0];\n    closestPoint[1] = closest[1];\n    closestPoint[2] = closest[2];\n  }\n\n  outObj.distance = vtkMath.distance2BetweenPoints(closest, x);\n  return outObj;\n}\n\nfunction intersection(a1, a2, b1, b2, u, v) {\n  const a21 = [];\n  const b21 = [];\n  const b1a1 = [];\n  u[0] = 0.0;\n  v[0] = 0.0; // Determine line vectors.\n\n  vtkMath.subtract(a2, a1, a21);\n  vtkMath.subtract(b2, b1, b21);\n  vtkMath.subtract(b1, a1, b1a1); // Compute the system (least squares) matrix.\n\n  const A = [vtkMath.dot(a21, a21), -vtkMath.dot(a21, b21), -vtkMath.dot(a21, b21), vtkMath.dot(b21, b21)]; // Compute the least squares system constant term.\n\n  const c = [];\n  c[0] = vtkMath.dot(a21, b1a1);\n  c[1] = -vtkMath.dot(b21, b1a1); // Solve the system of equations\n\n  if (vtkMath.solveLinearSystem(A, c, 2) === 0) {\n    // The lines are colinear. Therefore, one of the four endpoints is the\n    // point of closest approach\n    let minDist = Number.MAX_VALUE;\n    const p = [a1, a2, b1, b2];\n    const l1 = [b1, b1, a1, a1];\n    const l2 = [b2, b2, a2, a2];\n    const uv1 = [v[0], v[0], u[0], u[0]];\n    const uv2 = [u[0], u[0], v[0], v[0]];\n    let obj;\n\n    for (let i = 0; i < 4; i++) {\n      obj = distanceToLine(p[i], l1[i], l2[i]);\n\n      if (obj.distance < minDist) {\n        minDist = obj.distance;\n        uv1[i] = obj.t;\n        uv2[i] = i % 2;\n      }\n    }\n\n    return IntersectionState.ON_LINE;\n  }\n\n  u[0] = c[0];\n  v[0] = c[1]; // Check parametric coordinates for intersection.\n\n  if (u[0] >= 0.0 && u[0] <= 1.0 && v[0] >= 0.0 && v[0] <= 1.0) {\n    return IntersectionState.YES_INTERSECTION;\n  }\n\n  return IntersectionState.NO_INTERSECTION;\n} // ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\n\nexport const STATIC = {\n  distanceToLine,\n  intersection\n}; // ----------------------------------------------------------------------------\n// vtkLine methods\n// ----------------------------------------------------------------------------\n\nfunction vtkLine(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkLine');\n\n  function isBetweenPoints(t) {\n    return t >= 0.0 && t <= 1.0;\n  }\n\n  publicAPI.getCellDimension = () => 1;\n\n  publicAPI.intersectWithLine = (p1, p2, tol, x, pcoords) => {\n    const outObj = {\n      intersect: 0,\n      t: Number.MAX_VALUE,\n      subId: 0,\n      betweenPoints: null\n    };\n    pcoords[1] = 0.0;\n    pcoords[2] = 0.0;\n    const projXYZ = [];\n    const a1 = [];\n    const a2 = [];\n    model.points.getPoint(0, a1);\n    model.points.getPoint(1, a2);\n    const u = [];\n    const v = [];\n    const intersect = intersection(p1, p2, a1, a2, u, v);\n    outObj.t = u[0];\n    outObj.betweenPoints = isBetweenPoints(outObj.t);\n    pcoords[0] = v[0];\n\n    if (intersect === IntersectionState.YES_INTERSECTION) {\n      // make sure we are within tolerance\n      for (let i = 0; i < 3; i++) {\n        x[i] = a1[i] + pcoords[0] * (a2[i] - a1[i]);\n        projXYZ[i] = p1[i] + outObj.t * (p2[i] - p1[i]);\n      }\n\n      if (vtkMath.distance2BetweenPoints(x, projXYZ) <= tol * tol) {\n        outObj.intersect = 1;\n        return outObj;\n      }\n    } else {\n      let outDistance; // check to see if it lies within tolerance\n      // one of the parametric coords must be outside 0-1\n\n      if (outObj.t < 0.0) {\n        outDistance = distanceToLine(p1, a1, a2, x);\n\n        if (outDistance.distance <= tol * tol) {\n          outObj.t = 0.0;\n          outObj.intersect = 1;\n          outObj.betweenPoints = true; // Intersection is near p1\n\n          return outObj;\n        }\n\n        return outObj;\n      }\n\n      if (outObj.t > 1.0) {\n        outDistance = distanceToLine(p2, a1, a2, x);\n\n        if (outDistance.distance <= tol * tol) {\n          outObj.t = 1.0;\n          outObj.intersect = 1;\n          outObj.betweenPoints = true; // Intersection is near p2\n\n          return outObj;\n        }\n\n        return outObj;\n      }\n\n      if (pcoords[0] < 0.0) {\n        pcoords[0] = 0.0;\n        outDistance = distanceToLine(a1, p1, p2, x);\n        outObj.t = outDistance.t;\n\n        if (outDistance.distance <= tol * tol) {\n          outObj.intersect = 1;\n          return outObj;\n        }\n\n        return outObj;\n      }\n\n      if (pcoords[0] > 1.0) {\n        pcoords[0] = 1.0;\n        outDistance = distanceToLine(a2, p1, p2, x);\n        outObj.t = outDistance.t;\n\n        if (outDistance.distance <= tol * tol) {\n          outObj.intersect = 1;\n          return outObj;\n        }\n\n        return outObj;\n      }\n    }\n\n    return outObj;\n  };\n\n  publicAPI.evaluateLocation = (pcoords, x, weights) => {\n    const a1 = [];\n    const a2 = [];\n    model.points.getPoint(0, a1);\n    model.points.getPoint(1, a2);\n\n    for (let i = 0; i < 3; i++) {\n      x[i] = a1[i] + pcoords[0] * (a2[i] - a1[i]);\n    }\n\n    weights[0] = 1.0 - pcoords[0];\n    weights[1] = pcoords[0];\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkCell.extend(publicAPI, model, initialValues);\n  vtkLine(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkLine'); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend,\n  ...STATIC,\n  ...Constants\n};","map":{"version":3,"names":["macro","Constants","vtkCell","vtkMath","IntersectionState","distanceToLine","x","p1","p2","closestPoint","outObj","t","Number","MIN_VALUE","distance","p21","closest","num","denom","dot","tolerance","distance2BetweenPoints","intersection","a1","a2","b1","b2","u","v","a21","b21","b1a1","subtract","A","c","solveLinearSystem","minDist","MAX_VALUE","p","l1","l2","uv1","uv2","obj","i","ON_LINE","YES_INTERSECTION","NO_INTERSECTION","STATIC","vtkLine","publicAPI","model","classHierarchy","push","isBetweenPoints","getCellDimension","intersectWithLine","tol","pcoords","intersect","subId","betweenPoints","projXYZ","points","getPoint","outDistance","evaluateLocation","weights","DEFAULT_VALUES","extend","initialValues","Object","assign","newInstance"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Common/DataModel/Line/index.js"],"sourcesContent":["import macro from 'vtk.js/Sources/macros';\nimport Constants from 'vtk.js/Sources/Common/DataModel/Line/Constants';\nimport vtkCell from 'vtk.js/Sources/Common/DataModel/Cell';\nimport * as vtkMath from 'vtk.js/Sources/Common/Core/Math';\n\nconst { IntersectionState } = Constants;\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\nfunction distanceToLine(x, p1, p2, closestPoint = null) {\n  const outObj = { t: Number.MIN_VALUE, distance: 0 };\n  const p21 = [];\n  let closest;\n  // Determine appropriate vector\n  p21[0] = p2[0] - p1[0];\n  p21[1] = p2[1] - p1[1];\n  p21[2] = p2[2] - p1[2];\n\n  // Get parametric location\n  const num =\n    p21[0] * (x[0] - p1[0]) + p21[1] * (x[1] - p1[1]) + p21[2] * (x[2] - p1[2]);\n  const denom = vtkMath.dot(p21, p21);\n\n  // trying to avoid an expensive fabs\n  let tolerance = 1e-5 * num;\n  if (denom !== 0.0) {\n    outObj.t = num / denom;\n  }\n  if (tolerance < 0.0) {\n    tolerance = -tolerance;\n  }\n  if (-tolerance < denom && denom < tolerance) {\n    closest = p1;\n  } else if (denom <= 0.0 || outObj.t < 0.0) {\n    // If parametric coordinate is within 0<=p<=1, then the point is closest to\n    // the line.  Otherwise, it's closest to a point at the end of the line.\n    closest = p1;\n  } else if (outObj.t > 1.0) {\n    closest = p2;\n  } else {\n    closest = p21;\n    p21[0] = p1[0] + outObj.t * p21[0];\n    p21[1] = p1[1] + outObj.t * p21[1];\n    p21[2] = p1[2] + outObj.t * p21[2];\n  }\n\n  if (closestPoint) {\n    closestPoint[0] = closest[0];\n    closestPoint[1] = closest[1];\n    closestPoint[2] = closest[2];\n  }\n  outObj.distance = vtkMath.distance2BetweenPoints(closest, x);\n  return outObj;\n}\n\nfunction intersection(a1, a2, b1, b2, u, v) {\n  const a21 = [];\n  const b21 = [];\n  const b1a1 = [];\n\n  u[0] = 0.0;\n  v[0] = 0.0;\n\n  // Determine line vectors.\n  vtkMath.subtract(a2, a1, a21);\n  vtkMath.subtract(b2, b1, b21);\n  vtkMath.subtract(b1, a1, b1a1);\n\n  // Compute the system (least squares) matrix.\n  const A = [\n    vtkMath.dot(a21, a21),\n    -vtkMath.dot(a21, b21),\n    -vtkMath.dot(a21, b21),\n    vtkMath.dot(b21, b21),\n  ];\n\n  // Compute the least squares system constant term.\n  const c = [];\n  c[0] = vtkMath.dot(a21, b1a1);\n  c[1] = -vtkMath.dot(b21, b1a1);\n  // Solve the system of equations\n  if (vtkMath.solveLinearSystem(A, c, 2) === 0) {\n    // The lines are colinear. Therefore, one of the four endpoints is the\n    // point of closest approach\n    let minDist = Number.MAX_VALUE;\n    const p = [a1, a2, b1, b2];\n    const l1 = [b1, b1, a1, a1];\n    const l2 = [b2, b2, a2, a2];\n    const uv1 = [v[0], v[0], u[0], u[0]];\n    const uv2 = [u[0], u[0], v[0], v[0]];\n    let obj;\n    for (let i = 0; i < 4; i++) {\n      obj = distanceToLine(p[i], l1[i], l2[i]);\n      if (obj.distance < minDist) {\n        minDist = obj.distance;\n        uv1[i] = obj.t;\n        uv2[i] = i % 2;\n      }\n    }\n    return IntersectionState.ON_LINE;\n  }\n  u[0] = c[0];\n  v[0] = c[1];\n\n  // Check parametric coordinates for intersection.\n  if (u[0] >= 0.0 && u[0] <= 1.0 && v[0] >= 0.0 && v[0] <= 1.0) {\n    return IntersectionState.YES_INTERSECTION;\n  }\n\n  return IntersectionState.NO_INTERSECTION;\n}\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nexport const STATIC = {\n  distanceToLine,\n  intersection,\n};\n\n// ----------------------------------------------------------------------------\n// vtkLine methods\n// ----------------------------------------------------------------------------\n\nfunction vtkLine(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkLine');\n\n  function isBetweenPoints(t) {\n    return t >= 0.0 && t <= 1.0;\n  }\n\n  publicAPI.getCellDimension = () => 1;\n  publicAPI.intersectWithLine = (p1, p2, tol, x, pcoords) => {\n    const outObj = {\n      intersect: 0,\n      t: Number.MAX_VALUE,\n      subId: 0,\n      betweenPoints: null,\n    };\n    pcoords[1] = 0.0;\n    pcoords[2] = 0.0;\n    const projXYZ = [];\n\n    const a1 = [];\n    const a2 = [];\n    model.points.getPoint(0, a1);\n    model.points.getPoint(1, a2);\n\n    const u = [];\n    const v = [];\n    const intersect = intersection(p1, p2, a1, a2, u, v);\n    outObj.t = u[0];\n    outObj.betweenPoints = isBetweenPoints(outObj.t);\n    pcoords[0] = v[0];\n\n    if (intersect === IntersectionState.YES_INTERSECTION) {\n      // make sure we are within tolerance\n      for (let i = 0; i < 3; i++) {\n        x[i] = a1[i] + pcoords[0] * (a2[i] - a1[i]);\n        projXYZ[i] = p1[i] + outObj.t * (p2[i] - p1[i]);\n      }\n      if (vtkMath.distance2BetweenPoints(x, projXYZ) <= tol * tol) {\n        outObj.intersect = 1;\n        return outObj;\n      }\n    } else {\n      let outDistance;\n      // check to see if it lies within tolerance\n      // one of the parametric coords must be outside 0-1\n      if (outObj.t < 0.0) {\n        outDistance = distanceToLine(p1, a1, a2, x);\n        if (outDistance.distance <= tol * tol) {\n          outObj.t = 0.0;\n          outObj.intersect = 1;\n          outObj.betweenPoints = true; // Intersection is near p1\n          return outObj;\n        }\n        return outObj;\n      }\n      if (outObj.t > 1.0) {\n        outDistance = distanceToLine(p2, a1, a2, x);\n        if (outDistance.distance <= tol * tol) {\n          outObj.t = 1.0;\n          outObj.intersect = 1;\n          outObj.betweenPoints = true; // Intersection is near p2\n          return outObj;\n        }\n        return outObj;\n      }\n      if (pcoords[0] < 0.0) {\n        pcoords[0] = 0.0;\n        outDistance = distanceToLine(a1, p1, p2, x);\n        outObj.t = outDistance.t;\n        if (outDistance.distance <= tol * tol) {\n          outObj.intersect = 1;\n          return outObj;\n        }\n        return outObj;\n      }\n      if (pcoords[0] > 1.0) {\n        pcoords[0] = 1.0;\n        outDistance = distanceToLine(a2, p1, p2, x);\n        outObj.t = outDistance.t;\n        if (outDistance.distance <= tol * tol) {\n          outObj.intersect = 1;\n          return outObj;\n        }\n        return outObj;\n      }\n    }\n    return outObj;\n  };\n\n  publicAPI.evaluateLocation = (pcoords, x, weights) => {\n    const a1 = [];\n    const a2 = [];\n    model.points.getPoint(0, a1);\n    model.points.getPoint(1, a2);\n\n    for (let i = 0; i < 3; i++) {\n      x[i] = a1[i] + pcoords[0] * (a2[i] - a1[i]);\n    }\n\n    weights[0] = 1.0 - pcoords[0];\n    weights[1] = pcoords[0];\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  vtkCell.extend(publicAPI, model, initialValues);\n\n  vtkLine(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkLine');\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend, ...STATIC, ...Constants };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}