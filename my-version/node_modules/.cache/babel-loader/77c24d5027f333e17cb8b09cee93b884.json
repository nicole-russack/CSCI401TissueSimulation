{"ast":null,"code":"import macro from 'vtk.js/Sources/macros';\nimport vtkColorTransferFunction from 'vtk.js/Sources/Rendering/Core/ColorTransferFunction';\nimport vtkPiecewiseFunction from 'vtk.js/Sources/Common/DataModel/PiecewiseFunction';\nimport Constants from 'vtk.js/Sources/Rendering/Core/VolumeProperty/Constants';\nconst {\n  InterpolationType,\n  OpacityMode\n} = Constants;\nconst {\n  vtkErrorMacro\n} = macro;\nconst VTK_MAX_VRCOMP = 4; // ----------------------------------------------------------------------------\n// vtkVolumeProperty methods\n// ----------------------------------------------------------------------------\n\nfunction vtkVolumeProperty(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkVolumeProperty');\n\n  publicAPI.getMTime = () => {\n    let mTime = model.mtime;\n    let time;\n\n    for (let index = 0; index < VTK_MAX_VRCOMP; index++) {\n      // Color MTimes\n      if (model.componentData[index].colorChannels === 1) {\n        if (model.componentData[index].grayTransferFunction) {\n          // time that Gray transfer function was last modified\n          time = model.componentData[index].grayTransferFunction.getMTime();\n          mTime = mTime > time ? mTime : time;\n        }\n      } else if (model.componentData[index].colorChannels === 3) {\n        if (model.componentData[index].rGBTransferFunction) {\n          // time that RGB transfer function was last modified\n          time = model.componentData[index].rGBTransferFunction.getMTime();\n          mTime = mTime > time ? mTime : time;\n        }\n      } // Opacity MTimes\n\n\n      if (model.componentData[index].scalarOpacity) {\n        // time that Scalar opacity transfer function was last modified\n        time = model.componentData[index].scalarOpacity.getMTime();\n        mTime = mTime > time ? mTime : time;\n      }\n\n      if (model.componentData[index].gradientOpacity) {\n        if (!model.componentData[index].disableGradientOpacity) {\n          // time that Gradient opacity transfer function was last modified\n          time = model.componentData[index].gradientOpacity.getMTime();\n          mTime = mTime > time ? mTime : time;\n        }\n      }\n    }\n\n    return mTime;\n  };\n\n  publicAPI.getColorChannels = index => {\n    if (index < 0 || index > 3) {\n      vtkErrorMacro('Bad index - must be between 0 and 3');\n      return 0;\n    }\n\n    return model.componentData[index].colorChannels;\n  }; // Set the color of a volume to a gray transfer function\n\n\n  publicAPI.setGrayTransferFunction = (index, func) => {\n    let modified = false;\n\n    if (model.componentData[index].grayTransferFunction !== func) {\n      model.componentData[index].grayTransferFunction = func;\n      modified = true;\n    }\n\n    if (model.componentData[index].colorChannels !== 1) {\n      model.componentData[index].colorChannels = 1;\n      modified = true;\n    }\n\n    if (modified) {\n      publicAPI.modified();\n    }\n\n    return modified;\n  }; // Get the currently set gray transfer function. Create one if none set.\n\n\n  publicAPI.getGrayTransferFunction = index => {\n    if (model.componentData[index].grayTransferFunction === null) {\n      model.componentData[index].grayTransferFunction = vtkPiecewiseFunction.newInstance();\n      model.componentData[index].grayTransferFunction.addPoint(0, 0.0);\n      model.componentData[index].grayTransferFunction.addPoint(1024, 1.0);\n\n      if (model.componentData[index].colorChannels !== 1) {\n        model.componentData[index].colorChannels = 1;\n      }\n\n      publicAPI.modified();\n    }\n\n    return model.componentData[index].grayTransferFunction;\n  }; // Set the color of a volume to an RGB transfer function\n\n\n  publicAPI.setRGBTransferFunction = (index, func) => {\n    let modified = false;\n\n    if (model.componentData[index].rGBTransferFunction !== func) {\n      model.componentData[index].rGBTransferFunction = func;\n      modified = true;\n    }\n\n    if (model.componentData[index].colorChannels !== 3) {\n      model.componentData[index].colorChannels = 3;\n      modified = true;\n    }\n\n    if (modified) {\n      publicAPI.modified();\n    }\n\n    return modified;\n  }; // Get the currently set RGB transfer function. Create one if none set.\n\n\n  publicAPI.getRGBTransferFunction = index => {\n    if (model.componentData[index].rGBTransferFunction === null) {\n      model.componentData[index].rGBTransferFunction = vtkColorTransferFunction.newInstance();\n      model.componentData[index].rGBTransferFunction.addRGBPoint(0, 0.0, 0.0, 0.0);\n      model.componentData[index].rGBTransferFunction.addRGBPoint(1024, 1.0, 1.0, 1.0);\n\n      if (model.componentData[index].colorChannels !== 3) {\n        model.componentData[index].colorChannels = 3;\n      }\n\n      publicAPI.modified();\n    }\n\n    return model.componentData[index].rGBTransferFunction;\n  }; // Set the scalar opacity of a volume to a transfer function\n\n\n  publicAPI.setScalarOpacity = (index, func) => {\n    if (model.componentData[index].scalarOpacity !== func) {\n      model.componentData[index].scalarOpacity = func;\n      publicAPI.modified();\n      return true;\n    }\n\n    return false;\n  }; // Get the scalar opacity transfer function. Create one if none set.\n\n\n  publicAPI.getScalarOpacity = index => {\n    if (model.componentData[index].scalarOpacity === null) {\n      model.componentData[index].scalarOpacity = vtkPiecewiseFunction.newInstance();\n      model.componentData[index].scalarOpacity.addPoint(0, 1.0);\n      model.componentData[index].scalarOpacity.addPoint(1024, 1.0);\n      publicAPI.modified();\n    }\n\n    return model.componentData[index].scalarOpacity;\n  };\n\n  publicAPI.setComponentWeight = (index, value) => {\n    if (index < 0 || index >= VTK_MAX_VRCOMP) {\n      vtkErrorMacro('Invalid index');\n      return false;\n    }\n\n    const val = Math.min(1, Math.max(0, value));\n\n    if (model.componentData[index].componentWeight !== val) {\n      model.componentData[index].componentWeight = val;\n      publicAPI.modified();\n      return true;\n    }\n\n    return false;\n  };\n\n  publicAPI.getComponentWeight = index => {\n    if (index < 0 || index >= VTK_MAX_VRCOMP) {\n      vtkErrorMacro('Invalid index');\n      return 0.0;\n    }\n\n    return model.componentData[index].componentWeight;\n  };\n\n  publicAPI.setInterpolationTypeToNearest = () => publicAPI.setInterpolationType(InterpolationType.NEAREST);\n\n  publicAPI.setInterpolationTypeToLinear = () => publicAPI.setInterpolationType(InterpolationType.LINEAR);\n\n  publicAPI.setInterpolationTypeToFastLinear = () => publicAPI.setInterpolationType(InterpolationType.FAST_LINEAR);\n\n  publicAPI.getInterpolationTypeAsString = () => macro.enumToString(InterpolationType, model.interpolationType);\n\n  const sets = ['useGradientOpacity', 'scalarOpacityUnitDistance', 'gradientOpacityMinimumValue', 'gradientOpacityMinimumOpacity', 'gradientOpacityMaximumValue', 'gradientOpacityMaximumOpacity', 'opacityMode'];\n  sets.forEach(val => {\n    const cap = macro.capitalize(val);\n\n    publicAPI[`set${cap}`] = (index, value) => {\n      if (model.componentData[index][`${val}`] !== value) {\n        model.componentData[index][`${val}`] = value;\n        publicAPI.modified();\n        return true;\n      }\n\n      return false;\n    };\n  });\n  const gets = ['useGradientOpacity', 'scalarOpacityUnitDistance', 'gradientOpacityMinimumValue', 'gradientOpacityMinimumOpacity', 'gradientOpacityMaximumValue', 'gradientOpacityMaximumOpacity', 'opacityMode'];\n  gets.forEach(val => {\n    const cap = macro.capitalize(val);\n\n    publicAPI[`get${cap}`] = index => model.componentData[index][`${val}`];\n  });\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  independentComponents: true,\n  interpolationType: InterpolationType.FAST_LINEAR,\n  shade: false,\n  ambient: 0.1,\n  diffuse: 0.7,\n  specular: 0.2,\n  specularPower: 10.0,\n  useLabelOutline: false,\n  labelOutlineThickness: 1\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n\n  if (!model.componentData) {\n    model.componentData = [];\n\n    for (let i = 0; i < VTK_MAX_VRCOMP; ++i) {\n      model.componentData.push({\n        colorChannels: 1,\n        grayTransferFunction: null,\n        rGBTransferFunction: null,\n        scalarOpacity: null,\n        scalarOpacityUnitDistance: 1.0,\n        opacityMode: OpacityMode.FRACTIONAL,\n        gradientOpacityMinimumValue: 0,\n        gradientOpacityMinimumOpacity: 0.0,\n        gradientOpacityMaximumValue: 1.0,\n        gradientOpacityMaximumOpacity: 1.0,\n        useGradientOpacity: false,\n        componentWeight: 1.0\n      });\n    }\n  }\n\n  macro.setGet(publicAPI, model, ['independentComponents', 'interpolationType', 'shade', 'ambient', 'diffuse', 'specular', 'specularPower', 'useLabelOutline', 'labelOutlineThickness']); // Object methods\n\n  vtkVolumeProperty(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkVolumeProperty'); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend,\n  ...Constants\n};","map":{"version":3,"names":["macro","vtkColorTransferFunction","vtkPiecewiseFunction","Constants","InterpolationType","OpacityMode","vtkErrorMacro","VTK_MAX_VRCOMP","vtkVolumeProperty","publicAPI","model","classHierarchy","push","getMTime","mTime","mtime","time","index","componentData","colorChannels","grayTransferFunction","rGBTransferFunction","scalarOpacity","gradientOpacity","disableGradientOpacity","getColorChannels","setGrayTransferFunction","func","modified","getGrayTransferFunction","newInstance","addPoint","setRGBTransferFunction","getRGBTransferFunction","addRGBPoint","setScalarOpacity","getScalarOpacity","setComponentWeight","value","val","Math","min","max","componentWeight","getComponentWeight","setInterpolationTypeToNearest","setInterpolationType","NEAREST","setInterpolationTypeToLinear","LINEAR","setInterpolationTypeToFastLinear","FAST_LINEAR","getInterpolationTypeAsString","enumToString","interpolationType","sets","forEach","cap","capitalize","gets","DEFAULT_VALUES","independentComponents","shade","ambient","diffuse","specular","specularPower","useLabelOutline","labelOutlineThickness","extend","initialValues","Object","assign","obj","i","scalarOpacityUnitDistance","opacityMode","FRACTIONAL","gradientOpacityMinimumValue","gradientOpacityMinimumOpacity","gradientOpacityMaximumValue","gradientOpacityMaximumOpacity","useGradientOpacity","setGet"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/Core/VolumeProperty/index.js"],"sourcesContent":["import macro from 'vtk.js/Sources/macros';\nimport vtkColorTransferFunction from 'vtk.js/Sources/Rendering/Core/ColorTransferFunction';\nimport vtkPiecewiseFunction from 'vtk.js/Sources/Common/DataModel/PiecewiseFunction';\nimport Constants from 'vtk.js/Sources/Rendering/Core/VolumeProperty/Constants';\n\nconst { InterpolationType, OpacityMode } = Constants;\nconst { vtkErrorMacro } = macro;\n\nconst VTK_MAX_VRCOMP = 4;\n\n// ----------------------------------------------------------------------------\n// vtkVolumeProperty methods\n// ----------------------------------------------------------------------------\n\nfunction vtkVolumeProperty(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkVolumeProperty');\n\n  publicAPI.getMTime = () => {\n    let mTime = model.mtime;\n    let time;\n\n    for (let index = 0; index < VTK_MAX_VRCOMP; index++) {\n      // Color MTimes\n      if (model.componentData[index].colorChannels === 1) {\n        if (model.componentData[index].grayTransferFunction) {\n          // time that Gray transfer function was last modified\n          time = model.componentData[index].grayTransferFunction.getMTime();\n          mTime = mTime > time ? mTime : time;\n        }\n      } else if (model.componentData[index].colorChannels === 3) {\n        if (model.componentData[index].rGBTransferFunction) {\n          // time that RGB transfer function was last modified\n          time = model.componentData[index].rGBTransferFunction.getMTime();\n          mTime = mTime > time ? mTime : time;\n        }\n      }\n\n      // Opacity MTimes\n      if (model.componentData[index].scalarOpacity) {\n        // time that Scalar opacity transfer function was last modified\n        time = model.componentData[index].scalarOpacity.getMTime();\n        mTime = mTime > time ? mTime : time;\n      }\n\n      if (model.componentData[index].gradientOpacity) {\n        if (!model.componentData[index].disableGradientOpacity) {\n          // time that Gradient opacity transfer function was last modified\n          time = model.componentData[index].gradientOpacity.getMTime();\n          mTime = mTime > time ? mTime : time;\n        }\n      }\n    }\n\n    return mTime;\n  };\n\n  publicAPI.getColorChannels = (index) => {\n    if (index < 0 || index > 3) {\n      vtkErrorMacro('Bad index - must be between 0 and 3');\n      return 0;\n    }\n\n    return model.componentData[index].colorChannels;\n  };\n\n  // Set the color of a volume to a gray transfer function\n  publicAPI.setGrayTransferFunction = (index, func) => {\n    let modified = false;\n    if (model.componentData[index].grayTransferFunction !== func) {\n      model.componentData[index].grayTransferFunction = func;\n      modified = true;\n    }\n\n    if (model.componentData[index].colorChannels !== 1) {\n      model.componentData[index].colorChannels = 1;\n      modified = true;\n    }\n\n    if (modified) {\n      publicAPI.modified();\n    }\n    return modified;\n  };\n\n  // Get the currently set gray transfer function. Create one if none set.\n  publicAPI.getGrayTransferFunction = (index) => {\n    if (model.componentData[index].grayTransferFunction === null) {\n      model.componentData[index].grayTransferFunction =\n        vtkPiecewiseFunction.newInstance();\n      model.componentData[index].grayTransferFunction.addPoint(0, 0.0);\n      model.componentData[index].grayTransferFunction.addPoint(1024, 1.0);\n      if (model.componentData[index].colorChannels !== 1) {\n        model.componentData[index].colorChannels = 1;\n      }\n      publicAPI.modified();\n    }\n\n    return model.componentData[index].grayTransferFunction;\n  };\n\n  // Set the color of a volume to an RGB transfer function\n  publicAPI.setRGBTransferFunction = (index, func) => {\n    let modified = false;\n    if (model.componentData[index].rGBTransferFunction !== func) {\n      model.componentData[index].rGBTransferFunction = func;\n      modified = true;\n    }\n\n    if (model.componentData[index].colorChannels !== 3) {\n      model.componentData[index].colorChannels = 3;\n      modified = true;\n    }\n\n    if (modified) {\n      publicAPI.modified();\n    }\n    return modified;\n  };\n\n  // Get the currently set RGB transfer function. Create one if none set.\n  publicAPI.getRGBTransferFunction = (index) => {\n    if (model.componentData[index].rGBTransferFunction === null) {\n      model.componentData[index].rGBTransferFunction =\n        vtkColorTransferFunction.newInstance();\n      model.componentData[index].rGBTransferFunction.addRGBPoint(\n        0,\n        0.0,\n        0.0,\n        0.0\n      );\n      model.componentData[index].rGBTransferFunction.addRGBPoint(\n        1024,\n        1.0,\n        1.0,\n        1.0\n      );\n      if (model.componentData[index].colorChannels !== 3) {\n        model.componentData[index].colorChannels = 3;\n      }\n      publicAPI.modified();\n    }\n\n    return model.componentData[index].rGBTransferFunction;\n  };\n\n  // Set the scalar opacity of a volume to a transfer function\n  publicAPI.setScalarOpacity = (index, func) => {\n    if (model.componentData[index].scalarOpacity !== func) {\n      model.componentData[index].scalarOpacity = func;\n      publicAPI.modified();\n      return true;\n    }\n    return false;\n  };\n\n  // Get the scalar opacity transfer function. Create one if none set.\n  publicAPI.getScalarOpacity = (index) => {\n    if (model.componentData[index].scalarOpacity === null) {\n      model.componentData[index].scalarOpacity =\n        vtkPiecewiseFunction.newInstance();\n      model.componentData[index].scalarOpacity.addPoint(0, 1.0);\n      model.componentData[index].scalarOpacity.addPoint(1024, 1.0);\n      publicAPI.modified();\n    }\n\n    return model.componentData[index].scalarOpacity;\n  };\n\n  publicAPI.setComponentWeight = (index, value) => {\n    if (index < 0 || index >= VTK_MAX_VRCOMP) {\n      vtkErrorMacro('Invalid index');\n      return false;\n    }\n\n    const val = Math.min(1, Math.max(0, value));\n    if (model.componentData[index].componentWeight !== val) {\n      model.componentData[index].componentWeight = val;\n      publicAPI.modified();\n      return true;\n    }\n    return false;\n  };\n\n  publicAPI.getComponentWeight = (index) => {\n    if (index < 0 || index >= VTK_MAX_VRCOMP) {\n      vtkErrorMacro('Invalid index');\n      return 0.0;\n    }\n\n    return model.componentData[index].componentWeight;\n  };\n\n  publicAPI.setInterpolationTypeToNearest = () =>\n    publicAPI.setInterpolationType(InterpolationType.NEAREST);\n\n  publicAPI.setInterpolationTypeToLinear = () =>\n    publicAPI.setInterpolationType(InterpolationType.LINEAR);\n\n  publicAPI.setInterpolationTypeToFastLinear = () =>\n    publicAPI.setInterpolationType(InterpolationType.FAST_LINEAR);\n\n  publicAPI.getInterpolationTypeAsString = () =>\n    macro.enumToString(InterpolationType, model.interpolationType);\n\n  const sets = [\n    'useGradientOpacity',\n    'scalarOpacityUnitDistance',\n    'gradientOpacityMinimumValue',\n    'gradientOpacityMinimumOpacity',\n    'gradientOpacityMaximumValue',\n    'gradientOpacityMaximumOpacity',\n    'opacityMode',\n  ];\n  sets.forEach((val) => {\n    const cap = macro.capitalize(val);\n    publicAPI[`set${cap}`] = (index, value) => {\n      if (model.componentData[index][`${val}`] !== value) {\n        model.componentData[index][`${val}`] = value;\n        publicAPI.modified();\n        return true;\n      }\n      return false;\n    };\n  });\n\n  const gets = [\n    'useGradientOpacity',\n    'scalarOpacityUnitDistance',\n    'gradientOpacityMinimumValue',\n    'gradientOpacityMinimumOpacity',\n    'gradientOpacityMaximumValue',\n    'gradientOpacityMaximumOpacity',\n    'opacityMode',\n  ];\n  gets.forEach((val) => {\n    const cap = macro.capitalize(val);\n    publicAPI[`get${cap}`] = (index) => model.componentData[index][`${val}`];\n  });\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  independentComponents: true,\n  interpolationType: InterpolationType.FAST_LINEAR,\n  shade: false,\n  ambient: 0.1,\n  diffuse: 0.7,\n  specular: 0.2,\n  specularPower: 10.0,\n  useLabelOutline: false,\n  labelOutlineThickness: 1,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n\n  if (!model.componentData) {\n    model.componentData = [];\n    for (let i = 0; i < VTK_MAX_VRCOMP; ++i) {\n      model.componentData.push({\n        colorChannels: 1,\n        grayTransferFunction: null,\n        rGBTransferFunction: null,\n        scalarOpacity: null,\n        scalarOpacityUnitDistance: 1.0,\n        opacityMode: OpacityMode.FRACTIONAL,\n\n        gradientOpacityMinimumValue: 0,\n        gradientOpacityMinimumOpacity: 0.0,\n        gradientOpacityMaximumValue: 1.0,\n        gradientOpacityMaximumOpacity: 1.0,\n        useGradientOpacity: false,\n\n        componentWeight: 1.0,\n      });\n    }\n  }\n\n  macro.setGet(publicAPI, model, [\n    'independentComponents',\n    'interpolationType',\n    'shade',\n    'ambient',\n    'diffuse',\n    'specular',\n    'specularPower',\n    'useLabelOutline',\n    'labelOutlineThickness',\n  ]);\n\n  // Object methods\n  vtkVolumeProperty(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkVolumeProperty');\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend, ...Constants };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}