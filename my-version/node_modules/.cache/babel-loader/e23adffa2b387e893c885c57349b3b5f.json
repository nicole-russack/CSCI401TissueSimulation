{"ast":null,"code":"import macro from 'vtk.js/Sources/macros';\nimport vtk from 'vtk.js/Sources/vtk';\nimport vtkDataSetAttributes from 'vtk.js/Sources/Common/DataModel/DataSetAttributes';\nimport Constants from 'vtk.js/Sources/Common/DataModel/DataSet/Constants'; // import vtkBoundingBox from '../BoundingBox';\n// import * as vtkMath from '../../Core/Math';\n//\n// function getBounds(dataset) {\n//   if (dataset.bounds) {\n//     return dataset.bounds;\n//   }\n//   if (dataset.type && dataset[dataset.type]) {\n//     const ds = dataset[dataset.type];\n//     if (ds.bounds) {\n//       return ds.bounds;\n//     }\n//     if (ds.Points && ds.Points.bounds) {\n//       return ds.Points.bounds;\n//     }\n//     if (ds.Points && ds.Points.values) {\n//       const array = ds.Points.values;\n//       const bbox = [...vtkBoundingBox.INIT_BOUNDS];\n//       const size = array.length;\n//       const delta = ds.Points.numberOfComponents ? ds.Points.numberOfComponents : 3;\n//       for (let idx = 0; idx < size; idx += delta) {\n//         vtkBoundingBox.addPoint(bbox, array[idx * delta], array[(idx * delta) + 1], array[(idx * delta) + 2]);\n//       }\n//       ds.Points.bounds = bbox;\n//       return ds.Points.bounds;\n//     }\n//   }\n//   return vtkMath.createUninitializedBounds();\n// }\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nconst DATASET_FIELDS = ['pointData', 'cellData', 'fieldData']; // ----------------------------------------------------------------------------\n// vtkDataSet methods\n// ----------------------------------------------------------------------------\n\nfunction vtkDataSet(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkDataSet'); // Add dataset attributes\n\n  DATASET_FIELDS.forEach(fieldName => {\n    if (!model[fieldName]) {\n      model[fieldName] = vtkDataSetAttributes.newInstance();\n    } else {\n      model[fieldName] = vtk(model[fieldName]);\n    }\n  });\n  const superShallowCopy = publicAPI.shallowCopy;\n\n  publicAPI.shallowCopy = function (other) {\n    let debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    superShallowCopy(other, debug);\n    DATASET_FIELDS.forEach(fieldName => {\n      model[fieldName] = vtkDataSetAttributes.newInstance();\n      model[fieldName].shallowCopy(other.getReferenceByName(fieldName));\n    });\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {// pointData: null,\n  // cellData: null,\n  // fieldData: null,\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods\n\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, DATASET_FIELDS); // Object specific methods\n\n  vtkDataSet(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkDataSet'); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend,\n  ...Constants\n};","map":{"version":3,"names":["macro","vtk","vtkDataSetAttributes","Constants","DATASET_FIELDS","vtkDataSet","publicAPI","model","classHierarchy","push","forEach","fieldName","newInstance","superShallowCopy","shallowCopy","other","debug","getReferenceByName","DEFAULT_VALUES","extend","initialValues","Object","assign","obj","setGet"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Common/DataModel/DataSet/index.js"],"sourcesContent":["import macro from 'vtk.js/Sources/macros';\nimport vtk from 'vtk.js/Sources/vtk';\nimport vtkDataSetAttributes from 'vtk.js/Sources/Common/DataModel/DataSetAttributes';\nimport Constants from 'vtk.js/Sources/Common/DataModel/DataSet/Constants';\n\n// import vtkBoundingBox from '../BoundingBox';\n// import * as vtkMath from '../../Core/Math';\n//\n// function getBounds(dataset) {\n//   if (dataset.bounds) {\n//     return dataset.bounds;\n//   }\n//   if (dataset.type && dataset[dataset.type]) {\n//     const ds = dataset[dataset.type];\n//     if (ds.bounds) {\n//       return ds.bounds;\n//     }\n//     if (ds.Points && ds.Points.bounds) {\n//       return ds.Points.bounds;\n//     }\n\n//     if (ds.Points && ds.Points.values) {\n//       const array = ds.Points.values;\n//       const bbox = [...vtkBoundingBox.INIT_BOUNDS];\n//       const size = array.length;\n//       const delta = ds.Points.numberOfComponents ? ds.Points.numberOfComponents : 3;\n//       for (let idx = 0; idx < size; idx += delta) {\n//         vtkBoundingBox.addPoint(bbox, array[idx * delta], array[(idx * delta) + 1], array[(idx * delta) + 2]);\n//       }\n//       ds.Points.bounds = bbox;\n//       return ds.Points.bounds;\n//     }\n//   }\n//   return vtkMath.createUninitializedBounds();\n// }\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nconst DATASET_FIELDS = ['pointData', 'cellData', 'fieldData'];\n\n// ----------------------------------------------------------------------------\n// vtkDataSet methods\n// ----------------------------------------------------------------------------\n\nfunction vtkDataSet(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkDataSet');\n\n  // Add dataset attributes\n  DATASET_FIELDS.forEach((fieldName) => {\n    if (!model[fieldName]) {\n      model[fieldName] = vtkDataSetAttributes.newInstance();\n    } else {\n      model[fieldName] = vtk(model[fieldName]);\n    }\n  });\n\n  const superShallowCopy = publicAPI.shallowCopy;\n  publicAPI.shallowCopy = (other, debug = false) => {\n    superShallowCopy(other, debug);\n    DATASET_FIELDS.forEach((fieldName) => {\n      model[fieldName] = vtkDataSetAttributes.newInstance();\n      model[fieldName].shallowCopy(other.getReferenceByName(fieldName));\n    });\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  // pointData: null,\n  // cellData: null,\n  // fieldData: null,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, DATASET_FIELDS);\n\n  // Object specific methods\n  vtkDataSet(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkDataSet');\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend, ...Constants };\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,uBAAlB;AACA,OAAOC,GAAP,MAAgB,oBAAhB;AACA,OAAOC,oBAAP,MAAiC,mDAAjC;AACA,OAAOC,SAAP,MAAsB,mDAAtB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAG,CAAC,WAAD,EAAc,UAAd,EAA0B,WAA1B,CAAvB,C,CAEA;AACA;AACA;;AAEA,SAASC,UAAT,CAAoBC,SAApB,EAA+BC,KAA/B,EAAsC;EACpC;EACAA,KAAK,CAACC,cAAN,CAAqBC,IAArB,CAA0B,YAA1B,EAFoC,CAIpC;;EACAL,cAAc,CAACM,OAAf,CAAwBC,SAAD,IAAe;IACpC,IAAI,CAACJ,KAAK,CAACI,SAAD,CAAV,EAAuB;MACrBJ,KAAK,CAACI,SAAD,CAAL,GAAmBT,oBAAoB,CAACU,WAArB,EAAnB;IACD,CAFD,MAEO;MACLL,KAAK,CAACI,SAAD,CAAL,GAAmBV,GAAG,CAACM,KAAK,CAACI,SAAD,CAAN,CAAtB;IACD;EACF,CAND;EAQA,MAAME,gBAAgB,GAAGP,SAAS,CAACQ,WAAnC;;EACAR,SAAS,CAACQ,WAAV,GAAwB,UAACC,KAAD,EAA0B;IAAA,IAAlBC,KAAkB,uEAAV,KAAU;IAChDH,gBAAgB,CAACE,KAAD,EAAQC,KAAR,CAAhB;IACAZ,cAAc,CAACM,OAAf,CAAwBC,SAAD,IAAe;MACpCJ,KAAK,CAACI,SAAD,CAAL,GAAmBT,oBAAoB,CAACU,WAArB,EAAnB;MACAL,KAAK,CAACI,SAAD,CAAL,CAAiBG,WAAjB,CAA6BC,KAAK,CAACE,kBAAN,CAAyBN,SAAzB,CAA7B;IACD,CAHD;EAID,CAND;AAOD,C,CAED;AACA;AACA;;;AAEA,MAAMO,cAAc,GAAG,CACrB;EACA;EACA;AAHqB,CAAvB,C,CAMA;;AAEA,OAAO,SAASC,MAAT,CAAgBb,SAAhB,EAA2BC,KAA3B,EAAsD;EAAA,IAApBa,aAAoB,uEAAJ,EAAI;EAC3DC,MAAM,CAACC,MAAP,CAAcf,KAAd,EAAqBW,cAArB,EAAqCE,aAArC,EAD2D,CAG3D;;EACApB,KAAK,CAACuB,GAAN,CAAUjB,SAAV,EAAqBC,KAArB;EACAP,KAAK,CAACwB,MAAN,CAAalB,SAAb,EAAwBC,KAAxB,EAA+BH,cAA/B,EAL2D,CAO3D;;EACAC,UAAU,CAACC,SAAD,EAAYC,KAAZ,CAAV;AACD,C,CAED;;AAEA,OAAO,MAAMK,WAAW,GAAGZ,KAAK,CAACY,WAAN,CAAkBO,MAAlB,EAA0B,YAA1B,CAApB,C,CAEP;;AAEA,eAAe;EAAEP,WAAF;EAAeO,MAAf;EAAuB,GAAGhB;AAA1B,CAAf"},"metadata":{},"sourceType":"module"}