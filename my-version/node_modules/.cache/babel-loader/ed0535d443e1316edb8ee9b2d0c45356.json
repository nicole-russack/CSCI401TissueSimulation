{"ast":null,"code":"import macro from 'vtk.js/Sources/macros';\nimport * as vtkMath from 'vtk.js/Sources/Common/Core/Math';\nimport { vec3 } from 'gl-matrix'; // ----------------------------------------------------------------------------\n\nexport const LIGHT_TYPES = ['HeadLight', 'CameraLight', 'SceneLight']; // ----------------------------------------------------------------------------\n// vtkLight methods\n// ----------------------------------------------------------------------------\n\nfunction vtkLight(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkLight');\n  const tmpVec = new Float64Array(3);\n\n  publicAPI.getTransformedPosition = () => {\n    if (model.transformMatrix) {\n      vec3.transformMat4(tmpVec, model.position, model.transformMatrix);\n    } else {\n      vec3.set(tmpVec, model.position[0], model.position[1], model.position[2]);\n    }\n\n    return tmpVec;\n  };\n\n  publicAPI.getTransformedFocalPoint = () => {\n    if (model.transformMatrix) {\n      vec3.transformMat4(tmpVec, model.focalPoint, model.transformMatrix);\n    } else {\n      vec3.set(tmpVec, model.focalPoint[0], model.focalPoint[1], model.focalPoint[2]);\n    }\n\n    return tmpVec;\n  };\n\n  publicAPI.getDirection = () => {\n    if (model.directionMTime < model.mtime) {\n      vec3.sub(model.direction, model.focalPoint, model.position);\n      vtkMath.normalize(model.direction);\n      model.directionMTime = model.mtime;\n    }\n\n    return model.direction;\n  }; // Sets the direction from a vec3 instead of a focal point\n\n\n  publicAPI.setDirection = directionVector => {\n    const newFocalPoint = new Float64Array(3);\n    vec3.sub(newFocalPoint, model.position, directionVector);\n    model.focalPoint = newFocalPoint;\n  };\n\n  publicAPI.setDirectionAngle = (elevation, azimuth) => {\n    const elevationRadians = vtkMath.radiansFromDegrees(elevation);\n    const azimuthRadians = vtkMath.radiansFromDegrees(azimuth);\n    publicAPI.setPosition(Math.cos(elevationRadians) * Math.sin(azimuthRadians), Math.sin(elevationRadians), Math.cos(elevationRadians) * Math.cos(azimuthRadians));\n    publicAPI.setFocalPoint(0, 0, 0);\n    publicAPI.setPositional(0);\n  };\n\n  publicAPI.setLightTypeToHeadLight = () => {\n    publicAPI.setLightType('HeadLight');\n  };\n\n  publicAPI.setLightTypeToCameraLight = () => {\n    publicAPI.setLightType('CameraLight');\n  };\n\n  publicAPI.setLightTypeToSceneLight = () => {\n    publicAPI.setTransformMatrix(null);\n    publicAPI.setLightType('SceneLight');\n  };\n\n  publicAPI.lightTypeIsHeadLight = () => model.lightType === 'HeadLight';\n\n  publicAPI.lightTypeIsSceneLight = () => model.lightType === 'SceneLight';\n\n  publicAPI.lightTypeIsCameraLight = () => model.lightType === 'CameraLight';\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  switch: true,\n  intensity: 1,\n  color: [1, 1, 1],\n  position: [0, 0, 1],\n  focalPoint: [0, 0, 0],\n  positional: false,\n  exponent: 1,\n  coneAngle: 30,\n  coneFalloff: 5,\n  attenuationValues: [1, 0, 0],\n  transformMatrix: null,\n  lightType: 'SceneLight',\n  shadowAttenuation: 1,\n  direction: [0, 0, 0],\n  directionMTime: 0\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['intensity', 'switch', 'positional', 'exponent', 'coneAngle', 'coneFalloff', 'transformMatrix', 'lightType', 'shadowAttenuation', 'attenuationValues']);\n  macro.setGetArray(publicAPI, model, ['color', 'position', 'focalPoint', 'attenuationValues'], 3); // Object methods\n\n  vtkLight(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkLight'); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend,\n  LIGHT_TYPES\n};","map":{"version":3,"names":["macro","vtkMath","vec3","LIGHT_TYPES","vtkLight","publicAPI","model","classHierarchy","push","tmpVec","Float64Array","getTransformedPosition","transformMatrix","transformMat4","position","set","getTransformedFocalPoint","focalPoint","getDirection","directionMTime","mtime","sub","direction","normalize","setDirection","directionVector","newFocalPoint","setDirectionAngle","elevation","azimuth","elevationRadians","radiansFromDegrees","azimuthRadians","setPosition","Math","cos","sin","setFocalPoint","setPositional","setLightTypeToHeadLight","setLightType","setLightTypeToCameraLight","setLightTypeToSceneLight","setTransformMatrix","lightTypeIsHeadLight","lightType","lightTypeIsSceneLight","lightTypeIsCameraLight","DEFAULT_VALUES","switch","intensity","color","positional","exponent","coneAngle","coneFalloff","attenuationValues","shadowAttenuation","extend","initialValues","Object","assign","obj","setGet","setGetArray","newInstance"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/Core/Light/index.js"],"sourcesContent":["import macro from 'vtk.js/Sources/macros';\nimport * as vtkMath from 'vtk.js/Sources/Common/Core/Math';\nimport { vec3 } from 'gl-matrix';\n\n// ----------------------------------------------------------------------------\n\nexport const LIGHT_TYPES = ['HeadLight', 'CameraLight', 'SceneLight'];\n\n// ----------------------------------------------------------------------------\n// vtkLight methods\n// ----------------------------------------------------------------------------\n\nfunction vtkLight(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkLight');\n  const tmpVec = new Float64Array(3);\n\n  publicAPI.getTransformedPosition = () => {\n    if (model.transformMatrix) {\n      vec3.transformMat4(tmpVec, model.position, model.transformMatrix);\n    } else {\n      vec3.set(tmpVec, model.position[0], model.position[1], model.position[2]);\n    }\n    return tmpVec;\n  };\n\n  publicAPI.getTransformedFocalPoint = () => {\n    if (model.transformMatrix) {\n      vec3.transformMat4(tmpVec, model.focalPoint, model.transformMatrix);\n    } else {\n      vec3.set(\n        tmpVec,\n        model.focalPoint[0],\n        model.focalPoint[1],\n        model.focalPoint[2]\n      );\n    }\n    return tmpVec;\n  };\n\n  publicAPI.getDirection = () => {\n    if (model.directionMTime < model.mtime) {\n      vec3.sub(model.direction, model.focalPoint, model.position);\n      vtkMath.normalize(model.direction);\n      model.directionMTime = model.mtime;\n    }\n    return model.direction;\n  };\n\n  // Sets the direction from a vec3 instead of a focal point\n  publicAPI.setDirection = (directionVector) => {\n    const newFocalPoint = new Float64Array(3);\n    vec3.sub(newFocalPoint, model.position, directionVector);\n    model.focalPoint = newFocalPoint;\n  };\n\n  publicAPI.setDirectionAngle = (elevation, azimuth) => {\n    const elevationRadians = vtkMath.radiansFromDegrees(elevation);\n    const azimuthRadians = vtkMath.radiansFromDegrees(azimuth);\n\n    publicAPI.setPosition(\n      Math.cos(elevationRadians) * Math.sin(azimuthRadians),\n      Math.sin(elevationRadians),\n      Math.cos(elevationRadians) * Math.cos(azimuthRadians)\n    );\n\n    publicAPI.setFocalPoint(0, 0, 0);\n    publicAPI.setPositional(0);\n  };\n\n  publicAPI.setLightTypeToHeadLight = () => {\n    publicAPI.setLightType('HeadLight');\n  };\n\n  publicAPI.setLightTypeToCameraLight = () => {\n    publicAPI.setLightType('CameraLight');\n  };\n\n  publicAPI.setLightTypeToSceneLight = () => {\n    publicAPI.setTransformMatrix(null);\n    publicAPI.setLightType('SceneLight');\n  };\n\n  publicAPI.lightTypeIsHeadLight = () => model.lightType === 'HeadLight';\n\n  publicAPI.lightTypeIsSceneLight = () => model.lightType === 'SceneLight';\n\n  publicAPI.lightTypeIsCameraLight = () => model.lightType === 'CameraLight';\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  switch: true,\n  intensity: 1,\n  color: [1, 1, 1],\n  position: [0, 0, 1],\n  focalPoint: [0, 0, 0],\n  positional: false,\n  exponent: 1,\n  coneAngle: 30,\n  coneFalloff: 5,\n  attenuationValues: [1, 0, 0],\n  transformMatrix: null,\n  lightType: 'SceneLight',\n  shadowAttenuation: 1,\n  direction: [0, 0, 0],\n  directionMTime: 0,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, [\n    'intensity',\n    'switch',\n    'positional',\n    'exponent',\n    'coneAngle',\n    'coneFalloff',\n    'transformMatrix',\n    'lightType',\n    'shadowAttenuation',\n    'attenuationValues',\n  ]);\n  macro.setGetArray(\n    publicAPI,\n    model,\n    ['color', 'position', 'focalPoint', 'attenuationValues'],\n    3\n  );\n\n  // Object methods\n  vtkLight(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkLight');\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend, LIGHT_TYPES };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}