{"ast":null,"code":"import macro from 'vtk.js/Sources/macros';\nconst {\n  vtkErrorMacro\n} = macro; // ----------------------------------------------------------------------------\n// vtkOpenGLTextureUnitManager methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLTextureUnitManager(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLTextureUnitManager'); // ----------------------------------------------------------------------------\n  // Description:\n  // Delete the allocation table and check if it is not called before\n  // all the texture units have been released.\n\n  publicAPI.deleteTable = () => {\n    for (let i = 0; i < model.numberOfTextureUnits; ++i) {\n      if (model.textureUnits[i] === true) {\n        vtkErrorMacro('some texture units  were not properly released');\n      }\n    }\n\n    model.textureUnits = [];\n    model.numberOfTextureUnits = 0;\n  }; // ----------------------------------------------------------------------------\n\n\n  publicAPI.setContext = ctx => {\n    if (model.context !== ctx) {\n      if (model.context !== 0) {\n        publicAPI.deleteTable();\n      }\n\n      model.context = ctx;\n\n      if (model.context) {\n        model.numberOfTextureUnits = ctx.getParameter(ctx.MAX_TEXTURE_IMAGE_UNITS);\n\n        for (let i = 0; i < model.numberOfTextureUnits; ++i) {\n          model.textureUnits[i] = false;\n        }\n      }\n\n      publicAPI.modified();\n    }\n  }; // ----------------------------------------------------------------------------\n  // Description:\n  // Reserve a texture unit. It returns its number.\n  // It returns -1 if the allocation failed (because there are no more\n  // texture units left).\n  // \\post valid_result: result==-1 || result>=0 && result<this->GetNumberOfTextureUnits())\n  // \\post allocated: result==-1 || this->IsAllocated(result)\n\n\n  publicAPI.allocate = () => {\n    for (let i = 0; i < model.numberOfTextureUnits; i++) {\n      if (!publicAPI.isAllocated(i)) {\n        model.textureUnits[i] = true;\n        return i;\n      }\n    }\n\n    return -1;\n  };\n\n  publicAPI.allocateUnit = unit => {\n    if (publicAPI.isAllocated(unit)) {\n      return -1;\n    }\n\n    model.textureUnits[unit] = true;\n    return unit;\n  }; // ----------------------------------------------------------------------------\n  // Description:\n  // Tell if texture unit `textureUnitId' is already allocated.\n  // \\pre valid_id_range : textureUnitId>=0 && textureUnitId<this->GetNumberOfTextureUnits()\n\n\n  publicAPI.isAllocated = textureUnitId => model.textureUnits[textureUnitId]; // ----------------------------------------------------------------------------\n  // Description:\n  // Release a texture unit.\n  // \\pre valid_id: textureUnitId>=0 && textureUnitId<this->GetNumberOfTextureUnits()\n  // \\pre allocated_id: this->IsAllocated(textureUnitId)\n\n\n  publicAPI.free = val => {\n    model.textureUnits[val] = false;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  context: null,\n  numberOfTextureUnits: 0,\n  textureUnits: 0\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  macro.obj(publicAPI, model);\n  model.textureUnits = []; // Build VTK API\n\n  macro.get(publicAPI, model, ['numberOfTextureUnits']);\n  macro.setGet(publicAPI, model, ['context']); // Object methods\n\n  vtkOpenGLTextureUnitManager(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkOpenGLTextureUnitManager'); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend\n};","map":{"version":3,"names":["macro","vtkErrorMacro","vtkOpenGLTextureUnitManager","publicAPI","model","classHierarchy","push","deleteTable","i","numberOfTextureUnits","textureUnits","setContext","ctx","context","getParameter","MAX_TEXTURE_IMAGE_UNITS","modified","allocate","isAllocated","allocateUnit","unit","textureUnitId","free","val","DEFAULT_VALUES","extend","initialValues","Object","assign","obj","get","setGet","newInstance"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/OpenGL/TextureUnitManager/index.js"],"sourcesContent":["import macro from 'vtk.js/Sources/macros';\n\nconst { vtkErrorMacro } = macro;\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLTextureUnitManager methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLTextureUnitManager(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLTextureUnitManager');\n\n  // ----------------------------------------------------------------------------\n  // Description:\n  // Delete the allocation table and check if it is not called before\n  // all the texture units have been released.\n  publicAPI.deleteTable = () => {\n    for (let i = 0; i < model.numberOfTextureUnits; ++i) {\n      if (model.textureUnits[i] === true) {\n        vtkErrorMacro('some texture units  were not properly released');\n      }\n    }\n    model.textureUnits = [];\n    model.numberOfTextureUnits = 0;\n  };\n\n  // ----------------------------------------------------------------------------\n  publicAPI.setContext = (ctx) => {\n    if (model.context !== ctx) {\n      if (model.context !== 0) {\n        publicAPI.deleteTable();\n      }\n      model.context = ctx;\n      if (model.context) {\n        model.numberOfTextureUnits = ctx.getParameter(\n          ctx.MAX_TEXTURE_IMAGE_UNITS\n        );\n        for (let i = 0; i < model.numberOfTextureUnits; ++i) {\n          model.textureUnits[i] = false;\n        }\n      }\n      publicAPI.modified();\n    }\n  };\n\n  // ----------------------------------------------------------------------------\n  // Description:\n  // Reserve a texture unit. It returns its number.\n  // It returns -1 if the allocation failed (because there are no more\n  // texture units left).\n  // \\post valid_result: result==-1 || result>=0 && result<this->GetNumberOfTextureUnits())\n  // \\post allocated: result==-1 || this->IsAllocated(result)\n  publicAPI.allocate = () => {\n    for (let i = 0; i < model.numberOfTextureUnits; i++) {\n      if (!publicAPI.isAllocated(i)) {\n        model.textureUnits[i] = true;\n        return i;\n      }\n    }\n    return -1;\n  };\n\n  publicAPI.allocateUnit = (unit) => {\n    if (publicAPI.isAllocated(unit)) {\n      return -1;\n    }\n\n    model.textureUnits[unit] = true;\n    return unit;\n  };\n\n  // ----------------------------------------------------------------------------\n  // Description:\n  // Tell if texture unit `textureUnitId' is already allocated.\n  // \\pre valid_id_range : textureUnitId>=0 && textureUnitId<this->GetNumberOfTextureUnits()\n  publicAPI.isAllocated = (textureUnitId) => model.textureUnits[textureUnitId];\n\n  // ----------------------------------------------------------------------------\n  // Description:\n  // Release a texture unit.\n  // \\pre valid_id: textureUnitId>=0 && textureUnitId<this->GetNumberOfTextureUnits()\n  // \\pre allocated_id: this->IsAllocated(textureUnitId)\n  publicAPI.free = (val) => {\n    model.textureUnits[val] = false;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  context: null,\n  numberOfTextureUnits: 0,\n  textureUnits: 0,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  macro.obj(publicAPI, model);\n\n  model.textureUnits = [];\n\n  // Build VTK API\n  macro.get(publicAPI, model, ['numberOfTextureUnits']);\n\n  macro.setGet(publicAPI, model, ['context']);\n\n  // Object methods\n  vtkOpenGLTextureUnitManager(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(\n  extend,\n  'vtkOpenGLTextureUnitManager'\n);\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}