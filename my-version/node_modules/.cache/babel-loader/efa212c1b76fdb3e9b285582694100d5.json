{"ast":null,"code":"import macro from 'vtk.js/Sources/macros';\nimport vtkWebGPUTexture from 'vtk.js/Sources/Rendering/WebGPU/Texture';\nimport vtkWebGPURenderEncoder from 'vtk.js/Sources/Rendering/WebGPU/RenderEncoder';\nimport vtkWebGPUShaderCache from 'vtk.js/Sources/Rendering/WebGPU/ShaderCache';\nimport vtkRenderPass from 'vtk.js/Sources/Rendering/SceneGraph/RenderPass';\nimport vtkWebGPUFullScreenQuad from 'vtk.js/Sources/Rendering/WebGPU/FullScreenQuad'; // ----------------------------------------------------------------------------\n\nconst oitpFragTemplate = `\n//VTK::Mapper::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output: fragmentOutput;\n\n  var tcoord: vec2<i32> = vec2<i32>(i32(input.fragPos.x), i32(input.fragPos.y));\n  var reveal: f32 = textureLoad(oitpAccumTexture, tcoord, 0).r;\n  if (reveal == 1.0) { discard; }\n  var tcolor: vec4<f32> = textureLoad(oitpColorTexture, tcoord, 0);\n  var total: f32 = max(tcolor.a, 0.01);\n  var computedColor: vec4<f32> = vec4<f32>(tcolor.r/total, tcolor.g/total, tcolor.b/total, 1.0 - reveal);\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n`;\n\nfunction vtkWebGPUOrderIndependentTranslucentPass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUOrderIndependentTranslucentPass'); // this pass implements a forward rendering pipeline\n  // if both volumes and opaque geometry are present\n  // it will mix the two together by capturing a zbuffer\n  // first\n\n  publicAPI.traverse = (renNode, viewNode) => {\n    if (model.deleted) {\n      return;\n    } // we just render our delegates in order\n\n\n    model.currentParent = viewNode;\n    const device = viewNode.getDevice();\n\n    if (!model.translucentRenderEncoder) {\n      publicAPI.createRenderEncoder();\n      publicAPI.createFinalEncoder();\n      model.translucentColorTexture = vtkWebGPUTexture.newInstance({\n        label: 'translucentPassColor'\n      });\n      model.translucentColorTexture.create(device, {\n        width: viewNode.getCanvas().width,\n        height: viewNode.getCanvas().height,\n        format: 'rgba16float',\n\n        /* eslint-disable no-undef */\n\n        /* eslint-disable no-bitwise */\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING\n      });\n      const v1 = model.translucentColorTexture.createView('oitpColorTexture');\n      model.translucentRenderEncoder.setColorTextureView(0, v1);\n      model.translucentAccumulateTexture = vtkWebGPUTexture.newInstance({\n        label: 'translucentPassAccumulate'\n      });\n      model.translucentAccumulateTexture.create(device, {\n        width: viewNode.getCanvas().width,\n        height: viewNode.getCanvas().height,\n        format: 'r16float',\n\n        /* eslint-disable no-undef */\n\n        /* eslint-disable no-bitwise */\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING\n      });\n      const v2 = model.translucentAccumulateTexture.createView('oitpAccumTexture');\n      model.translucentRenderEncoder.setColorTextureView(1, v2);\n      model.fullScreenQuad = vtkWebGPUFullScreenQuad.newInstance();\n      model.fullScreenQuad.setDevice(viewNode.getDevice());\n      model.fullScreenQuad.setPipelineHash('oitpfsq');\n      model.fullScreenQuad.setTextureViews(model.translucentRenderEncoder.getColorTextureViews());\n      model.fullScreenQuad.setFragmentShaderTemplate(oitpFragTemplate);\n    } else {\n      model.translucentColorTexture.resizeToMatch(model.colorTextureView.getTexture());\n      model.translucentAccumulateTexture.resizeToMatch(model.colorTextureView.getTexture());\n    }\n\n    model.translucentRenderEncoder.setDepthTextureView(model.depthTextureView);\n    model.translucentRenderEncoder.attachTextureViews();\n    publicAPI.setCurrentOperation('translucentPass');\n    renNode.setRenderEncoder(model.translucentRenderEncoder);\n    renNode.traverse(publicAPI);\n    publicAPI.finalPass(viewNode, renNode);\n  };\n\n  publicAPI.finalPass = (viewNode, renNode) => {\n    model.translucentFinalEncoder.setColorTextureView(0, model.colorTextureView);\n    model.translucentFinalEncoder.attachTextureViews();\n    model.translucentFinalEncoder.begin(viewNode.getCommandEncoder());\n    renNode.scissorAndViewport(model.translucentFinalEncoder);\n    model.fullScreenQuad.prepareAndDraw(model.translucentFinalEncoder);\n    model.translucentFinalEncoder.end();\n  };\n\n  publicAPI.getTextures = () => [model.translucentColorTexture, model.translucentAccumulateTexture];\n\n  publicAPI.createRenderEncoder = () => {\n    model.translucentRenderEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'translucentRender'\n    });\n    const rDesc = model.translucentRenderEncoder.getDescription();\n    rDesc.colorAttachments = [{\n      view: undefined,\n      clearValue: [0.0, 0.0, 0.0, 0.0],\n      loadOp: 'clear',\n      storeOp: 'store'\n    }, {\n      view: undefined,\n      clearValue: [1.0, 0.0, 0.0, 0.0],\n      loadOp: 'clear',\n      storeOp: 'store'\n    }];\n    rDesc.depthStencilAttachment = {\n      view: undefined,\n      depthLoadOp: 'load',\n      depthStoreOp: 'store'\n    };\n    model.translucentRenderEncoder.setReplaceShaderCodeFunction(pipeline => {\n      const fDesc = pipeline.getShaderDescription('fragment');\n      fDesc.addOutput('vec4<f32>', 'outColor');\n      fDesc.addOutput('f32', 'outAccum');\n      fDesc.addBuiltinInput('vec4<f32>', '@builtin(position) fragPos');\n      let code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::RenderEncoder::Impl', [// very simple depth weighting in w z ranges from 1.0 near to 0.0\n      'var w: f32 = computedColor.a * pow(0.1 + input.fragPos.z, 2.0);', 'output.outColor = vec4<f32>(computedColor.rgb*w, w);', 'output.outAccum = computedColor.a;']).result;\n      fDesc.setCode(code);\n    });\n    model.translucentRenderEncoder.setPipelineHash('oitpr');\n    model.translucentRenderEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      depthStencil: {\n        depthWriteEnabled: false,\n        depthCompare: 'greater',\n        format: 'depth32float'\n      },\n      fragment: {\n        targets: [{\n          format: 'rgba16float',\n          blend: {\n            color: {\n              srcFactor: 'one',\n              dstFactor: 'one'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one'\n            }\n          }\n        }, {\n          format: 'r16float',\n          blend: {\n            color: {\n              srcFactor: 'zero',\n              dstFactor: 'one-minus-src'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n  };\n\n  publicAPI.createFinalEncoder = () => {\n    model.translucentFinalEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'translucentFinal'\n    });\n    model.translucentFinalEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        loadOp: 'load',\n        storeOp: 'store'\n      }]\n    });\n    model.translucentFinalEncoder.setReplaceShaderCodeFunction(pipeline => {\n      const fDesc = pipeline.getShaderDescription('fragment');\n      fDesc.addOutput('vec4<f32>', 'outColor');\n      fDesc.addBuiltinInput('vec4<f32>', '@builtin(position) fragPos');\n      let code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::RenderEncoder::Impl', ['output.outColor = vec4<f32>(computedColor.rgb, computedColor.a);']).result;\n      fDesc.setCode(code);\n    });\n    model.translucentFinalEncoder.setPipelineHash('oitpf');\n    model.translucentFinalEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: 'rgba16float',\n          blend: {\n            color: {\n              srcFactor: 'src-alpha',\n              dstFactor: 'one-minus-src-alpha'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  colorTextureView: null,\n  depthTextureView: null\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['colorTextureView', 'depthTextureView']); // Object methods\n\n  vtkWebGPUOrderIndependentTranslucentPass(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkWebGPUOrderIndependentTranslucentPass'); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend\n};","map":{"version":3,"names":["macro","vtkWebGPUTexture","vtkWebGPURenderEncoder","vtkWebGPUShaderCache","vtkRenderPass","vtkWebGPUFullScreenQuad","oitpFragTemplate","vtkWebGPUOrderIndependentTranslucentPass","publicAPI","model","classHierarchy","push","traverse","renNode","viewNode","deleted","currentParent","device","getDevice","translucentRenderEncoder","createRenderEncoder","createFinalEncoder","translucentColorTexture","newInstance","label","create","width","getCanvas","height","format","usage","GPUTextureUsage","RENDER_ATTACHMENT","TEXTURE_BINDING","v1","createView","setColorTextureView","translucentAccumulateTexture","v2","fullScreenQuad","setDevice","setPipelineHash","setTextureViews","getColorTextureViews","setFragmentShaderTemplate","resizeToMatch","colorTextureView","getTexture","setDepthTextureView","depthTextureView","attachTextureViews","setCurrentOperation","setRenderEncoder","finalPass","translucentFinalEncoder","begin","getCommandEncoder","scissorAndViewport","prepareAndDraw","end","getTextures","rDesc","getDescription","colorAttachments","view","undefined","clearValue","loadOp","storeOp","depthStencilAttachment","depthLoadOp","depthStoreOp","setReplaceShaderCodeFunction","pipeline","fDesc","getShaderDescription","addOutput","addBuiltinInput","code","getCode","substitute","result","setCode","setPipelineSettings","primitive","cullMode","depthStencil","depthWriteEnabled","depthCompare","fragment","targets","blend","color","srcFactor","dstFactor","alpha","srcfactor","setDescription","DEFAULT_VALUES","extend","initialValues","Object","assign","setGet"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/WebGPU/OrderIndependentTranslucentPass/index.js"],"sourcesContent":["import macro from 'vtk.js/Sources/macros';\nimport vtkWebGPUTexture from 'vtk.js/Sources/Rendering/WebGPU/Texture';\nimport vtkWebGPURenderEncoder from 'vtk.js/Sources/Rendering/WebGPU/RenderEncoder';\nimport vtkWebGPUShaderCache from 'vtk.js/Sources/Rendering/WebGPU/ShaderCache';\nimport vtkRenderPass from 'vtk.js/Sources/Rendering/SceneGraph/RenderPass';\nimport vtkWebGPUFullScreenQuad from 'vtk.js/Sources/Rendering/WebGPU/FullScreenQuad';\n\n// ----------------------------------------------------------------------------\n\nconst oitpFragTemplate = `\n//VTK::Mapper::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output: fragmentOutput;\n\n  var tcoord: vec2<i32> = vec2<i32>(i32(input.fragPos.x), i32(input.fragPos.y));\n  var reveal: f32 = textureLoad(oitpAccumTexture, tcoord, 0).r;\n  if (reveal == 1.0) { discard; }\n  var tcolor: vec4<f32> = textureLoad(oitpColorTexture, tcoord, 0);\n  var total: f32 = max(tcolor.a, 0.01);\n  var computedColor: vec4<f32> = vec4<f32>(tcolor.r/total, tcolor.g/total, tcolor.b/total, 1.0 - reveal);\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n`;\n\nfunction vtkWebGPUOrderIndependentTranslucentPass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUOrderIndependentTranslucentPass');\n\n  // this pass implements a forward rendering pipeline\n  // if both volumes and opaque geometry are present\n  // it will mix the two together by capturing a zbuffer\n  // first\n  publicAPI.traverse = (renNode, viewNode) => {\n    if (model.deleted) {\n      return;\n    }\n\n    // we just render our delegates in order\n    model.currentParent = viewNode;\n\n    const device = viewNode.getDevice();\n\n    if (!model.translucentRenderEncoder) {\n      publicAPI.createRenderEncoder();\n      publicAPI.createFinalEncoder();\n      model.translucentColorTexture = vtkWebGPUTexture.newInstance({\n        label: 'translucentPassColor',\n      });\n      model.translucentColorTexture.create(device, {\n        width: viewNode.getCanvas().width,\n        height: viewNode.getCanvas().height,\n        format: 'rgba16float',\n        /* eslint-disable no-undef */\n        /* eslint-disable no-bitwise */\n        usage:\n          GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,\n      });\n      const v1 = model.translucentColorTexture.createView('oitpColorTexture');\n      model.translucentRenderEncoder.setColorTextureView(0, v1);\n\n      model.translucentAccumulateTexture = vtkWebGPUTexture.newInstance({\n        label: 'translucentPassAccumulate',\n      });\n      model.translucentAccumulateTexture.create(device, {\n        width: viewNode.getCanvas().width,\n        height: viewNode.getCanvas().height,\n        format: 'r16float',\n        /* eslint-disable no-undef */\n        /* eslint-disable no-bitwise */\n        usage:\n          GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,\n      });\n      const v2 =\n        model.translucentAccumulateTexture.createView('oitpAccumTexture');\n      model.translucentRenderEncoder.setColorTextureView(1, v2);\n      model.fullScreenQuad = vtkWebGPUFullScreenQuad.newInstance();\n      model.fullScreenQuad.setDevice(viewNode.getDevice());\n      model.fullScreenQuad.setPipelineHash('oitpfsq');\n      model.fullScreenQuad.setTextureViews(\n        model.translucentRenderEncoder.getColorTextureViews()\n      );\n      model.fullScreenQuad.setFragmentShaderTemplate(oitpFragTemplate);\n    } else {\n      model.translucentColorTexture.resizeToMatch(\n        model.colorTextureView.getTexture()\n      );\n      model.translucentAccumulateTexture.resizeToMatch(\n        model.colorTextureView.getTexture()\n      );\n    }\n\n    model.translucentRenderEncoder.setDepthTextureView(model.depthTextureView);\n    model.translucentRenderEncoder.attachTextureViews();\n    publicAPI.setCurrentOperation('translucentPass');\n    renNode.setRenderEncoder(model.translucentRenderEncoder);\n    renNode.traverse(publicAPI);\n    publicAPI.finalPass(viewNode, renNode);\n  };\n\n  publicAPI.finalPass = (viewNode, renNode) => {\n    model.translucentFinalEncoder.setColorTextureView(\n      0,\n      model.colorTextureView\n    );\n    model.translucentFinalEncoder.attachTextureViews();\n\n    model.translucentFinalEncoder.begin(viewNode.getCommandEncoder());\n    renNode.scissorAndViewport(model.translucentFinalEncoder);\n    model.fullScreenQuad.prepareAndDraw(model.translucentFinalEncoder);\n    model.translucentFinalEncoder.end();\n  };\n\n  publicAPI.getTextures = () => [\n    model.translucentColorTexture,\n    model.translucentAccumulateTexture,\n  ];\n\n  publicAPI.createRenderEncoder = () => {\n    model.translucentRenderEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'translucentRender',\n    });\n    const rDesc = model.translucentRenderEncoder.getDescription();\n    rDesc.colorAttachments = [\n      {\n        view: undefined,\n        clearValue: [0.0, 0.0, 0.0, 0.0],\n        loadOp: 'clear',\n        storeOp: 'store',\n      },\n      {\n        view: undefined,\n        clearValue: [1.0, 0.0, 0.0, 0.0],\n        loadOp: 'clear',\n        storeOp: 'store',\n      },\n    ];\n    rDesc.depthStencilAttachment = {\n      view: undefined,\n      depthLoadOp: 'load',\n      depthStoreOp: 'store',\n    };\n\n    model.translucentRenderEncoder.setReplaceShaderCodeFunction((pipeline) => {\n      const fDesc = pipeline.getShaderDescription('fragment');\n      fDesc.addOutput('vec4<f32>', 'outColor');\n      fDesc.addOutput('f32', 'outAccum');\n      fDesc.addBuiltinInput('vec4<f32>', '@builtin(position) fragPos');\n      let code = fDesc.getCode();\n\n      code = vtkWebGPUShaderCache.substitute(\n        code,\n        '//VTK::RenderEncoder::Impl',\n        [\n          // very simple depth weighting in w z ranges from 1.0 near to 0.0\n          'var w: f32 = computedColor.a * pow(0.1 + input.fragPos.z, 2.0);',\n          'output.outColor = vec4<f32>(computedColor.rgb*w, w);',\n          'output.outAccum = computedColor.a;',\n        ]\n      ).result;\n      fDesc.setCode(code);\n    });\n    model.translucentRenderEncoder.setPipelineHash('oitpr');\n    model.translucentRenderEncoder.setPipelineSettings({\n      primitive: { cullMode: 'none' },\n      depthStencil: {\n        depthWriteEnabled: false,\n        depthCompare: 'greater',\n        format: 'depth32float',\n      },\n      fragment: {\n        targets: [\n          {\n            format: 'rgba16float',\n            blend: {\n              color: {\n                srcFactor: 'one',\n                dstFactor: 'one',\n              },\n              alpha: { srcfactor: 'one', dstFactor: 'one' },\n            },\n          },\n          {\n            format: 'r16float',\n            blend: {\n              color: {\n                srcFactor: 'zero',\n                dstFactor: 'one-minus-src',\n              },\n              alpha: { srcfactor: 'one', dstFactor: 'one-minus-src-alpha' },\n            },\n          },\n        ],\n      },\n    });\n  };\n\n  publicAPI.createFinalEncoder = () => {\n    model.translucentFinalEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'translucentFinal',\n    });\n    model.translucentFinalEncoder.setDescription({\n      colorAttachments: [\n        {\n          view: null,\n          loadOp: 'load',\n          storeOp: 'store',\n        },\n      ],\n    });\n    model.translucentFinalEncoder.setReplaceShaderCodeFunction((pipeline) => {\n      const fDesc = pipeline.getShaderDescription('fragment');\n      fDesc.addOutput('vec4<f32>', 'outColor');\n      fDesc.addBuiltinInput('vec4<f32>', '@builtin(position) fragPos');\n      let code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(\n        code,\n        '//VTK::RenderEncoder::Impl',\n        ['output.outColor = vec4<f32>(computedColor.rgb, computedColor.a);']\n      ).result;\n      fDesc.setCode(code);\n    });\n    model.translucentFinalEncoder.setPipelineHash('oitpf');\n    model.translucentFinalEncoder.setPipelineSettings({\n      primitive: { cullMode: 'none' },\n      fragment: {\n        targets: [\n          {\n            format: 'rgba16float',\n            blend: {\n              color: {\n                srcFactor: 'src-alpha',\n                dstFactor: 'one-minus-src-alpha',\n              },\n              alpha: { srcfactor: 'one', dstFactor: 'one-minus-src-alpha' },\n            },\n          },\n        ],\n      },\n    });\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  colorTextureView: null,\n  depthTextureView: null,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n\n  macro.setGet(publicAPI, model, ['colorTextureView', 'depthTextureView']);\n\n  // Object methods\n  vtkWebGPUOrderIndependentTranslucentPass(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(\n  extend,\n  'vtkWebGPUOrderIndependentTranslucentPass'\n);\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}