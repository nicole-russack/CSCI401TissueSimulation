{"ast":null,"code":"import { mat4 } from 'gl-matrix';\nimport macro from 'vtk.js/Sources/macros';\nimport vtkViewNode from 'vtk.js/Sources/Rendering/SceneGraph/ViewNode';\nimport { registerOverride } from 'vtk.js/Sources/Rendering/WebGPU/ViewNodeFactory'; // ----------------------------------------------------------------------------\n// vtkWebGPUCamera methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUCamera(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUCamera');\n\n  publicAPI.getProjectionMatrix = (outMat, aspect, cRange, windowCenter) => {\n    mat4.identity(outMat);\n\n    if (model.renderable.getParallelProjection()) {\n      // set up a rectangular parallelipiped\n      const parallelScale = model.renderable.getParallelScale();\n      const width = parallelScale * aspect;\n      const height = parallelScale;\n      const xmin = (windowCenter[0] - 1.0) * width;\n      const xmax = (windowCenter[0] + 1.0) * width;\n      const ymin = (windowCenter[1] - 1.0) * height;\n      const ymax = (windowCenter[1] + 1.0) * height;\n      const xr = 1.0 / (xmax - xmin);\n      const yr = 1.0 / (ymax - ymin);\n      outMat[0] = 2.0 * xr;\n      outMat[5] = 2.0 * yr;\n      outMat[10] = 1.0 / (cRange[1] - cRange[0]);\n      outMat[12] = (xmax + xmin) * xr;\n      outMat[13] = (ymax + ymin) * yr;\n      outMat[14] = cRange[1] / (cRange[1] - cRange[0]);\n    } else {\n      const tmp = Math.tan(Math.PI * model.renderable.getViewAngle() / 360.0);\n      let width;\n      let height;\n\n      if (model.renderable.getUseHorizontalViewAngle() === true) {\n        width = cRange[0] * tmp;\n        height = cRange[0] * tmp / aspect;\n      } else {\n        width = cRange[0] * tmp * aspect;\n        height = cRange[0] * tmp;\n      }\n\n      const xmin = (windowCenter[0] - 1.0) * width;\n      const xmax = (windowCenter[0] + 1.0) * width;\n      const ymin = (windowCenter[1] - 1.0) * height;\n      const ymax = (windowCenter[1] + 1.0) * height;\n      outMat[0] = 2.0 * cRange[0] / (xmax - xmin);\n      outMat[5] = 2.0 * cRange[0] / (ymax - ymin);\n      outMat[12] = (xmin + xmax) / (xmax - xmin);\n      outMat[13] = (ymin + ymax) / (ymax - ymin);\n      outMat[10] = 0.0;\n      outMat[14] = cRange[0];\n      outMat[11] = -1.0;\n      outMat[15] = 0.0;\n    }\n  };\n\n  publicAPI.convertToOpenGLDepth = val => {\n    if (model.renderable.getParallelProjection()) {\n      return 1.0 - val;\n    }\n\n    const cRange = model.renderable.getClippingRangeByReference();\n    let zval = -cRange[0] / val;\n    zval = (cRange[0] + cRange[1]) / (cRange[1] - cRange[0]) + 2.0 * cRange[0] * cRange[1] / (zval * (cRange[1] - cRange[0]));\n    return 0.5 * zval + 0.5;\n  };\n\n  publicAPI.getKeyMatrices = webGPURenderer => {\n    // has the camera changed?\n    const ren = webGPURenderer.getRenderable();\n    const webGPURenderWindow = webGPURenderer.getParent();\n\n    if (Math.max(webGPURenderWindow.getMTime(), publicAPI.getMTime(), ren.getMTime(), model.renderable.getMTime(), webGPURenderer.getStabilizedTime()) > model.keyMatrixTime.getMTime()) {\n      const wcvc = model.renderable.getViewMatrix();\n      mat4.copy(model.keyMatrices.normalMatrix, wcvc); // zero out translation\n\n      model.keyMatrices.normalMatrix[3] = 0.0;\n      model.keyMatrices.normalMatrix[7] = 0.0;\n      model.keyMatrices.normalMatrix[11] = 0.0;\n      mat4.invert(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);\n      mat4.transpose(model.keyMatrices.wcvc, wcvc);\n      const center = webGPURenderer.getStabilizedCenterByReference();\n      mat4.translate(model.keyMatrices.scvc, model.keyMatrices.wcvc, center);\n      const aspectRatio = webGPURenderer.getAspectRatio();\n      const cRange = model.renderable.getClippingRangeByReference();\n      publicAPI.getProjectionMatrix(model.keyMatrices.vcpc, aspectRatio, cRange, model.renderable.getWindowCenterByReference());\n      mat4.multiply(model.keyMatrices.scpc, model.keyMatrices.vcpc, model.keyMatrices.scvc);\n      mat4.invert(model.keyMatrices.pcsc, model.keyMatrices.scpc);\n      model.keyMatrixTime.modified();\n    }\n\n    return model.keyMatrices;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  keyMatrixTime: null,\n  keyMatrices: null\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.keyMatrixTime = {};\n  macro.obj(model.keyMatrixTime); // values always get set by the get method\n\n  model.keyMatrices = {\n    normalMatrix: new Float64Array(16),\n    vcpc: new Float64Array(16),\n    pcsc: new Float64Array(16),\n    wcvc: new Float64Array(16),\n    scpc: new Float64Array(16),\n    scvc: new Float64Array(16)\n  }; // Build VTK API\n\n  macro.setGet(publicAPI, model, ['keyMatrixTime']); // Object methods\n\n  vtkWebGPUCamera(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend\n}; // Register ourself to WebGPU backend if imported\n\nregisterOverride('vtkCamera', newInstance);","map":{"version":3,"names":["mat4","macro","vtkViewNode","registerOverride","vtkWebGPUCamera","publicAPI","model","classHierarchy","push","getProjectionMatrix","outMat","aspect","cRange","windowCenter","identity","renderable","getParallelProjection","parallelScale","getParallelScale","width","height","xmin","xmax","ymin","ymax","xr","yr","tmp","Math","tan","PI","getViewAngle","getUseHorizontalViewAngle","convertToOpenGLDepth","val","getClippingRangeByReference","zval","getKeyMatrices","webGPURenderer","ren","getRenderable","webGPURenderWindow","getParent","max","getMTime","getStabilizedTime","keyMatrixTime","wcvc","getViewMatrix","copy","keyMatrices","normalMatrix","invert","transpose","center","getStabilizedCenterByReference","translate","scvc","aspectRatio","getAspectRatio","vcpc","getWindowCenterByReference","multiply","scpc","pcsc","modified","DEFAULT_VALUES","extend","initialValues","Object","assign","obj","Float64Array","setGet","newInstance"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/WebGPU/Camera/index.js"],"sourcesContent":["import { mat4 } from 'gl-matrix';\n\nimport macro from 'vtk.js/Sources/macros';\nimport vtkViewNode from 'vtk.js/Sources/Rendering/SceneGraph/ViewNode';\n\nimport { registerOverride } from 'vtk.js/Sources/Rendering/WebGPU/ViewNodeFactory';\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUCamera methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUCamera(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUCamera');\n\n  publicAPI.getProjectionMatrix = (outMat, aspect, cRange, windowCenter) => {\n    mat4.identity(outMat);\n    if (model.renderable.getParallelProjection()) {\n      // set up a rectangular parallelipiped\n      const parallelScale = model.renderable.getParallelScale();\n      const width = parallelScale * aspect;\n      const height = parallelScale;\n\n      const xmin = (windowCenter[0] - 1.0) * width;\n      const xmax = (windowCenter[0] + 1.0) * width;\n      const ymin = (windowCenter[1] - 1.0) * height;\n      const ymax = (windowCenter[1] + 1.0) * height;\n\n      const xr = 1.0 / (xmax - xmin);\n      const yr = 1.0 / (ymax - ymin);\n      outMat[0] = 2.0 * xr;\n      outMat[5] = 2.0 * yr;\n      outMat[10] = 1.0 / (cRange[1] - cRange[0]);\n      outMat[12] = (xmax + xmin) * xr;\n      outMat[13] = (ymax + ymin) * yr;\n      outMat[14] = cRange[1] / (cRange[1] - cRange[0]);\n    } else {\n      const tmp = Math.tan((Math.PI * model.renderable.getViewAngle()) / 360.0);\n      let width;\n      let height;\n      if (model.renderable.getUseHorizontalViewAngle() === true) {\n        width = cRange[0] * tmp;\n        height = (cRange[0] * tmp) / aspect;\n      } else {\n        width = cRange[0] * tmp * aspect;\n        height = cRange[0] * tmp;\n      }\n\n      const xmin = (windowCenter[0] - 1.0) * width;\n      const xmax = (windowCenter[0] + 1.0) * width;\n      const ymin = (windowCenter[1] - 1.0) * height;\n      const ymax = (windowCenter[1] + 1.0) * height;\n\n      outMat[0] = (2.0 * cRange[0]) / (xmax - xmin);\n      outMat[5] = (2.0 * cRange[0]) / (ymax - ymin);\n      outMat[12] = (xmin + xmax) / (xmax - xmin);\n      outMat[13] = (ymin + ymax) / (ymax - ymin);\n      outMat[10] = 0.0;\n      outMat[14] = cRange[0];\n      outMat[11] = -1.0;\n      outMat[15] = 0.0;\n    }\n  };\n\n  publicAPI.convertToOpenGLDepth = (val) => {\n    if (model.renderable.getParallelProjection()) {\n      return 1.0 - val;\n    }\n    const cRange = model.renderable.getClippingRangeByReference();\n    let zval = -cRange[0] / val;\n    zval =\n      (cRange[0] + cRange[1]) / (cRange[1] - cRange[0]) +\n      (2.0 * cRange[0] * cRange[1]) / (zval * (cRange[1] - cRange[0]));\n    return 0.5 * zval + 0.5;\n  };\n\n  publicAPI.getKeyMatrices = (webGPURenderer) => {\n    // has the camera changed?\n    const ren = webGPURenderer.getRenderable();\n    const webGPURenderWindow = webGPURenderer.getParent();\n    if (\n      Math.max(\n        webGPURenderWindow.getMTime(),\n        publicAPI.getMTime(),\n        ren.getMTime(),\n        model.renderable.getMTime(),\n        webGPURenderer.getStabilizedTime()\n      ) > model.keyMatrixTime.getMTime()\n    ) {\n      const wcvc = model.renderable.getViewMatrix();\n\n      mat4.copy(model.keyMatrices.normalMatrix, wcvc);\n      // zero out translation\n      model.keyMatrices.normalMatrix[3] = 0.0;\n      model.keyMatrices.normalMatrix[7] = 0.0;\n      model.keyMatrices.normalMatrix[11] = 0.0;\n      mat4.invert(\n        model.keyMatrices.normalMatrix,\n        model.keyMatrices.normalMatrix\n      );\n      mat4.transpose(model.keyMatrices.wcvc, wcvc);\n\n      const center = webGPURenderer.getStabilizedCenterByReference();\n      mat4.translate(model.keyMatrices.scvc, model.keyMatrices.wcvc, center);\n\n      const aspectRatio = webGPURenderer.getAspectRatio();\n\n      const cRange = model.renderable.getClippingRangeByReference();\n      publicAPI.getProjectionMatrix(\n        model.keyMatrices.vcpc,\n        aspectRatio,\n        cRange,\n        model.renderable.getWindowCenterByReference()\n      );\n\n      mat4.multiply(\n        model.keyMatrices.scpc,\n        model.keyMatrices.vcpc,\n        model.keyMatrices.scvc\n      );\n\n      mat4.invert(model.keyMatrices.pcsc, model.keyMatrices.scpc);\n\n      model.keyMatrixTime.modified();\n    }\n    return model.keyMatrices;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  keyMatrixTime: null,\n  keyMatrices: null,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n\n  model.keyMatrixTime = {};\n  macro.obj(model.keyMatrixTime);\n\n  // values always get set by the get method\n  model.keyMatrices = {\n    normalMatrix: new Float64Array(16),\n    vcpc: new Float64Array(16),\n    pcsc: new Float64Array(16),\n    wcvc: new Float64Array(16),\n    scpc: new Float64Array(16),\n    scvc: new Float64Array(16),\n  };\n\n  // Build VTK API\n  macro.setGet(publicAPI, model, ['keyMatrixTime']);\n\n  // Object methods\n  vtkWebGPUCamera(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend);\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend };\n\n// Register ourself to WebGPU backend if imported\nregisterOverride('vtkCamera', newInstance);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}