{"ast":null,"code":"import macro from 'vtk.js/Sources/macros';\nimport vtkPolyData from 'vtk.js/Sources/Common/DataModel/PolyData';\nimport vtkProperty from 'vtk.js/Sources/Rendering/Core/Property';\nimport vtkRenderPass from 'vtk.js/Sources/Rendering/SceneGraph/RenderPass';\nimport vtkWebGPUBufferManager from 'vtk.js/Sources/Rendering/WebGPU/BufferManager';\nimport vtkWebGPUSimpleMapper from 'vtk.js/Sources/Rendering/WebGPU/SimpleMapper';\nimport vtkWebGPURenderEncoder from 'vtk.js/Sources/Rendering/WebGPU/RenderEncoder';\nimport vtkWebGPUShaderCache from 'vtk.js/Sources/Rendering/WebGPU/ShaderCache';\nimport vtkWebGPUTexture from 'vtk.js/Sources/Rendering/WebGPU/Texture';\nimport vtkWebGPUUniformBuffer from 'vtk.js/Sources/Rendering/WebGPU/UniformBuffer';\nimport vtkWebGPUFullScreenQuad from 'vtk.js/Sources/Rendering/WebGPU/FullScreenQuad';\nimport vtkWebGPUVolumePassFSQ from 'vtk.js/Sources/Rendering/WebGPU/VolumePassFSQ';\nimport * as vtkMath from 'vtk.js/Sources/Common/Core/Math';\nconst {\n  Representation\n} = vtkProperty;\nconst {\n  BufferUsage,\n  PrimitiveTypes\n} = vtkWebGPUBufferManager; // The volume rendering pass consists of two sub passes. The first\n// (depthRange) renders polygonal cubes for the volumes to compute min and\n// max bounds in depth for the image. This is then fed into the second pass\n// (final) which actually does the raycasting between those bounds sampling\n// the volumes along the way. So the first pass tends to be very fast whicle\n// the second is where most of the work is done.\n// given x then y then z ordering\n//\n//     2-----3\n//   / |   / |\n//  6-----7  |\n//  |  |  |  |\n//  |  0-----1\n//  |/    |/\n//  4-----5\n//\n\nconst cubeFaceTriangles = [[0, 4, 6], [0, 6, 2], [1, 3, 7], [1, 7, 5], [0, 5, 4], [0, 1, 5], [2, 6, 7], [2, 7, 3], [0, 3, 1], [0, 2, 3], [4, 5, 7], [4, 7, 6]];\nconst DepthBoundsFS = `\n//VTK::Renderer::Dec\n\n//VTK::Select::Dec\n\n//VTK::VolumePass::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output : fragmentOutput;\n\n  //VTK::Select::Impl\n\n  //VTK::TCoord::Impl\n\n  //VTK::VolumePass::Impl\n\n  // use the maximum (closest) of the current value and the zbuffer\n  // the blend func will then take the min to find the farthest stop value\n  var stopval: f32 = max(input.fragPos.z, textureLoad(opaquePassDepthTexture, vec2<i32>(i32(input.fragPos.x), i32(input.fragPos.y)), 0));\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n`;\nconst volumeCopyFragTemplate = `\n//VTK::Renderer::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output: fragmentOutput;\n\n  var computedColor: vec4<f32> = textureSample(volumePassColorTexture,\n    volumePassColorTextureSampler, mapperUBO.tscale*input.tcoordVS);\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n`;\n/* eslint-disable no-undef */\n\n/* eslint-disable no-bitwise */\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUVolumePass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUVolumePass'); // create the required textures, encoders, FSQ etc\n\n  publicAPI.initialize = viewNode => {\n    if (!model._clearEncoder) {\n      publicAPI.createClearEncoder(viewNode);\n    }\n\n    if (!model._mergeEncoder) {\n      publicAPI.createMergeEncoder(viewNode);\n    }\n\n    if (!model._copyEncoder) {\n      publicAPI.createCopyEncoder(viewNode);\n    }\n\n    if (!model._depthRangeEncoder) {\n      publicAPI.createDepthRangeEncoder(viewNode);\n    }\n\n    if (!model.fullScreenQuad) {\n      model.fullScreenQuad = vtkWebGPUVolumePassFSQ.newInstance();\n      model.fullScreenQuad.setDevice(viewNode.getDevice());\n      model.fullScreenQuad.setTextureViews([...model._depthRangeEncoder.getColorTextureViews()]);\n    }\n\n    if (!model._volumeCopyQuad) {\n      model._volumeCopyQuad = vtkWebGPUFullScreenQuad.newInstance();\n\n      model._volumeCopyQuad.setPipelineHash('volpassfsq');\n\n      model._volumeCopyQuad.setDevice(viewNode.getDevice());\n\n      model._volumeCopyQuad.setFragmentShaderTemplate(volumeCopyFragTemplate);\n\n      model._copyUBO = vtkWebGPUUniformBuffer.newInstance({\n        label: 'mapperUBO'\n      });\n\n      model._copyUBO.addEntry('tscale', 'vec2<f32>');\n\n      model._volumeCopyQuad.setUBO(model._copyUBO);\n\n      model._volumeCopyQuad.setTextureViews([model._colorTextureView]);\n    }\n  };\n\n  publicAPI.traverse = (renNode, viewNode) => {\n    if (model.deleted) {\n      return;\n    } // we just render our delegates in order\n\n\n    model.currentParent = viewNode; // create stuff we need\n\n    publicAPI.initialize(viewNode); // determine if we are rendering a small size\n\n    publicAPI.computeTiming(viewNode); // first render the boxes to generate a min max depth\n    // map for all the volumes\n\n    publicAPI.renderDepthBounds(renNode, viewNode); // always mark true\n\n    model._firstGroup = true;\n    const device = viewNode.getDevice(); // determine how many volumes we can render at a time. We subtract\n    // 4 because we use know we use textures for min, max, ofun and tfun\n\n    const maxVolumes = device.getHandle().limits.maxSampledTexturesPerShaderStage - 4; // if we have to make multiple passes then break the volumes up into groups\n    // rendered from farthest to closest\n\n    if (model.volumes.length > maxVolumes) {\n      const cameraPos = renNode.getRenderable().getActiveCamera().getPosition(); // sort from back to front based on volume centroid\n\n      const distances = [];\n\n      for (let v = 0; v < model.volumes.length; v++) {\n        const bounds = model.volumes[v].getRenderable().getBounds();\n        const centroid = [0.5 * (bounds[1] + bounds[0]), 0.5 * (bounds[3] + bounds[2]), 0.5 * (bounds[5] + bounds[4])];\n        distances[v] = vtkMath.distance2BetweenPoints(centroid, cameraPos);\n      } // sort by distance\n\n\n      const volumeOrder = [...Array(model.volumes.length).keys()];\n      volumeOrder.sort((a, b) => distances[b] - distances[a]); // render in chunks back to front\n\n      let volumesToRender = []; // start with smallest chunk so that the last (closest) chunk\n      // has a full maxVolumes;\n\n      let chunkSize = volumeOrder.length % maxVolumes;\n\n      for (let v = 0; v < volumeOrder.length; v++) {\n        volumesToRender.push(model.volumes[volumeOrder[v]]);\n\n        if (volumesToRender.length >= chunkSize) {\n          publicAPI.rayCastPass(viewNode, renNode, volumesToRender);\n          volumesToRender = [];\n          chunkSize = maxVolumes;\n          model._firstGroup = false;\n        }\n      }\n    } else {\n      // if not rendering in chunks then just draw all of them at once\n      publicAPI.rayCastPass(viewNode, renNode, model.volumes);\n    } // copy back to the original color buffer\n    // final composite\n\n\n    model._volumeCopyQuad.setWebGPURenderer(renNode);\n\n    if (model._useSmallViewport) {\n      const width = model._colorTextureView.getTexture().getWidth();\n\n      const height = model._colorTextureView.getTexture().getHeight();\n\n      model._copyUBO.setArray('tscale', [model._smallViewportWidth / width, model._smallViewportHeight / height]);\n    } else {\n      model._copyUBO.setArray('tscale', [1.0, 1.0]);\n    }\n\n    model._copyUBO.sendIfNeeded(device);\n\n    model._copyEncoder.setColorTextureView(0, model.colorTextureView);\n\n    model._copyEncoder.attachTextureViews();\n\n    model._copyEncoder.begin(viewNode.getCommandEncoder());\n\n    renNode.scissorAndViewport(model._copyEncoder);\n\n    model._volumeCopyQuad.prepareAndDraw(model._copyEncoder);\n\n    model._copyEncoder.end();\n  }; // unsubscribe from our listeners\n\n\n  publicAPI.delete = macro.chain(() => {\n    if (model._animationRateSubscription) {\n      model._animationRateSubscription.unsubscribe();\n\n      model._animationRateSubscription = null;\n    }\n  }, publicAPI.delete);\n\n  publicAPI.computeTiming = viewNode => {\n    model._useSmallViewport = false;\n    const rwi = viewNode.getRenderable().getInteractor();\n\n    if (rwi.isAnimating() && model._lastScale > 1.5) {\n      if (!model._smallViewportHeight) {\n        model._smallViewportWidth = Math.ceil(viewNode.getCanvas().width / Math.sqrt(model._lastScale));\n        model._smallViewportHeight = Math.ceil(viewNode.getCanvas().height / Math.sqrt(model._lastScale));\n      }\n\n      model._useSmallViewport = true;\n    }\n\n    model._colorTexture.resize(viewNode.getCanvas().width, viewNode.getCanvas().height);\n\n    if (!model._animationRateSubscription) {\n      // when the animation frame rate changes recompute the scale factor\n      model._animationRateSubscription = rwi.onAnimationFrameRateUpdate(() => {\n        const firstMapper = model.volumes[0].getRenderable().getMapper();\n\n        if (firstMapper.getAutoAdjustSampleDistances()) {\n          const frate = rwi.getRecentAnimationFrameRate();\n          const targetScale = model._lastScale * rwi.getDesiredUpdateRate() / frate;\n          model._lastScale = targetScale; // clamp scale to some reasonable values.\n          // Below 1.5 we will just be using full resolution as that is close enough\n          // Above 400 seems like a lot so we limit to that 1/20th per axis\n\n          if (model._lastScale > 400) {\n            model._lastScale = 400;\n          }\n        } else {\n          model._lastScale = firstMapper.getImageSampleDistance() * firstMapper.getImageSampleDistance();\n        }\n\n        if (model._lastScale < 1.5) {\n          model._lastScale = 1.5;\n        } else {\n          model._smallViewportWidth = Math.ceil(viewNode.getCanvas().width / Math.sqrt(model._lastScale));\n          model._smallViewportHeight = Math.ceil(viewNode.getCanvas().height / Math.sqrt(model._lastScale));\n        }\n      });\n    }\n  };\n\n  publicAPI.rayCastPass = (viewNode, renNode, volumes) => {\n    const encoder = model._firstGroup ? model._clearEncoder : model._mergeEncoder;\n    encoder.attachTextureViews();\n    encoder.begin(viewNode.getCommandEncoder());\n\n    let width = model._colorTextureView.getTexture().getWidth();\n\n    let height = model._colorTextureView.getTexture().getHeight();\n\n    if (model._useSmallViewport) {\n      width = model._smallViewportWidth;\n      height = model._smallViewportHeight;\n    }\n\n    encoder.getHandle().setViewport(0, 0, width, height, 0.0, 1.0); // set scissor\n\n    encoder.getHandle().setScissorRect(0, 0, width, height);\n    model.fullScreenQuad.setWebGPURenderer(renNode);\n    model.fullScreenQuad.setVolumes(volumes);\n    model.fullScreenQuad.prepareAndDraw(encoder);\n    encoder.end();\n  };\n\n  publicAPI.renderDepthBounds = (renNode, viewNode) => {\n    publicAPI.updateDepthPolyData(renNode);\n    const pd = model._boundsPoly;\n    const points = pd.getPoints();\n    const cells = pd.getPolys();\n    let buffRequest = {\n      hash: `vp${cells.getMTime()}`,\n      usage: BufferUsage.Index,\n      cells,\n      numberOfPoints: points.getNumberOfPoints(),\n      primitiveType: PrimitiveTypes.Triangles,\n      representation: Representation.SURFACE\n    };\n    const indexBuffer = viewNode.getDevice().getBufferManager().getBuffer(buffRequest);\n\n    model._mapper.getVertexInput().setIndexBuffer(indexBuffer); // points\n\n\n    buffRequest = {\n      usage: BufferUsage.PointArray,\n      format: 'float32x4',\n      hash: `vp${points.getMTime()}${cells.getMTime()}`,\n      dataArray: points,\n      indexBuffer,\n      packExtra: true\n    };\n    const buff = viewNode.getDevice().getBufferManager().getBuffer(buffRequest);\n\n    model._mapper.getVertexInput().addBuffer(buff, ['vertexBC']);\n\n    model._mapper.setNumberOfVertices(buff.getSizeInBytes() / buff.getStrideInBytes());\n\n    publicAPI.drawDepthRange(renNode, viewNode);\n  };\n\n  publicAPI.updateDepthPolyData = renNode => {\n    // check mtimes first\n    let update = false;\n\n    for (let i = 0; i < model.volumes.length; i++) {\n      const mtime = model.volumes[i].getMTime();\n\n      if (!model._lastMTimes[i] || mtime !== model._lastMTimes[i]) {\n        update = true;\n        model._lastMTimes[i] = mtime;\n      }\n    } // also check stabilized time\n\n\n    const stime = renNode.getStabilizedTime();\n\n    if (model._lastMTimes.length <= model.volumes.length || stime !== model._lastMTimes[model.volumes.length]) {\n      update = true;\n      model._lastMTimes[model.volumes.length] = stime;\n    } // if no need to update then return\n\n\n    if (!update) {\n      return;\n    } // rebuild\n\n\n    const center = renNode.getStabilizedCenterByReference();\n    const numPts = model.volumes.length * 8;\n    const points = new Float64Array(numPts * 3);\n    const numTris = model.volumes.length * 12;\n    const polys = new Uint16Array(numTris * 4); // add points and cells\n\n    for (let i = 0; i < model.volumes.length; i++) {\n      model.volumes[i].getBoundingCubePoints(points, i * 24);\n      let cellIdx = i * 12 * 4;\n      const offset = i * 8;\n\n      for (let t = 0; t < 12; t++) {\n        polys[cellIdx++] = 3;\n        polys[cellIdx++] = offset + cubeFaceTriangles[t][0];\n        polys[cellIdx++] = offset + cubeFaceTriangles[t][1];\n        polys[cellIdx++] = offset + cubeFaceTriangles[t][2];\n      }\n    }\n\n    for (let p = 0; p < points.length; p += 3) {\n      points[p] -= center[0];\n      points[p + 1] -= center[1];\n      points[p + 2] -= center[2];\n    }\n\n    model._boundsPoly.getPoints().setData(points, 3);\n\n    model._boundsPoly.getPoints().modified();\n\n    model._boundsPoly.getPolys().setData(polys, 1);\n\n    model._boundsPoly.getPolys().modified();\n\n    model._boundsPoly.modified();\n  };\n\n  publicAPI.drawDepthRange = (renNode, viewNode) => {\n    // copy current depth buffer to\n    model._depthRangeTexture.resizeToMatch(model.colorTextureView.getTexture());\n\n    model._depthRangeTexture2.resizeToMatch(model.colorTextureView.getTexture());\n\n    model._depthRangeEncoder.attachTextureViews();\n\n    publicAPI.setCurrentOperation('volumeDepthRangePass');\n    renNode.setRenderEncoder(model._depthRangeEncoder);\n    renNode.volumeDepthRangePass(true);\n\n    model._mapper.setWebGPURenderer(renNode);\n\n    model._mapper.prepareToDraw(model._depthRangeEncoder);\n\n    model._mapper.registerDrawCallback(model._depthRangeEncoder);\n\n    renNode.volumeDepthRangePass(false);\n  };\n\n  publicAPI.createDepthRangeEncoder = viewNode => {\n    const device = viewNode.getDevice();\n    model._depthRangeEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'VolumePass DepthRange'\n    });\n\n    model._depthRangeEncoder.setPipelineHash('volr');\n\n    model._depthRangeEncoder.setReplaceShaderCodeFunction(pipeline => {\n      const fDesc = pipeline.getShaderDescription('fragment');\n      fDesc.addOutput('vec4<f32>', 'outColor1');\n      fDesc.addOutput('vec4<f32>', 'outColor2');\n      let code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::RenderEncoder::Impl', ['output.outColor1 = vec4<f32>(input.fragPos.z, 0.0, 0.0, 0.0);', 'output.outColor2 = vec4<f32>(stopval, 0.0, 0.0, 0.0);']).result;\n      fDesc.setCode(code);\n    });\n\n    model._depthRangeEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        clearValue: [0.0, 0.0, 0.0, 0.0],\n        loadOp: 'clear',\n        storeOp: 'store'\n      }, {\n        view: null,\n        clearValue: [1.0, 1.0, 1.0, 1.0],\n        loadOp: 'clear',\n        storeOp: 'store'\n      }]\n    });\n\n    model._depthRangeEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: 'r16float',\n          blend: {\n            color: {\n              srcFactor: 'one',\n              dstFactor: 'one',\n              operation: 'max'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one',\n              operation: 'max'\n            }\n          }\n        }, {\n          format: 'r16float',\n          blend: {\n            color: {\n              srcFactor: 'one',\n              dstFactor: 'one',\n              operation: 'min'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one',\n              operation: 'min'\n            }\n          }\n        }]\n      }\n    }); // and the textures it needs\n\n\n    model._depthRangeTexture = vtkWebGPUTexture.newInstance({\n      label: 'volumePassMaxDepth'\n    });\n\n    model._depthRangeTexture.create(device, {\n      width: viewNode.getCanvas().width,\n      height: viewNode.getCanvas().height,\n      format: 'r16float',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING\n    });\n\n    const maxView = model._depthRangeTexture.createView('maxTexture');\n\n    model._depthRangeEncoder.setColorTextureView(0, maxView);\n\n    model._depthRangeTexture2 = vtkWebGPUTexture.newInstance({\n      label: 'volumePassDepthMin'\n    });\n\n    model._depthRangeTexture2.create(device, {\n      width: viewNode.getCanvas().width,\n      height: viewNode.getCanvas().height,\n      format: 'r16float',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING\n    });\n\n    const minView = model._depthRangeTexture2.createView('minTexture');\n\n    model._depthRangeEncoder.setColorTextureView(1, minView);\n\n    model._mapper.setDevice(viewNode.getDevice());\n\n    model._mapper.setTextureViews([model.depthTextureView]);\n  };\n\n  publicAPI.createClearEncoder = viewNode => {\n    model._colorTexture = vtkWebGPUTexture.newInstance({\n      label: 'volumePassColor'\n    });\n\n    model._colorTexture.create(viewNode.getDevice(), {\n      width: viewNode.getCanvas().width,\n      height: viewNode.getCanvas().height,\n      format: 'bgra8unorm',\n\n      /* eslint-disable no-undef */\n\n      /* eslint-disable no-bitwise */\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC\n    });\n\n    model._colorTextureView = model._colorTexture.createView('volumePassColorTexture');\n\n    model._colorTextureView.addSampler(viewNode.getDevice(), {\n      minFilter: 'linear',\n      magFilter: 'linear'\n    });\n\n    model._clearEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'VolumePass Clear'\n    });\n\n    model._clearEncoder.setColorTextureView(0, model._colorTextureView);\n\n    model._clearEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        clearValue: [0.0, 0.0, 0.0, 0.0],\n        loadOp: 'clear',\n        storeOp: 'store'\n      }]\n    });\n\n    model._clearEncoder.setPipelineHash('volpf');\n\n    model._clearEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: 'bgra8unorm',\n          blend: {\n            color: {\n              srcFactor: 'src-alpha',\n              dstFactor: 'one-minus-src-alpha'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n  };\n\n  publicAPI.createCopyEncoder = viewNode => {\n    model._copyEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'volumePassCopy'\n    });\n\n    model._copyEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        loadOp: 'load',\n        storeOp: 'store'\n      }]\n    });\n\n    model._copyEncoder.setPipelineHash('volcopypf');\n\n    model._copyEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: 'rgba16float',\n          blend: {\n            color: {\n              srcFactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n  };\n\n  publicAPI.createMergeEncoder = viewNode => {\n    model._mergeEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'volumePassMerge'\n    });\n\n    model._mergeEncoder.setColorTextureView(0, model._colorTextureView);\n\n    model._mergeEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        loadOp: 'load',\n        storeOp: 'store'\n      }]\n    });\n\n    model._mergeEncoder.setReplaceShaderCodeFunction(pipeline => {\n      const fDesc = pipeline.getShaderDescription('fragment');\n      fDesc.addOutput('vec4<f32>', 'outColor');\n      let code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::RenderEncoder::Impl', ['output.outColor = vec4<f32>(computedColor.rgb, computedColor.a);']).result;\n      fDesc.setCode(code);\n    });\n\n    model._mergeEncoder.setPipelineHash('volpf');\n\n    model._mergeEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: 'bgra8unorm',\n          blend: {\n            color: {\n              srcFactor: 'src-alpha',\n              dstFactor: 'one-minus-src-alpha'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n  }; // marks modified when needed\n\n\n  publicAPI.setVolumes = val => {\n    if (!model.volumes || model.volumes.length !== val.length) {\n      model.volumes = [...val];\n      publicAPI.modified();\n      return;\n    }\n\n    for (let i = 0; i < val.length; i++) {\n      if (val[i] !== model.volumes[i]) {\n        model.volumes = [...val];\n        publicAPI.modified();\n        return;\n      }\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  colorTextureView: null,\n  depthTextureView: null,\n  volumes: null\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  model._lastScale = 2.0;\n  model._mapper = vtkWebGPUSimpleMapper.newInstance();\n\n  model._mapper.setFragmentShaderTemplate(DepthBoundsFS);\n\n  model._mapper.getShaderReplacements().set('replaceShaderVolumePass', (hash, pipeline, vertexInput) => {\n    const fDesc = pipeline.getShaderDescription('fragment');\n    fDesc.addBuiltinInput('vec4<f32>', '@builtin(position) fragPos');\n  });\n\n  model._boundsPoly = vtkPolyData.newInstance();\n  model._lastMTimes = [];\n  macro.setGet(publicAPI, model, ['colorTextureView', 'depthTextureView']); // Object methods\n\n  vtkWebGPUVolumePass(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkWebGPUVolumePass'); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend\n};","map":{"version":3,"names":["macro","vtkPolyData","vtkProperty","vtkRenderPass","vtkWebGPUBufferManager","vtkWebGPUSimpleMapper","vtkWebGPURenderEncoder","vtkWebGPUShaderCache","vtkWebGPUTexture","vtkWebGPUUniformBuffer","vtkWebGPUFullScreenQuad","vtkWebGPUVolumePassFSQ","vtkMath","Representation","BufferUsage","PrimitiveTypes","cubeFaceTriangles","DepthBoundsFS","volumeCopyFragTemplate","vtkWebGPUVolumePass","publicAPI","model","classHierarchy","push","initialize","viewNode","_clearEncoder","createClearEncoder","_mergeEncoder","createMergeEncoder","_copyEncoder","createCopyEncoder","_depthRangeEncoder","createDepthRangeEncoder","fullScreenQuad","newInstance","setDevice","getDevice","setTextureViews","getColorTextureViews","_volumeCopyQuad","setPipelineHash","setFragmentShaderTemplate","_copyUBO","label","addEntry","setUBO","_colorTextureView","traverse","renNode","deleted","currentParent","computeTiming","renderDepthBounds","_firstGroup","device","maxVolumes","getHandle","limits","maxSampledTexturesPerShaderStage","volumes","length","cameraPos","getRenderable","getActiveCamera","getPosition","distances","v","bounds","getBounds","centroid","distance2BetweenPoints","volumeOrder","Array","keys","sort","a","b","volumesToRender","chunkSize","rayCastPass","setWebGPURenderer","_useSmallViewport","width","getTexture","getWidth","height","getHeight","setArray","_smallViewportWidth","_smallViewportHeight","sendIfNeeded","setColorTextureView","colorTextureView","attachTextureViews","begin","getCommandEncoder","scissorAndViewport","prepareAndDraw","end","delete","chain","_animationRateSubscription","unsubscribe","rwi","getInteractor","isAnimating","_lastScale","Math","ceil","getCanvas","sqrt","_colorTexture","resize","onAnimationFrameRateUpdate","firstMapper","getMapper","getAutoAdjustSampleDistances","frate","getRecentAnimationFrameRate","targetScale","getDesiredUpdateRate","getImageSampleDistance","encoder","setViewport","setScissorRect","setVolumes","updateDepthPolyData","pd","_boundsPoly","points","getPoints","cells","getPolys","buffRequest","hash","getMTime","usage","Index","numberOfPoints","getNumberOfPoints","primitiveType","Triangles","representation","SURFACE","indexBuffer","getBufferManager","getBuffer","_mapper","getVertexInput","setIndexBuffer","PointArray","format","dataArray","packExtra","buff","addBuffer","setNumberOfVertices","getSizeInBytes","getStrideInBytes","drawDepthRange","update","i","mtime","_lastMTimes","stime","getStabilizedTime","center","getStabilizedCenterByReference","numPts","Float64Array","numTris","polys","Uint16Array","getBoundingCubePoints","cellIdx","offset","t","p","setData","modified","_depthRangeTexture","resizeToMatch","_depthRangeTexture2","setCurrentOperation","setRenderEncoder","volumeDepthRangePass","prepareToDraw","registerDrawCallback","setReplaceShaderCodeFunction","pipeline","fDesc","getShaderDescription","addOutput","code","getCode","substitute","result","setCode","setDescription","colorAttachments","view","clearValue","loadOp","storeOp","setPipelineSettings","primitive","cullMode","fragment","targets","blend","color","srcFactor","dstFactor","operation","alpha","srcfactor","create","GPUTextureUsage","RENDER_ATTACHMENT","TEXTURE_BINDING","maxView","createView","minView","depthTextureView","COPY_SRC","addSampler","minFilter","magFilter","val","DEFAULT_VALUES","extend","initialValues","Object","assign","getShaderReplacements","set","vertexInput","addBuiltinInput","setGet"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/WebGPU/VolumePass/index.js"],"sourcesContent":["import macro from 'vtk.js/Sources/macros';\nimport vtkPolyData from 'vtk.js/Sources/Common/DataModel/PolyData';\nimport vtkProperty from 'vtk.js/Sources/Rendering/Core/Property';\nimport vtkRenderPass from 'vtk.js/Sources/Rendering/SceneGraph/RenderPass';\nimport vtkWebGPUBufferManager from 'vtk.js/Sources/Rendering/WebGPU/BufferManager';\nimport vtkWebGPUSimpleMapper from 'vtk.js/Sources/Rendering/WebGPU/SimpleMapper';\nimport vtkWebGPURenderEncoder from 'vtk.js/Sources/Rendering/WebGPU/RenderEncoder';\nimport vtkWebGPUShaderCache from 'vtk.js/Sources/Rendering/WebGPU/ShaderCache';\nimport vtkWebGPUTexture from 'vtk.js/Sources/Rendering/WebGPU/Texture';\nimport vtkWebGPUUniformBuffer from 'vtk.js/Sources/Rendering/WebGPU/UniformBuffer';\nimport vtkWebGPUFullScreenQuad from 'vtk.js/Sources/Rendering/WebGPU/FullScreenQuad';\nimport vtkWebGPUVolumePassFSQ from 'vtk.js/Sources/Rendering/WebGPU/VolumePassFSQ';\nimport * as vtkMath from 'vtk.js/Sources/Common/Core/Math';\n\nconst { Representation } = vtkProperty;\nconst { BufferUsage, PrimitiveTypes } = vtkWebGPUBufferManager;\n\n// The volume rendering pass consists of two sub passes. The first\n// (depthRange) renders polygonal cubes for the volumes to compute min and\n// max bounds in depth for the image. This is then fed into the second pass\n// (final) which actually does the raycasting between those bounds sampling\n// the volumes along the way. So the first pass tends to be very fast whicle\n// the second is where most of the work is done.\n\n// given x then y then z ordering\n//\n//     2-----3\n//   / |   / |\n//  6-----7  |\n//  |  |  |  |\n//  |  0-----1\n//  |/    |/\n//  4-----5\n//\nconst cubeFaceTriangles = [\n  [0, 4, 6],\n  [0, 6, 2],\n  [1, 3, 7],\n  [1, 7, 5],\n  [0, 5, 4],\n  [0, 1, 5],\n  [2, 6, 7],\n  [2, 7, 3],\n  [0, 3, 1],\n  [0, 2, 3],\n  [4, 5, 7],\n  [4, 7, 6],\n];\n\nconst DepthBoundsFS = `\n//VTK::Renderer::Dec\n\n//VTK::Select::Dec\n\n//VTK::VolumePass::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output : fragmentOutput;\n\n  //VTK::Select::Impl\n\n  //VTK::TCoord::Impl\n\n  //VTK::VolumePass::Impl\n\n  // use the maximum (closest) of the current value and the zbuffer\n  // the blend func will then take the min to find the farthest stop value\n  var stopval: f32 = max(input.fragPos.z, textureLoad(opaquePassDepthTexture, vec2<i32>(i32(input.fragPos.x), i32(input.fragPos.y)), 0));\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n`;\n\nconst volumeCopyFragTemplate = `\n//VTK::Renderer::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output: fragmentOutput;\n\n  var computedColor: vec4<f32> = textureSample(volumePassColorTexture,\n    volumePassColorTextureSampler, mapperUBO.tscale*input.tcoordVS);\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n`;\n\n/* eslint-disable no-undef */\n/* eslint-disable no-bitwise */\n\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUVolumePass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUVolumePass');\n\n  // create the required textures, encoders, FSQ etc\n  publicAPI.initialize = (viewNode) => {\n    if (!model._clearEncoder) {\n      publicAPI.createClearEncoder(viewNode);\n    }\n\n    if (!model._mergeEncoder) {\n      publicAPI.createMergeEncoder(viewNode);\n    }\n\n    if (!model._copyEncoder) {\n      publicAPI.createCopyEncoder(viewNode);\n    }\n\n    if (!model._depthRangeEncoder) {\n      publicAPI.createDepthRangeEncoder(viewNode);\n    }\n\n    if (!model.fullScreenQuad) {\n      model.fullScreenQuad = vtkWebGPUVolumePassFSQ.newInstance();\n      model.fullScreenQuad.setDevice(viewNode.getDevice());\n      model.fullScreenQuad.setTextureViews([\n        ...model._depthRangeEncoder.getColorTextureViews(),\n      ]);\n    }\n\n    if (!model._volumeCopyQuad) {\n      model._volumeCopyQuad = vtkWebGPUFullScreenQuad.newInstance();\n      model._volumeCopyQuad.setPipelineHash('volpassfsq');\n      model._volumeCopyQuad.setDevice(viewNode.getDevice());\n      model._volumeCopyQuad.setFragmentShaderTemplate(volumeCopyFragTemplate);\n      model._copyUBO = vtkWebGPUUniformBuffer.newInstance({\n        label: 'mapperUBO',\n      });\n      model._copyUBO.addEntry('tscale', 'vec2<f32>');\n      model._volumeCopyQuad.setUBO(model._copyUBO);\n      model._volumeCopyQuad.setTextureViews([model._colorTextureView]);\n    }\n  };\n\n  publicAPI.traverse = (renNode, viewNode) => {\n    if (model.deleted) {\n      return;\n    }\n\n    // we just render our delegates in order\n    model.currentParent = viewNode;\n\n    // create stuff we need\n    publicAPI.initialize(viewNode);\n\n    // determine if we are rendering a small size\n    publicAPI.computeTiming(viewNode);\n\n    // first render the boxes to generate a min max depth\n    // map for all the volumes\n    publicAPI.renderDepthBounds(renNode, viewNode);\n\n    // always mark true\n    model._firstGroup = true;\n\n    const device = viewNode.getDevice();\n\n    // determine how many volumes we can render at a time. We subtract\n    // 4 because we use know we use textures for min, max, ofun and tfun\n    const maxVolumes =\n      device.getHandle().limits.maxSampledTexturesPerShaderStage - 4;\n\n    // if we have to make multiple passes then break the volumes up into groups\n    // rendered from farthest to closest\n    if (model.volumes.length > maxVolumes) {\n      const cameraPos = renNode.getRenderable().getActiveCamera().getPosition();\n      // sort from back to front based on volume centroid\n      const distances = [];\n      for (let v = 0; v < model.volumes.length; v++) {\n        const bounds = model.volumes[v].getRenderable().getBounds();\n        const centroid = [\n          0.5 * (bounds[1] + bounds[0]),\n          0.5 * (bounds[3] + bounds[2]),\n          0.5 * (bounds[5] + bounds[4]),\n        ];\n        distances[v] = vtkMath.distance2BetweenPoints(centroid, cameraPos);\n      }\n\n      // sort by distance\n      const volumeOrder = [...Array(model.volumes.length).keys()];\n      volumeOrder.sort((a, b) => distances[b] - distances[a]);\n\n      // render in chunks back to front\n      let volumesToRender = [];\n      // start with smallest chunk so that the last (closest) chunk\n      // has a full maxVolumes;\n      let chunkSize = volumeOrder.length % maxVolumes;\n      for (let v = 0; v < volumeOrder.length; v++) {\n        volumesToRender.push(model.volumes[volumeOrder[v]]);\n        if (volumesToRender.length >= chunkSize) {\n          publicAPI.rayCastPass(viewNode, renNode, volumesToRender);\n          volumesToRender = [];\n          chunkSize = maxVolumes;\n          model._firstGroup = false;\n        }\n      }\n    } else {\n      // if not rendering in chunks then just draw all of them at once\n      publicAPI.rayCastPass(viewNode, renNode, model.volumes);\n    }\n\n    // copy back to the original color buffer\n\n    // final composite\n    model._volumeCopyQuad.setWebGPURenderer(renNode);\n    if (model._useSmallViewport) {\n      const width = model._colorTextureView.getTexture().getWidth();\n      const height = model._colorTextureView.getTexture().getHeight();\n      model._copyUBO.setArray('tscale', [\n        model._smallViewportWidth / width,\n        model._smallViewportHeight / height,\n      ]);\n    } else {\n      model._copyUBO.setArray('tscale', [1.0, 1.0]);\n    }\n    model._copyUBO.sendIfNeeded(device);\n\n    model._copyEncoder.setColorTextureView(0, model.colorTextureView);\n    model._copyEncoder.attachTextureViews();\n\n    model._copyEncoder.begin(viewNode.getCommandEncoder());\n    renNode.scissorAndViewport(model._copyEncoder);\n    model._volumeCopyQuad.prepareAndDraw(model._copyEncoder);\n    model._copyEncoder.end();\n  };\n\n  // unsubscribe from our listeners\n  publicAPI.delete = macro.chain(() => {\n    if (model._animationRateSubscription) {\n      model._animationRateSubscription.unsubscribe();\n      model._animationRateSubscription = null;\n    }\n  }, publicAPI.delete);\n\n  publicAPI.computeTiming = (viewNode) => {\n    model._useSmallViewport = false;\n    const rwi = viewNode.getRenderable().getInteractor();\n\n    if (rwi.isAnimating() && model._lastScale > 1.5) {\n      if (!model._smallViewportHeight) {\n        model._smallViewportWidth = Math.ceil(\n          viewNode.getCanvas().width / Math.sqrt(model._lastScale)\n        );\n        model._smallViewportHeight = Math.ceil(\n          viewNode.getCanvas().height / Math.sqrt(model._lastScale)\n        );\n      }\n      model._useSmallViewport = true;\n    }\n\n    model._colorTexture.resize(\n      viewNode.getCanvas().width,\n      viewNode.getCanvas().height\n    );\n\n    if (!model._animationRateSubscription) {\n      // when the animation frame rate changes recompute the scale factor\n      model._animationRateSubscription = rwi.onAnimationFrameRateUpdate(() => {\n        const firstMapper = model.volumes[0].getRenderable().getMapper();\n        if (firstMapper.getAutoAdjustSampleDistances()) {\n          const frate = rwi.getRecentAnimationFrameRate();\n          const targetScale =\n            (model._lastScale * rwi.getDesiredUpdateRate()) / frate;\n\n          model._lastScale = targetScale;\n          // clamp scale to some reasonable values.\n          // Below 1.5 we will just be using full resolution as that is close enough\n          // Above 400 seems like a lot so we limit to that 1/20th per axis\n          if (model._lastScale > 400) {\n            model._lastScale = 400;\n          }\n        } else {\n          model._lastScale =\n            firstMapper.getImageSampleDistance() *\n            firstMapper.getImageSampleDistance();\n        }\n        if (model._lastScale < 1.5) {\n          model._lastScale = 1.5;\n        } else {\n          model._smallViewportWidth = Math.ceil(\n            viewNode.getCanvas().width / Math.sqrt(model._lastScale)\n          );\n          model._smallViewportHeight = Math.ceil(\n            viewNode.getCanvas().height / Math.sqrt(model._lastScale)\n          );\n        }\n      });\n    }\n  };\n\n  publicAPI.rayCastPass = (viewNode, renNode, volumes) => {\n    const encoder = model._firstGroup\n      ? model._clearEncoder\n      : model._mergeEncoder;\n    encoder.attachTextureViews();\n    encoder.begin(viewNode.getCommandEncoder());\n    let width = model._colorTextureView.getTexture().getWidth();\n    let height = model._colorTextureView.getTexture().getHeight();\n    if (model._useSmallViewport) {\n      width = model._smallViewportWidth;\n      height = model._smallViewportHeight;\n    }\n    encoder.getHandle().setViewport(0, 0, width, height, 0.0, 1.0);\n    // set scissor\n    encoder.getHandle().setScissorRect(0, 0, width, height);\n\n    model.fullScreenQuad.setWebGPURenderer(renNode);\n    model.fullScreenQuad.setVolumes(volumes);\n    model.fullScreenQuad.prepareAndDraw(encoder);\n    encoder.end();\n  };\n\n  publicAPI.renderDepthBounds = (renNode, viewNode) => {\n    publicAPI.updateDepthPolyData(renNode);\n\n    const pd = model._boundsPoly;\n    const points = pd.getPoints();\n    const cells = pd.getPolys();\n\n    let buffRequest = {\n      hash: `vp${cells.getMTime()}`,\n      usage: BufferUsage.Index,\n      cells,\n      numberOfPoints: points.getNumberOfPoints(),\n      primitiveType: PrimitiveTypes.Triangles,\n      representation: Representation.SURFACE,\n    };\n    const indexBuffer = viewNode\n      .getDevice()\n      .getBufferManager()\n      .getBuffer(buffRequest);\n    model._mapper.getVertexInput().setIndexBuffer(indexBuffer);\n\n    // points\n    buffRequest = {\n      usage: BufferUsage.PointArray,\n      format: 'float32x4',\n      hash: `vp${points.getMTime()}${cells.getMTime()}`,\n      dataArray: points,\n      indexBuffer,\n      packExtra: true,\n    };\n    const buff = viewNode.getDevice().getBufferManager().getBuffer(buffRequest);\n    model._mapper.getVertexInput().addBuffer(buff, ['vertexBC']);\n    model._mapper.setNumberOfVertices(\n      buff.getSizeInBytes() / buff.getStrideInBytes()\n    );\n\n    publicAPI.drawDepthRange(renNode, viewNode);\n  };\n\n  publicAPI.updateDepthPolyData = (renNode) => {\n    // check mtimes first\n    let update = false;\n    for (let i = 0; i < model.volumes.length; i++) {\n      const mtime = model.volumes[i].getMTime();\n      if (!model._lastMTimes[i] || mtime !== model._lastMTimes[i]) {\n        update = true;\n        model._lastMTimes[i] = mtime;\n      }\n    }\n\n    // also check stabilized time\n    const stime = renNode.getStabilizedTime();\n    if (\n      model._lastMTimes.length <= model.volumes.length ||\n      stime !== model._lastMTimes[model.volumes.length]\n    ) {\n      update = true;\n      model._lastMTimes[model.volumes.length] = stime;\n    }\n\n    // if no need to update then return\n    if (!update) {\n      return;\n    }\n\n    // rebuild\n    const center = renNode.getStabilizedCenterByReference();\n    const numPts = model.volumes.length * 8;\n    const points = new Float64Array(numPts * 3);\n    const numTris = model.volumes.length * 12;\n    const polys = new Uint16Array(numTris * 4);\n\n    // add points and cells\n    for (let i = 0; i < model.volumes.length; i++) {\n      model.volumes[i].getBoundingCubePoints(points, i * 24);\n      let cellIdx = i * 12 * 4;\n      const offset = i * 8;\n      for (let t = 0; t < 12; t++) {\n        polys[cellIdx++] = 3;\n        polys[cellIdx++] = offset + cubeFaceTriangles[t][0];\n        polys[cellIdx++] = offset + cubeFaceTriangles[t][1];\n        polys[cellIdx++] = offset + cubeFaceTriangles[t][2];\n      }\n    }\n\n    for (let p = 0; p < points.length; p += 3) {\n      points[p] -= center[0];\n      points[p + 1] -= center[1];\n      points[p + 2] -= center[2];\n    }\n\n    model._boundsPoly.getPoints().setData(points, 3);\n    model._boundsPoly.getPoints().modified();\n    model._boundsPoly.getPolys().setData(polys, 1);\n    model._boundsPoly.getPolys().modified();\n    model._boundsPoly.modified();\n  };\n\n  publicAPI.drawDepthRange = (renNode, viewNode) => {\n    // copy current depth buffer to\n    model._depthRangeTexture.resizeToMatch(model.colorTextureView.getTexture());\n    model._depthRangeTexture2.resizeToMatch(\n      model.colorTextureView.getTexture()\n    );\n\n    model._depthRangeEncoder.attachTextureViews();\n\n    publicAPI.setCurrentOperation('volumeDepthRangePass');\n    renNode.setRenderEncoder(model._depthRangeEncoder);\n    renNode.volumeDepthRangePass(true);\n    model._mapper.setWebGPURenderer(renNode);\n\n    model._mapper.prepareToDraw(model._depthRangeEncoder);\n    model._mapper.registerDrawCallback(model._depthRangeEncoder);\n\n    renNode.volumeDepthRangePass(false);\n  };\n\n  publicAPI.createDepthRangeEncoder = (viewNode) => {\n    const device = viewNode.getDevice();\n    model._depthRangeEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'VolumePass DepthRange',\n    });\n    model._depthRangeEncoder.setPipelineHash('volr');\n    model._depthRangeEncoder.setReplaceShaderCodeFunction((pipeline) => {\n      const fDesc = pipeline.getShaderDescription('fragment');\n      fDesc.addOutput('vec4<f32>', 'outColor1');\n      fDesc.addOutput('vec4<f32>', 'outColor2');\n      let code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(\n        code,\n        '//VTK::RenderEncoder::Impl',\n        [\n          'output.outColor1 = vec4<f32>(input.fragPos.z, 0.0, 0.0, 0.0);',\n          'output.outColor2 = vec4<f32>(stopval, 0.0, 0.0, 0.0);',\n        ]\n      ).result;\n      fDesc.setCode(code);\n    });\n    model._depthRangeEncoder.setDescription({\n      colorAttachments: [\n        {\n          view: null,\n          clearValue: [0.0, 0.0, 0.0, 0.0],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n        {\n          view: null,\n          clearValue: [1.0, 1.0, 1.0, 1.0],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    model._depthRangeEncoder.setPipelineSettings({\n      primitive: { cullMode: 'none' },\n      fragment: {\n        targets: [\n          {\n            format: 'r16float',\n            blend: {\n              color: {\n                srcFactor: 'one',\n                dstFactor: 'one',\n                operation: 'max',\n              },\n              alpha: { srcfactor: 'one', dstFactor: 'one', operation: 'max' },\n            },\n          },\n          {\n            format: 'r16float',\n            blend: {\n              color: {\n                srcFactor: 'one',\n                dstFactor: 'one',\n                operation: 'min',\n              },\n              alpha: { srcfactor: 'one', dstFactor: 'one', operation: 'min' },\n            },\n          },\n        ],\n      },\n    });\n\n    // and the textures it needs\n    model._depthRangeTexture = vtkWebGPUTexture.newInstance({\n      label: 'volumePassMaxDepth',\n    });\n    model._depthRangeTexture.create(device, {\n      width: viewNode.getCanvas().width,\n      height: viewNode.getCanvas().height,\n      format: 'r16float',\n      usage:\n        GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,\n    });\n    const maxView = model._depthRangeTexture.createView('maxTexture');\n    model._depthRangeEncoder.setColorTextureView(0, maxView);\n    model._depthRangeTexture2 = vtkWebGPUTexture.newInstance({\n      label: 'volumePassDepthMin',\n    });\n    model._depthRangeTexture2.create(device, {\n      width: viewNode.getCanvas().width,\n      height: viewNode.getCanvas().height,\n      format: 'r16float',\n      usage:\n        GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,\n    });\n    const minView = model._depthRangeTexture2.createView('minTexture');\n    model._depthRangeEncoder.setColorTextureView(1, minView);\n    model._mapper.setDevice(viewNode.getDevice());\n    model._mapper.setTextureViews([model.depthTextureView]);\n  };\n\n  publicAPI.createClearEncoder = (viewNode) => {\n    model._colorTexture = vtkWebGPUTexture.newInstance({\n      label: 'volumePassColor',\n    });\n    model._colorTexture.create(viewNode.getDevice(), {\n      width: viewNode.getCanvas().width,\n      height: viewNode.getCanvas().height,\n      format: 'bgra8unorm',\n      /* eslint-disable no-undef */\n      /* eslint-disable no-bitwise */\n      usage:\n        GPUTextureUsage.RENDER_ATTACHMENT |\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.COPY_SRC,\n    });\n    model._colorTextureView = model._colorTexture.createView(\n      'volumePassColorTexture'\n    );\n    model._colorTextureView.addSampler(viewNode.getDevice(), {\n      minFilter: 'linear',\n      magFilter: 'linear',\n    });\n\n    model._clearEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'VolumePass Clear',\n    });\n    model._clearEncoder.setColorTextureView(0, model._colorTextureView);\n    model._clearEncoder.setDescription({\n      colorAttachments: [\n        {\n          view: null,\n          clearValue: [0.0, 0.0, 0.0, 0.0],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    model._clearEncoder.setPipelineHash('volpf');\n    model._clearEncoder.setPipelineSettings({\n      primitive: { cullMode: 'none' },\n      fragment: {\n        targets: [\n          {\n            format: 'bgra8unorm',\n            blend: {\n              color: {\n                srcFactor: 'src-alpha',\n                dstFactor: 'one-minus-src-alpha',\n              },\n              alpha: { srcfactor: 'one', dstFactor: 'one-minus-src-alpha' },\n            },\n          },\n        ],\n      },\n    });\n  };\n\n  publicAPI.createCopyEncoder = (viewNode) => {\n    model._copyEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'volumePassCopy',\n    });\n    model._copyEncoder.setDescription({\n      colorAttachments: [\n        {\n          view: null,\n          loadOp: 'load',\n          storeOp: 'store',\n        },\n      ],\n    });\n    model._copyEncoder.setPipelineHash('volcopypf');\n    model._copyEncoder.setPipelineSettings({\n      primitive: { cullMode: 'none' },\n      fragment: {\n        targets: [\n          {\n            format: 'rgba16float',\n            blend: {\n              color: {\n                srcFactor: 'one',\n                dstFactor: 'one-minus-src-alpha',\n              },\n              alpha: { srcfactor: 'one', dstFactor: 'one-minus-src-alpha' },\n            },\n          },\n        ],\n      },\n    });\n  };\n\n  publicAPI.createMergeEncoder = (viewNode) => {\n    model._mergeEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'volumePassMerge',\n    });\n    model._mergeEncoder.setColorTextureView(0, model._colorTextureView);\n    model._mergeEncoder.setDescription({\n      colorAttachments: [\n        {\n          view: null,\n          loadOp: 'load',\n          storeOp: 'store',\n        },\n      ],\n    });\n    model._mergeEncoder.setReplaceShaderCodeFunction((pipeline) => {\n      const fDesc = pipeline.getShaderDescription('fragment');\n      fDesc.addOutput('vec4<f32>', 'outColor');\n      let code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(\n        code,\n        '//VTK::RenderEncoder::Impl',\n        ['output.outColor = vec4<f32>(computedColor.rgb, computedColor.a);']\n      ).result;\n      fDesc.setCode(code);\n    });\n    model._mergeEncoder.setPipelineHash('volpf');\n    model._mergeEncoder.setPipelineSettings({\n      primitive: { cullMode: 'none' },\n      fragment: {\n        targets: [\n          {\n            format: 'bgra8unorm',\n            blend: {\n              color: {\n                srcFactor: 'src-alpha',\n                dstFactor: 'one-minus-src-alpha',\n              },\n              alpha: { srcfactor: 'one', dstFactor: 'one-minus-src-alpha' },\n            },\n          },\n        ],\n      },\n    });\n  };\n\n  // marks modified when needed\n  publicAPI.setVolumes = (val) => {\n    if (!model.volumes || model.volumes.length !== val.length) {\n      model.volumes = [...val];\n      publicAPI.modified();\n      return;\n    }\n    for (let i = 0; i < val.length; i++) {\n      if (val[i] !== model.volumes[i]) {\n        model.volumes = [...val];\n        publicAPI.modified();\n        return;\n      }\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  colorTextureView: null,\n  depthTextureView: null,\n  volumes: null,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n\n  model._lastScale = 2.0;\n  model._mapper = vtkWebGPUSimpleMapper.newInstance();\n  model._mapper.setFragmentShaderTemplate(DepthBoundsFS);\n  model._mapper\n    .getShaderReplacements()\n    .set('replaceShaderVolumePass', (hash, pipeline, vertexInput) => {\n      const fDesc = pipeline.getShaderDescription('fragment');\n      fDesc.addBuiltinInput('vec4<f32>', '@builtin(position) fragPos');\n    });\n\n  model._boundsPoly = vtkPolyData.newInstance();\n  model._lastMTimes = [];\n\n  macro.setGet(publicAPI, model, ['colorTextureView', 'depthTextureView']);\n\n  // Object methods\n  vtkWebGPUVolumePass(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkWebGPUVolumePass');\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}