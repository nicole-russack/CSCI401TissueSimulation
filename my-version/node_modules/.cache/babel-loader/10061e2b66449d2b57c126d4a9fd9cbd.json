{"ast":null,"code":"import macro from 'vtk.js/Sources/macros';\nimport vtkDataSet from 'vtk.js/Sources/Common/DataModel/DataSet';\nconst {\n  FieldAssociations\n} = vtkDataSet; // ----------------------------------------------------------------------------\n// vtkHardwareSelector methods\n// ----------------------------------------------------------------------------\n\nfunction vtkHardwareSelector(publicAPI, model) {\n  model.classHierarchy.push('vtkHardwareSelector'); // get the source data that is used for generating a selection. This\n  // must be called at least once before calling generateSelection. In\n  // raster based backends this method will capture the buffers. You can\n  // call this once and then make multiple calls to generateSelection.\n\n  publicAPI.getSourceDataAsync = async (renderer, fx1, fy1, fx2, fy2) => {};\n\n  publicAPI.selectAsync = async (renderer, fx1, fy1, fx2, fy2) => {\n    const srcData = await publicAPI.getSourceDataAsync(renderer, fx1, fy1, fx2, fy2);\n\n    if (srcData) {\n      return srcData.generateSelection(fx1, fy1, fx2, fy2);\n    }\n\n    return [];\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  fieldAssociation: FieldAssociations.FIELD_ASSOCIATION_CELLS,\n  captureZValues: false\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['fieldAssociation', 'captureZValues']); // Object methods\n\n  vtkHardwareSelector(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkHardwareSelector'); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend\n};","map":{"version":3,"names":["macro","vtkDataSet","FieldAssociations","vtkHardwareSelector","publicAPI","model","classHierarchy","push","getSourceDataAsync","renderer","fx1","fy1","fx2","fy2","selectAsync","srcData","generateSelection","DEFAULT_VALUES","fieldAssociation","FIELD_ASSOCIATION_CELLS","captureZValues","extend","initialValues","Object","assign","obj","setGet","newInstance"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/Core/HardwareSelector/index.js"],"sourcesContent":["import macro from 'vtk.js/Sources/macros';\nimport vtkDataSet from 'vtk.js/Sources/Common/DataModel/DataSet';\n\nconst { FieldAssociations } = vtkDataSet;\n\n// ----------------------------------------------------------------------------\n// vtkHardwareSelector methods\n// ----------------------------------------------------------------------------\n\nfunction vtkHardwareSelector(publicAPI, model) {\n  model.classHierarchy.push('vtkHardwareSelector');\n\n  // get the source data that is used for generating a selection. This\n  // must be called at least once before calling generateSelection. In\n  // raster based backends this method will capture the buffers. You can\n  // call this once and then make multiple calls to generateSelection.\n  publicAPI.getSourceDataAsync = async (renderer, fx1, fy1, fx2, fy2) => {};\n\n  publicAPI.selectAsync = async (renderer, fx1, fy1, fx2, fy2) => {\n    const srcData = await publicAPI.getSourceDataAsync(\n      renderer,\n      fx1,\n      fy1,\n      fx2,\n      fy2\n    );\n    if (srcData) {\n      return srcData.generateSelection(fx1, fy1, fx2, fy2);\n    }\n    return [];\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  fieldAssociation: FieldAssociations.FIELD_ASSOCIATION_CELLS,\n  captureZValues: false,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  macro.obj(publicAPI, model);\n\n  macro.setGet(publicAPI, model, ['fieldAssociation', 'captureZValues']);\n\n  // Object methods\n  vtkHardwareSelector(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkHardwareSelector');\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend };\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,uBAAlB;AACA,OAAOC,UAAP,MAAuB,yCAAvB;AAEA,MAAM;EAAEC;AAAF,IAAwBD,UAA9B,C,CAEA;AACA;AACA;;AAEA,SAASE,mBAAT,CAA6BC,SAA7B,EAAwCC,KAAxC,EAA+C;EAC7CA,KAAK,CAACC,cAAN,CAAqBC,IAArB,CAA0B,qBAA1B,EAD6C,CAG7C;EACA;EACA;EACA;;EACAH,SAAS,CAACI,kBAAV,GAA+B,OAAOC,QAAP,EAAiBC,GAAjB,EAAsBC,GAAtB,EAA2BC,GAA3B,EAAgCC,GAAhC,KAAwC,CAAE,CAAzE;;EAEAT,SAAS,CAACU,WAAV,GAAwB,OAAOL,QAAP,EAAiBC,GAAjB,EAAsBC,GAAtB,EAA2BC,GAA3B,EAAgCC,GAAhC,KAAwC;IAC9D,MAAME,OAAO,GAAG,MAAMX,SAAS,CAACI,kBAAV,CACpBC,QADoB,EAEpBC,GAFoB,EAGpBC,GAHoB,EAIpBC,GAJoB,EAKpBC,GALoB,CAAtB;;IAOA,IAAIE,OAAJ,EAAa;MACX,OAAOA,OAAO,CAACC,iBAAR,CAA0BN,GAA1B,EAA+BC,GAA/B,EAAoCC,GAApC,EAAyCC,GAAzC,CAAP;IACD;;IACD,OAAO,EAAP;EACD,CAZD;AAaD,C,CAED;AACA;AACA;;;AAEA,MAAMI,cAAc,GAAG;EACrBC,gBAAgB,EAAEhB,iBAAiB,CAACiB,uBADf;EAErBC,cAAc,EAAE;AAFK,CAAvB,C,CAKA;;AAEA,OAAO,SAASC,MAAT,CAAgBjB,SAAhB,EAA2BC,KAA3B,EAAsD;EAAA,IAApBiB,aAAoB,uEAAJ,EAAI;EAC3DC,MAAM,CAACC,MAAP,CAAcnB,KAAd,EAAqBY,cAArB,EAAqCK,aAArC,EAD2D,CAG3D;;EACAtB,KAAK,CAACyB,GAAN,CAAUrB,SAAV,EAAqBC,KAArB;EAEAL,KAAK,CAAC0B,MAAN,CAAatB,SAAb,EAAwBC,KAAxB,EAA+B,CAAC,kBAAD,EAAqB,gBAArB,CAA/B,EAN2D,CAQ3D;;EACAF,mBAAmB,CAACC,SAAD,EAAYC,KAAZ,CAAnB;AACD,C,CAED;;AAEA,OAAO,MAAMsB,WAAW,GAAG3B,KAAK,CAAC2B,WAAN,CAAkBN,MAAlB,EAA0B,qBAA1B,CAApB,C,CAEP;;AAEA,eAAe;EAAEM,WAAF;EAAeN;AAAf,CAAf"},"metadata":{},"sourceType":"module"}