{"ast":null,"code":"import { mat4, vec4 } from 'gl-matrix';\nimport Constants from 'vtk.js/Sources/Rendering/Core/ImageMapper/Constants';\nimport * as macro from 'vtk.js/Sources/macros'; // import vtkDataArray from 'vtk.js/Sources/Common/Core/DataArray';\n// import { VtkDataTypes } from 'vtk.js/Sources/Common/Core/DataArray/Constants';\n// import * as vtkMath from 'vtk.js/Sources/Common/Core/Math';\n\nimport vtkWebGPUShaderCache from 'vtk.js/Sources/Rendering/WebGPU/ShaderCache';\nimport vtkWebGPUFullScreenQuad from 'vtk.js/Sources/Rendering/WebGPU/FullScreenQuad';\nimport vtkWebGPUUniformBuffer from 'vtk.js/Sources/Rendering/WebGPU/UniformBuffer';\nimport vtkWebGPUSampler from 'vtk.js/Sources/Rendering/WebGPU/Sampler'; // import vtkWebGPUTypes from 'vtk.js/Sources/Rendering/WebGPU/Types';\n// import { Representation } from 'vtk.js/Sources/Rendering/Core/Property/Constants';\n\nimport { InterpolationType } from 'vtk.js/Sources/Rendering/Core/ImageProperty/Constants';\nimport { registerOverride } from 'vtk.js/Sources/Rendering/WebGPU/ViewNodeFactory'; // const { vtkErrorMacro } = macro;\n\nconst {\n  SlicingMode\n} = Constants;\nconst imgFragTemplate = `\n//VTK::Renderer::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::Image::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output: fragmentOutput;\n\n  //VTK::Image::Sample\n\n  // var computedColor: vec4<f32> = vec4<f32>(1.0,0.7, 0.5, 1.0);\n\n//VTK::RenderEncoder::Impl\n\n  return output;\n}\n`; // ----------------------------------------------------------------------------\n// helper methods\n// ----------------------------------------------------------------------------\n\nfunction computeFnToString(property, fn, numberOfComponents) {\n  const pwfun = fn.apply(property);\n\n  if (pwfun) {\n    const iComps = property.getIndependentComponents();\n    return `${property.getMTime()}-${iComps}-${numberOfComponents}`;\n  }\n\n  return '0';\n} // ----------------------------------------------------------------------------\n// vtkWebGPUImageMapper methods\n// ----------------------------------------------------------------------------\n\n\nconst tmpMat4 = new Float64Array(16);\nconst tmp2Mat4 = new Float64Array(16);\nconst tmp3Mat4 = new Float64Array(16);\nconst ptsArray1 = new Float64Array(4);\nconst ptsArray2 = new Float64Array(4);\n\nfunction vtkWebGPUImageMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUImageMapper');\n\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      model.WebGPUImageSlice = publicAPI.getFirstAncestorOfType('vtkWebGPUImageSlice');\n      model.WebGPURenderer = model.WebGPUImageSlice.getFirstAncestorOfType('vtkWebGPURenderer');\n      model.WebGPURenderWindow = model.WebGPURenderer.getParent();\n      model.device = model.WebGPURenderWindow.getDevice();\n      const ren = model.WebGPURenderer.getRenderable(); // is slice set by the camera\n\n      if (model.renderable.getSliceAtFocalPoint()) {\n        model.renderable.setSliceFromCamera(ren.getActiveCamera());\n      }\n    }\n  }; // Renders myself\n\n\n  publicAPI.translucentPass = prepass => {\n    if (prepass) {\n      publicAPI.render();\n    }\n  };\n\n  publicAPI.opaquePass = prepass => {\n    if (prepass) {\n      publicAPI.render();\n    }\n  };\n\n  publicAPI.render = () => {\n    model.renderable.update();\n    model.currentInput = model.renderable.getInputData();\n    publicAPI.prepareToDraw(model.WebGPURenderer.getRenderEncoder());\n    model.renderEncoder.registerDrawCallback(model.pipeline, publicAPI.draw);\n  };\n\n  publicAPI.computePipelineHash = () => {\n    const ext = model.currentInput.getExtent();\n\n    if (ext[0] === ext[1] || ext[2] === ext[3] || ext[4] === ext[5]) {\n      model.dimensions = 2;\n      model.pipelineHash = 'img2';\n    } else {\n      model.dimensions = 3;\n      model.pipelineHash = 'img3';\n    }\n  };\n\n  publicAPI.updateUBO = () => {\n    const utime = model.UBO.getSendTime();\n    const actor = model.WebGPUImageSlice.getRenderable();\n    const volMapr = actor.getMapper();\n\n    if (publicAPI.getMTime() > utime || model.renderable.getMTime() > utime || actor.getProperty().getMTime() > utime) {\n      // compute the SCTCMatrix\n      const image = volMapr.getInputData();\n      const center = model.WebGPURenderer.getStabilizedCenterByReference();\n      mat4.identity(tmpMat4);\n      mat4.translate(tmpMat4, tmpMat4, center); // tmpMat4 is now SC->World\n\n      const mcwcmat = actor.getMatrix();\n      mat4.transpose(tmp2Mat4, mcwcmat);\n      mat4.invert(tmp2Mat4, tmp2Mat4); // tmp2Mat4 is now world to model\n\n      mat4.multiply(tmpMat4, tmp2Mat4, tmpMat4); // tmp4Mat is now SC->Model\n      // the method on the data is world to index but the volume is in\n      // model coordinates so really in this context it is model to index\n\n      const modelToIndex = image.getWorldToIndex();\n      mat4.multiply(tmpMat4, modelToIndex, tmpMat4); // tmpMat4 is now SC -> Index, save this as we need it later\n\n      mat4.invert(tmp3Mat4, tmpMat4); // need translation and scale\n\n      mat4.fromTranslation(tmp2Mat4, [0.5, 0.5, 0.5]);\n      mat4.multiply(tmpMat4, tmp2Mat4, tmpMat4);\n      const dims = image.getDimensions();\n      mat4.identity(tmp2Mat4);\n      mat4.scale(tmp2Mat4, tmp2Mat4, [1.0 / dims[0], 1.0 / dims[1], 1.0 / dims[2]]);\n      mat4.multiply(tmpMat4, tmp2Mat4, tmpMat4); // tmpMat4 is now SC -> Tcoord\n\n      model.UBO.setArray('SCTCMatrix', tmpMat4); // need to compute the plane here in world coordinates\n      // then pass that down in the UBO\n\n      const ext = model.currentInput.getExtent(); // Find what IJK axis and what direction to slice along\n\n      const {\n        ijkMode\n      } = model.renderable.getClosestIJKAxis(); // Find the IJK slice\n\n      let nSlice = model.renderable.getSlice();\n\n      if (ijkMode !== model.renderable.getSlicingMode()) {\n        // If not IJK slicing, get the IJK slice from the XYZ position/slice\n        nSlice = model.renderable.getSliceAtPosition(nSlice);\n      }\n\n      let axis0 = 2;\n      let axis1 = 0;\n      let axis2 = 1;\n\n      if (ijkMode === SlicingMode.I) {\n        axis0 = 0;\n        axis1 = 1;\n        axis2 = 2;\n      } else if (ijkMode === SlicingMode.J) {\n        axis0 = 1;\n        axis1 = 2;\n        axis2 = 0;\n      }\n\n      ptsArray1[axis0] = nSlice;\n      ptsArray1[axis1] = ext[axis1 * 2] - 0.5;\n      ptsArray1[axis2] = ext[axis2 * 2] - 0.5;\n      ptsArray1[3] = 1.0;\n      vec4.transformMat4(ptsArray1, ptsArray1, tmp3Mat4);\n      model.UBO.setArray('Origin', ptsArray1);\n      ptsArray2[axis0] = nSlice;\n      ptsArray2[axis1] = ext[axis1 * 2 + 1] + 0.5;\n      ptsArray2[axis2] = ext[axis2 * 2] - 0.5;\n      ptsArray2[3] = 1.0;\n      vec4.transformMat4(ptsArray2, ptsArray2, tmp3Mat4);\n      vec4.subtract(ptsArray2, ptsArray2, ptsArray1);\n      ptsArray2[3] = 1.0;\n      model.UBO.setArray('Axis1', ptsArray2);\n      ptsArray2[axis0] = nSlice;\n      ptsArray2[axis1] = ext[axis1 * 2] - 0.5;\n      ptsArray2[axis2] = ext[axis2 * 2 + 1] + 0.5;\n      ptsArray2[3] = 1.0;\n      vec4.transformMat4(ptsArray2, ptsArray2, tmp3Mat4);\n      vec4.subtract(ptsArray2, ptsArray2, ptsArray1);\n      ptsArray2[3] = 1.0;\n      model.UBO.setArray('Axis2', ptsArray2); // three levels of shift scale combined into one\n      // for performance in the fragment shader\n\n      const cScale = [1, 1, 1, 1];\n      const cShift = [0, 0, 0, 0];\n      const tView = model.textureViews[0];\n      const tScale = tView.getTexture().getScale();\n      const numComp = tView.getTexture().getNumberOfComponents();\n      const iComps = false; // todo handle independent?\n\n      for (let i = 0; i < numComp; i++) {\n        let cw = actor.getProperty().getColorWindow();\n        let cl = actor.getProperty().getColorLevel();\n        const target = iComps ? i : 0;\n        const cfun = actor.getProperty().getRGBTransferFunction(target);\n\n        if (cfun) {\n          const cRange = cfun.getRange();\n          cw = cRange[1] - cRange[0];\n          cl = 0.5 * (cRange[1] + cRange[0]);\n        }\n\n        cScale[i] = tScale / cw;\n        cShift[i] = -cl / cw + 0.5;\n      }\n\n      model.UBO.setArray('cScale', cScale);\n      model.UBO.setArray('cShift', cShift);\n      model.UBO.sendIfNeeded(model.device);\n    }\n  };\n\n  publicAPI.updateLUTImage = () => {\n    const actorProperty = model.WebGPUImageSlice.getRenderable().getProperty();\n    const tView = publicAPI.getTextureViews()[0];\n    const numComp = tView.getTexture().getNumberOfComponents();\n    const iComps = false; // todo support indepenedent comps?\n\n    const numIComps = iComps ? numComp : 1;\n    const cfunToString = computeFnToString(actorProperty, actorProperty.getRGBTransferFunction, numIComps);\n\n    if (model.colorTextureString !== cfunToString) {\n      model.numRows = numIComps;\n      const colorArray = new Uint8Array(model.numRows * 2 * model.rowLength * 4);\n      let cfun = actorProperty.getRGBTransferFunction();\n\n      if (cfun) {\n        const tmpTable = new Float32Array(model.rowLength * 3);\n\n        for (let c = 0; c < numIComps; c++) {\n          cfun = actorProperty.getRGBTransferFunction(c);\n          const cRange = cfun.getRange();\n          cfun.getTable(cRange[0], cRange[1], model.rowLength, tmpTable, 1);\n\n          if (iComps) {\n            for (let i = 0; i < model.rowLength; i++) {\n              const idx = c * model.rowLength * 8 + i * 4;\n              colorArray[idx] = 255.0 * tmpTable[i * 3];\n              colorArray[idx + 1] = 255.0 * tmpTable[i * 3 + 1];\n              colorArray[idx + 2] = 255.0 * tmpTable[i * 3 + 2];\n              colorArray[idx + 3] = 255.0;\n\n              for (let j = 0; j < 4; j++) {\n                colorArray[idx + model.rowLength * 4 + j] = colorArray[idx + j];\n              }\n            }\n          } else {\n            for (let i = 0; i < model.rowLength; i++) {\n              const idx = c * model.rowLength * 8 + i * 4;\n              colorArray[idx] = 255.0 * tmpTable[i * 3];\n              colorArray[idx + 1] = 255.0 * tmpTable[i * 3 + 1];\n              colorArray[idx + 2] = 255.0 * tmpTable[i * 3 + 2];\n              colorArray[idx + 3] = 255.0;\n\n              for (let j = 0; j < 4; j++) {\n                colorArray[idx + model.rowLength * 4 + j] = colorArray[idx + j];\n              }\n            }\n          }\n        }\n      } else {\n        for (let i = 0; i < model.rowLength; ++i) {\n          const grey = 255.0 * i / (model.rowLength - 1);\n          colorArray[i * 4] = grey;\n          colorArray[i * 4 + 1] = grey;\n          colorArray[i * 4 + 2] = grey;\n          colorArray[i * 4 + 3] = 255.0;\n\n          for (let j = 0; j < 4; j++) {\n            colorArray[i * 4 + model.rowLength * 4 + j] = colorArray[i * 4 + j];\n          }\n        }\n      }\n\n      {\n        const treq = {\n          nativeArray: colorArray,\n          width: model.rowLength,\n          height: model.numRows * 2,\n          depth: 1,\n          format: 'rgba8unorm'\n        };\n        const newTex = model.device.getTextureManager().getTexture(treq);\n        const tview = newTex.createView('tfunTexture');\n        model.textureViews[1] = tview;\n      }\n      model.colorTextureString = cfunToString;\n    }\n  };\n\n  const superClassUpdateBuffers = publicAPI.updateBuffers;\n\n  publicAPI.updateBuffers = () => {\n    superClassUpdateBuffers();\n    const newTex = model.device.getTextureManager().getTextureForImageData(model.currentInput);\n    const tViews = model.textureViews;\n\n    if (!tViews[0] || tViews[0].getTexture() !== newTex) {\n      const tview = newTex.createView('imgTexture');\n      tViews[0] = tview;\n    }\n\n    publicAPI.updateLUTImage();\n    publicAPI.updateUBO(); // set interpolation on the texture based on property setting\n\n    const actorProperty = model.WebGPUImageSlice.getRenderable().getProperty();\n    const iType = actorProperty.getInterpolationType() === InterpolationType.NEAREST ? 'nearest' : 'linear';\n\n    if (!model.clampSampler || iType !== model.clampSampler.getOptions().minFilter) {\n      model.clampSampler = vtkWebGPUSampler.newInstance({\n        label: 'clampSampler'\n      });\n      model.clampSampler.create(model.device, {\n        minFilter: iType,\n        magFilter: iType\n      });\n      model.additionalBindables = [model.clampSampler];\n    }\n  };\n\n  const sr = publicAPI.getShaderReplacements();\n\n  publicAPI.replaceShaderPosition = (hash, pipeline, vertexInput) => {\n    const vDesc = pipeline.getShaderDescription('vertex');\n    vDesc.addBuiltinOutput('vec4<f32>', '@builtin(position) Position');\n    let code = vDesc.getCode();\n    const lines = ['var pos: vec4<f32> = mapperUBO.Origin +', '   (vertexBC.x * 0.5 + 0.5) * mapperUBO.Axis1 + (vertexBC.y * 0.5 + 0.5) * mapperUBO.Axis2;', 'pos.w = 1.0;'];\n\n    if (model.dimensions === 2) {\n      lines.push('var tcoord : vec2<f32> = (mapperUBO.SCTCMatrix * pos).xy;');\n    } else {\n      lines.push('var tcoord : vec3<f32> = (mapperUBO.SCTCMatrix * pos).xyz;');\n    }\n\n    lines.push('output.tcoordVS = tcoord;', 'output.Position = rendererUBO.SCPCMatrix * pos;');\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::Position::Impl', lines).result;\n    vDesc.setCode(code);\n  };\n\n  sr.set('replaceShaderPosition', publicAPI.replaceShaderPosition);\n\n  publicAPI.replaceShaderTCoord = (hash, pipeline, vertexInput) => {\n    const vDesc = pipeline.getShaderDescription('vertex');\n\n    if (model.dimensions === 2) {\n      vDesc.addOutput('vec2<f32>', 'tcoordVS');\n    } else {\n      vDesc.addOutput('vec3<f32>', 'tcoordVS');\n    }\n  };\n\n  sr.set('replaceShaderTCoord', publicAPI.replaceShaderTCoord);\n\n  publicAPI.replaceShaderImage = (hash, pipeline, vertexInput) => {\n    const fDesc = pipeline.getShaderDescription('fragment');\n    let code = fDesc.getCode();\n\n    if (model.dimensions === 3) {\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Image::Sample', [`    var computedColor: vec4<f32> =`, `      textureSampleLevel(imgTexture, clampSampler, input.tcoordVS, 0.0);`, `//VTK::Image::Sample`]).result;\n    } else {\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Image::Sample', [`    var computedColor: vec4<f32> =`, `      textureSampleLevel(imgTexture, clampSampler, input.tcoordVS, 0.0);`, `//VTK::Image::Sample`]).result;\n    }\n\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::Image::Sample', [`    var coord: vec2<f32> =`, `      vec2<f32>(computedColor.r * mapperUBO.cScale.r + mapperUBO.cShift.r, 0.5);`, `    computedColor = textureSampleLevel(tfunTexture, clampSampler, coord, 0.0);`]).result;\n    fDesc.setCode(code);\n  };\n\n  sr.set('replaceShaderImage', publicAPI.replaceShaderImage);\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  rowLength: 1024\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkWebGPUFullScreenQuad.extend(publicAPI, model, initialValues);\n  publicAPI.setFragmentShaderTemplate(imgFragTemplate);\n  model.UBO = vtkWebGPUUniformBuffer.newInstance({\n    label: 'mapperUBO'\n  });\n  model.UBO.addEntry('SCTCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('Origin', 'vec4<f32>');\n  model.UBO.addEntry('Axis2', 'vec4<f32>');\n  model.UBO.addEntry('Axis1', 'vec4<f32>');\n  model.UBO.addEntry('cScale', 'vec4<f32>');\n  model.UBO.addEntry('cShift', 'vec4<f32>');\n  model.lutBuildTime = {};\n  macro.obj(model.lutBuildTime, {\n    mtime: 0\n  });\n  model.imagemat = mat4.identity(new Float64Array(16));\n  model.imagematinv = mat4.identity(new Float64Array(16));\n  model.VBOBuildTime = {};\n  macro.obj(model.VBOBuildTime); // Object methods\n\n  vtkWebGPUImageMapper(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkWebGPUImageMapper'); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend\n}; // Register ourself to WebGPU backend if imported\n\nregisterOverride('vtkImageMapper', newInstance);","map":{"version":3,"names":["mat4","vec4","Constants","macro","vtkWebGPUShaderCache","vtkWebGPUFullScreenQuad","vtkWebGPUUniformBuffer","vtkWebGPUSampler","InterpolationType","registerOverride","SlicingMode","imgFragTemplate","computeFnToString","property","fn","numberOfComponents","pwfun","apply","iComps","getIndependentComponents","getMTime","tmpMat4","Float64Array","tmp2Mat4","tmp3Mat4","ptsArray1","ptsArray2","vtkWebGPUImageMapper","publicAPI","model","classHierarchy","push","buildPass","prepass","WebGPUImageSlice","getFirstAncestorOfType","WebGPURenderer","WebGPURenderWindow","getParent","device","getDevice","ren","getRenderable","renderable","getSliceAtFocalPoint","setSliceFromCamera","getActiveCamera","translucentPass","render","opaquePass","update","currentInput","getInputData","prepareToDraw","getRenderEncoder","renderEncoder","registerDrawCallback","pipeline","draw","computePipelineHash","ext","getExtent","dimensions","pipelineHash","updateUBO","utime","UBO","getSendTime","actor","volMapr","getMapper","getProperty","image","center","getStabilizedCenterByReference","identity","translate","mcwcmat","getMatrix","transpose","invert","multiply","modelToIndex","getWorldToIndex","fromTranslation","dims","getDimensions","scale","setArray","ijkMode","getClosestIJKAxis","nSlice","getSlice","getSlicingMode","getSliceAtPosition","axis0","axis1","axis2","I","J","transformMat4","subtract","cScale","cShift","tView","textureViews","tScale","getTexture","getScale","numComp","getNumberOfComponents","i","cw","getColorWindow","cl","getColorLevel","target","cfun","getRGBTransferFunction","cRange","getRange","sendIfNeeded","updateLUTImage","actorProperty","getTextureViews","numIComps","cfunToString","colorTextureString","numRows","colorArray","Uint8Array","rowLength","tmpTable","Float32Array","c","getTable","idx","j","grey","treq","nativeArray","width","height","depth","format","newTex","getTextureManager","tview","createView","superClassUpdateBuffers","updateBuffers","getTextureForImageData","tViews","iType","getInterpolationType","NEAREST","clampSampler","getOptions","minFilter","newInstance","label","create","magFilter","additionalBindables","sr","getShaderReplacements","replaceShaderPosition","hash","vertexInput","vDesc","getShaderDescription","addBuiltinOutput","code","getCode","lines","substitute","result","setCode","set","replaceShaderTCoord","addOutput","replaceShaderImage","fDesc","DEFAULT_VALUES","extend","initialValues","Object","assign","setFragmentShaderTemplate","addEntry","lutBuildTime","obj","mtime","imagemat","imagematinv","VBOBuildTime"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/WebGPU/ImageMapper/index.js"],"sourcesContent":["import { mat4, vec4 } from 'gl-matrix';\nimport Constants from 'vtk.js/Sources/Rendering/Core/ImageMapper/Constants';\nimport * as macro from 'vtk.js/Sources/macros';\n// import vtkDataArray from 'vtk.js/Sources/Common/Core/DataArray';\n// import { VtkDataTypes } from 'vtk.js/Sources/Common/Core/DataArray/Constants';\n// import * as vtkMath from 'vtk.js/Sources/Common/Core/Math';\nimport vtkWebGPUShaderCache from 'vtk.js/Sources/Rendering/WebGPU/ShaderCache';\nimport vtkWebGPUFullScreenQuad from 'vtk.js/Sources/Rendering/WebGPU/FullScreenQuad';\nimport vtkWebGPUUniformBuffer from 'vtk.js/Sources/Rendering/WebGPU/UniformBuffer';\nimport vtkWebGPUSampler from 'vtk.js/Sources/Rendering/WebGPU/Sampler';\n// import vtkWebGPUTypes from 'vtk.js/Sources/Rendering/WebGPU/Types';\n\n// import { Representation } from 'vtk.js/Sources/Rendering/Core/Property/Constants';\nimport { InterpolationType } from 'vtk.js/Sources/Rendering/Core/ImageProperty/Constants';\nimport { registerOverride } from 'vtk.js/Sources/Rendering/WebGPU/ViewNodeFactory';\n\n// const { vtkErrorMacro } = macro;\nconst { SlicingMode } = Constants;\n\nconst imgFragTemplate = `\n//VTK::Renderer::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::Image::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output: fragmentOutput;\n\n  //VTK::Image::Sample\n\n  // var computedColor: vec4<f32> = vec4<f32>(1.0,0.7, 0.5, 1.0);\n\n//VTK::RenderEncoder::Impl\n\n  return output;\n}\n`;\n\n// ----------------------------------------------------------------------------\n// helper methods\n// ----------------------------------------------------------------------------\n\nfunction computeFnToString(property, fn, numberOfComponents) {\n  const pwfun = fn.apply(property);\n  if (pwfun) {\n    const iComps = property.getIndependentComponents();\n    return `${property.getMTime()}-${iComps}-${numberOfComponents}`;\n  }\n  return '0';\n}\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUImageMapper methods\n// ----------------------------------------------------------------------------\n\nconst tmpMat4 = new Float64Array(16);\nconst tmp2Mat4 = new Float64Array(16);\nconst tmp3Mat4 = new Float64Array(16);\nconst ptsArray1 = new Float64Array(4);\nconst ptsArray2 = new Float64Array(4);\n\nfunction vtkWebGPUImageMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUImageMapper');\n\n  publicAPI.buildPass = (prepass) => {\n    if (prepass) {\n      model.WebGPUImageSlice = publicAPI.getFirstAncestorOfType(\n        'vtkWebGPUImageSlice'\n      );\n      model.WebGPURenderer =\n        model.WebGPUImageSlice.getFirstAncestorOfType('vtkWebGPURenderer');\n      model.WebGPURenderWindow = model.WebGPURenderer.getParent();\n      model.device = model.WebGPURenderWindow.getDevice();\n\n      const ren = model.WebGPURenderer.getRenderable();\n      // is slice set by the camera\n      if (model.renderable.getSliceAtFocalPoint()) {\n        model.renderable.setSliceFromCamera(ren.getActiveCamera());\n      }\n    }\n  };\n\n  // Renders myself\n  publicAPI.translucentPass = (prepass) => {\n    if (prepass) {\n      publicAPI.render();\n    }\n  };\n\n  publicAPI.opaquePass = (prepass) => {\n    if (prepass) {\n      publicAPI.render();\n    }\n  };\n\n  publicAPI.render = () => {\n    model.renderable.update();\n\n    model.currentInput = model.renderable.getInputData();\n\n    publicAPI.prepareToDraw(model.WebGPURenderer.getRenderEncoder());\n    model.renderEncoder.registerDrawCallback(model.pipeline, publicAPI.draw);\n  };\n\n  publicAPI.computePipelineHash = () => {\n    const ext = model.currentInput.getExtent();\n    if (ext[0] === ext[1] || ext[2] === ext[3] || ext[4] === ext[5]) {\n      model.dimensions = 2;\n      model.pipelineHash = 'img2';\n    } else {\n      model.dimensions = 3;\n      model.pipelineHash = 'img3';\n    }\n  };\n\n  publicAPI.updateUBO = () => {\n    const utime = model.UBO.getSendTime();\n    const actor = model.WebGPUImageSlice.getRenderable();\n    const volMapr = actor.getMapper();\n    if (\n      publicAPI.getMTime() > utime ||\n      model.renderable.getMTime() > utime ||\n      actor.getProperty().getMTime() > utime\n    ) {\n      // compute the SCTCMatrix\n      const image = volMapr.getInputData();\n      const center = model.WebGPURenderer.getStabilizedCenterByReference();\n\n      mat4.identity(tmpMat4);\n      mat4.translate(tmpMat4, tmpMat4, center);\n      // tmpMat4 is now SC->World\n\n      const mcwcmat = actor.getMatrix();\n      mat4.transpose(tmp2Mat4, mcwcmat);\n      mat4.invert(tmp2Mat4, tmp2Mat4);\n      // tmp2Mat4 is now world to model\n\n      mat4.multiply(tmpMat4, tmp2Mat4, tmpMat4);\n      // tmp4Mat is now SC->Model\n\n      // the method on the data is world to index but the volume is in\n      // model coordinates so really in this context it is model to index\n      const modelToIndex = image.getWorldToIndex();\n      mat4.multiply(tmpMat4, modelToIndex, tmpMat4);\n      // tmpMat4 is now SC -> Index, save this as we need it later\n      mat4.invert(tmp3Mat4, tmpMat4);\n\n      // need translation and scale\n      mat4.fromTranslation(tmp2Mat4, [0.5, 0.5, 0.5]);\n      mat4.multiply(tmpMat4, tmp2Mat4, tmpMat4);\n\n      const dims = image.getDimensions();\n      mat4.identity(tmp2Mat4);\n      mat4.scale(tmp2Mat4, tmp2Mat4, [\n        1.0 / dims[0],\n        1.0 / dims[1],\n        1.0 / dims[2],\n      ]);\n      mat4.multiply(tmpMat4, tmp2Mat4, tmpMat4);\n      // tmpMat4 is now SC -> Tcoord\n\n      model.UBO.setArray('SCTCMatrix', tmpMat4);\n\n      // need to compute the plane here in world coordinates\n      // then pass that down in the UBO\n      const ext = model.currentInput.getExtent();\n\n      // Find what IJK axis and what direction to slice along\n      const { ijkMode } = model.renderable.getClosestIJKAxis();\n\n      // Find the IJK slice\n      let nSlice = model.renderable.getSlice();\n      if (ijkMode !== model.renderable.getSlicingMode()) {\n        // If not IJK slicing, get the IJK slice from the XYZ position/slice\n        nSlice = model.renderable.getSliceAtPosition(nSlice);\n      }\n\n      let axis0 = 2;\n      let axis1 = 0;\n      let axis2 = 1;\n      if (ijkMode === SlicingMode.I) {\n        axis0 = 0;\n        axis1 = 1;\n        axis2 = 2;\n      } else if (ijkMode === SlicingMode.J) {\n        axis0 = 1;\n        axis1 = 2;\n        axis2 = 0;\n      }\n\n      ptsArray1[axis0] = nSlice;\n      ptsArray1[axis1] = ext[axis1 * 2] - 0.5;\n      ptsArray1[axis2] = ext[axis2 * 2] - 0.5;\n      ptsArray1[3] = 1.0;\n      vec4.transformMat4(ptsArray1, ptsArray1, tmp3Mat4);\n      model.UBO.setArray('Origin', ptsArray1);\n\n      ptsArray2[axis0] = nSlice;\n      ptsArray2[axis1] = ext[axis1 * 2 + 1] + 0.5;\n      ptsArray2[axis2] = ext[axis2 * 2] - 0.5;\n      ptsArray2[3] = 1.0;\n      vec4.transformMat4(ptsArray2, ptsArray2, tmp3Mat4);\n      vec4.subtract(ptsArray2, ptsArray2, ptsArray1);\n      ptsArray2[3] = 1.0;\n      model.UBO.setArray('Axis1', ptsArray2);\n\n      ptsArray2[axis0] = nSlice;\n      ptsArray2[axis1] = ext[axis1 * 2] - 0.5;\n      ptsArray2[axis2] = ext[axis2 * 2 + 1] + 0.5;\n      ptsArray2[3] = 1.0;\n      vec4.transformMat4(ptsArray2, ptsArray2, tmp3Mat4);\n      vec4.subtract(ptsArray2, ptsArray2, ptsArray1);\n      ptsArray2[3] = 1.0;\n      model.UBO.setArray('Axis2', ptsArray2);\n\n      // three levels of shift scale combined into one\n      // for performance in the fragment shader\n      const cScale = [1, 1, 1, 1];\n      const cShift = [0, 0, 0, 0];\n      const tView = model.textureViews[0];\n      const tScale = tView.getTexture().getScale();\n      const numComp = tView.getTexture().getNumberOfComponents();\n      const iComps = false; // todo handle independent?\n      for (let i = 0; i < numComp; i++) {\n        let cw = actor.getProperty().getColorWindow();\n        let cl = actor.getProperty().getColorLevel();\n\n        const target = iComps ? i : 0;\n        const cfun = actor.getProperty().getRGBTransferFunction(target);\n        if (cfun) {\n          const cRange = cfun.getRange();\n          cw = cRange[1] - cRange[0];\n          cl = 0.5 * (cRange[1] + cRange[0]);\n        }\n\n        cScale[i] = tScale / cw;\n        cShift[i] = -cl / cw + 0.5;\n      }\n      model.UBO.setArray('cScale', cScale);\n      model.UBO.setArray('cShift', cShift);\n      model.UBO.sendIfNeeded(model.device);\n    }\n  };\n\n  publicAPI.updateLUTImage = () => {\n    const actorProperty = model.WebGPUImageSlice.getRenderable().getProperty();\n\n    const tView = publicAPI.getTextureViews()[0];\n    const numComp = tView.getTexture().getNumberOfComponents();\n    const iComps = false; // todo support indepenedent comps?\n    const numIComps = iComps ? numComp : 1;\n\n    const cfunToString = computeFnToString(\n      actorProperty,\n      actorProperty.getRGBTransferFunction,\n      numIComps\n    );\n\n    if (model.colorTextureString !== cfunToString) {\n      model.numRows = numIComps;\n      const colorArray = new Uint8Array(\n        model.numRows * 2 * model.rowLength * 4\n      );\n\n      let cfun = actorProperty.getRGBTransferFunction();\n      if (cfun) {\n        const tmpTable = new Float32Array(model.rowLength * 3);\n\n        for (let c = 0; c < numIComps; c++) {\n          cfun = actorProperty.getRGBTransferFunction(c);\n          const cRange = cfun.getRange();\n          cfun.getTable(cRange[0], cRange[1], model.rowLength, tmpTable, 1);\n          if (iComps) {\n            for (let i = 0; i < model.rowLength; i++) {\n              const idx = c * model.rowLength * 8 + i * 4;\n              colorArray[idx] = 255.0 * tmpTable[i * 3];\n              colorArray[idx + 1] = 255.0 * tmpTable[i * 3 + 1];\n              colorArray[idx + 2] = 255.0 * tmpTable[i * 3 + 2];\n              colorArray[idx + 3] = 255.0;\n              for (let j = 0; j < 4; j++) {\n                colorArray[idx + model.rowLength * 4 + j] = colorArray[idx + j];\n              }\n            }\n          } else {\n            for (let i = 0; i < model.rowLength; i++) {\n              const idx = c * model.rowLength * 8 + i * 4;\n              colorArray[idx] = 255.0 * tmpTable[i * 3];\n              colorArray[idx + 1] = 255.0 * tmpTable[i * 3 + 1];\n              colorArray[idx + 2] = 255.0 * tmpTable[i * 3 + 2];\n              colorArray[idx + 3] = 255.0;\n              for (let j = 0; j < 4; j++) {\n                colorArray[idx + model.rowLength * 4 + j] = colorArray[idx + j];\n              }\n            }\n          }\n        }\n      } else {\n        for (let i = 0; i < model.rowLength; ++i) {\n          const grey = (255.0 * i) / (model.rowLength - 1);\n          colorArray[i * 4] = grey;\n          colorArray[i * 4 + 1] = grey;\n          colorArray[i * 4 + 2] = grey;\n          colorArray[i * 4 + 3] = 255.0;\n          for (let j = 0; j < 4; j++) {\n            colorArray[i * 4 + model.rowLength * 4 + j] = colorArray[i * 4 + j];\n          }\n        }\n      }\n\n      {\n        const treq = {\n          nativeArray: colorArray,\n          width: model.rowLength,\n          height: model.numRows * 2,\n          depth: 1,\n          format: 'rgba8unorm',\n        };\n        const newTex = model.device.getTextureManager().getTexture(treq);\n        const tview = newTex.createView('tfunTexture');\n        model.textureViews[1] = tview;\n      }\n\n      model.colorTextureString = cfunToString;\n    }\n  };\n\n  const superClassUpdateBuffers = publicAPI.updateBuffers;\n  publicAPI.updateBuffers = () => {\n    superClassUpdateBuffers();\n    const newTex = model.device\n      .getTextureManager()\n      .getTextureForImageData(model.currentInput);\n    const tViews = model.textureViews;\n\n    if (!tViews[0] || tViews[0].getTexture() !== newTex) {\n      const tview = newTex.createView('imgTexture');\n      tViews[0] = tview;\n    }\n\n    publicAPI.updateLUTImage();\n    publicAPI.updateUBO();\n\n    // set interpolation on the texture based on property setting\n    const actorProperty = model.WebGPUImageSlice.getRenderable().getProperty();\n    const iType =\n      actorProperty.getInterpolationType() === InterpolationType.NEAREST\n        ? 'nearest'\n        : 'linear';\n\n    if (\n      !model.clampSampler ||\n      iType !== model.clampSampler.getOptions().minFilter\n    ) {\n      model.clampSampler = vtkWebGPUSampler.newInstance({\n        label: 'clampSampler',\n      });\n      model.clampSampler.create(model.device, {\n        minFilter: iType,\n        magFilter: iType,\n      });\n      model.additionalBindables = [model.clampSampler];\n    }\n  };\n\n  const sr = publicAPI.getShaderReplacements();\n\n  publicAPI.replaceShaderPosition = (hash, pipeline, vertexInput) => {\n    const vDesc = pipeline.getShaderDescription('vertex');\n    vDesc.addBuiltinOutput('vec4<f32>', '@builtin(position) Position');\n    let code = vDesc.getCode();\n    const lines = [\n      'var pos: vec4<f32> = mapperUBO.Origin +',\n      '   (vertexBC.x * 0.5 + 0.5) * mapperUBO.Axis1 + (vertexBC.y * 0.5 + 0.5) * mapperUBO.Axis2;',\n      'pos.w = 1.0;',\n    ];\n    if (model.dimensions === 2) {\n      lines.push('var tcoord : vec2<f32> = (mapperUBO.SCTCMatrix * pos).xy;');\n    } else {\n      lines.push('var tcoord : vec3<f32> = (mapperUBO.SCTCMatrix * pos).xyz;');\n    }\n    lines.push(\n      'output.tcoordVS = tcoord;',\n      'output.Position = rendererUBO.SCPCMatrix * pos;'\n    );\n    code = vtkWebGPUShaderCache.substitute(\n      code,\n      '//VTK::Position::Impl',\n      lines\n    ).result;\n    vDesc.setCode(code);\n  };\n  sr.set('replaceShaderPosition', publicAPI.replaceShaderPosition);\n\n  publicAPI.replaceShaderTCoord = (hash, pipeline, vertexInput) => {\n    const vDesc = pipeline.getShaderDescription('vertex');\n    if (model.dimensions === 2) {\n      vDesc.addOutput('vec2<f32>', 'tcoordVS');\n    } else {\n      vDesc.addOutput('vec3<f32>', 'tcoordVS');\n    }\n  };\n  sr.set('replaceShaderTCoord', publicAPI.replaceShaderTCoord);\n\n  publicAPI.replaceShaderImage = (hash, pipeline, vertexInput) => {\n    const fDesc = pipeline.getShaderDescription('fragment');\n    let code = fDesc.getCode();\n\n    if (model.dimensions === 3) {\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Image::Sample', [\n        `    var computedColor: vec4<f32> =`,\n        `      textureSampleLevel(imgTexture, clampSampler, input.tcoordVS, 0.0);`,\n        `//VTK::Image::Sample`,\n      ]).result;\n    } else {\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Image::Sample', [\n        `    var computedColor: vec4<f32> =`,\n        `      textureSampleLevel(imgTexture, clampSampler, input.tcoordVS, 0.0);`,\n        `//VTK::Image::Sample`,\n      ]).result;\n    }\n\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::Image::Sample', [\n      `    var coord: vec2<f32> =`,\n      `      vec2<f32>(computedColor.r * mapperUBO.cScale.r + mapperUBO.cShift.r, 0.5);`,\n      `    computedColor = textureSampleLevel(tfunTexture, clampSampler, coord, 0.0);`,\n    ]).result;\n\n    fDesc.setCode(code);\n  };\n  sr.set('replaceShaderImage', publicAPI.replaceShaderImage);\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  rowLength: 1024,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkWebGPUFullScreenQuad.extend(publicAPI, model, initialValues);\n\n  publicAPI.setFragmentShaderTemplate(imgFragTemplate);\n\n  model.UBO = vtkWebGPUUniformBuffer.newInstance({ label: 'mapperUBO' });\n  model.UBO.addEntry('SCTCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('Origin', 'vec4<f32>');\n  model.UBO.addEntry('Axis2', 'vec4<f32>');\n  model.UBO.addEntry('Axis1', 'vec4<f32>');\n  model.UBO.addEntry('cScale', 'vec4<f32>');\n  model.UBO.addEntry('cShift', 'vec4<f32>');\n\n  model.lutBuildTime = {};\n  macro.obj(model.lutBuildTime, { mtime: 0 });\n\n  model.imagemat = mat4.identity(new Float64Array(16));\n  model.imagematinv = mat4.identity(new Float64Array(16));\n\n  model.VBOBuildTime = {};\n  macro.obj(model.VBOBuildTime);\n\n  // Object methods\n  vtkWebGPUImageMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkWebGPUImageMapper');\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend };\n\n// Register ourself to WebGPU backend if imported\nregisterOverride('vtkImageMapper', newInstance);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}