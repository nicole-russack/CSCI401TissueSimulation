{"ast":null,"code":"import { vec3, mat4 } from 'gl-matrix';\nimport * as macro from 'vtk.js/Sources/macros';\nimport * as vtkMath from 'vtk.js/Sources/Common/Core/Math';\nimport vtkViewNode from 'vtk.js/Sources/Rendering/SceneGraph/ViewNode';\nimport vtkWebGPUBindGroup from 'vtk.js/Sources/Rendering/WebGPU/BindGroup';\nimport vtkWebGPUFullScreenQuad from 'vtk.js/Sources/Rendering/WebGPU/FullScreenQuad';\nimport vtkWebGPUStorageBuffer from 'vtk.js/Sources/Rendering/WebGPU/StorageBuffer';\nimport vtkWebGPUUniformBuffer from 'vtk.js/Sources/Rendering/WebGPU/UniformBuffer';\nimport { registerOverride } from 'vtk.js/Sources/Rendering/WebGPU/ViewNodeFactory';\nconst {\n  vtkDebugMacro\n} = macro;\nconst clearFragColorTemplate = `\n//VTK::Renderer::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output: fragmentOutput;\n\n  var computedColor: vec4<f32> = mapperUBO.BackgroundColor;\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n`;\nconst clearFragTextureTemplate = `\nfn vecToRectCoord(dir: vec3<f32>) -> vec2<f32> {\n  var tau: f32 = 6.28318530718;\n  var pi: f32 = 3.14159265359;\n  var out: vec2<f32> = vec2<f32>(0.0);\n\n  out.x = atan2(dir.z, dir.x) / tau;\n  out.x += 0.5;\n\n  var phix: f32 = length(vec2(dir.x, dir.z));\n  out.y = atan2(dir.y, phix) / pi + 0.5;\n\n  return out;\n}\n\n//VTK::Renderer::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output: fragmentOutput;\n\n  var tcoord: vec4<f32> = vec4<f32>(input.vertexVC.xy, -1, 1);\n  var V: vec4<f32> = normalize(mapperUBO.FSQMatrix * tcoord); // vec2<f32>((input.tcoordVS.x - 0.5) * 2, -(input.tcoordVS.y - 0.5) * 2);\n  // textureSampleLevel gets rid of some ugly artifacts\n  var background = textureSampleLevel(EnvironmentTexture, EnvironmentTextureSampler, vecToRectCoord(V.xyz), 0);\n  var computedColor: vec4<f32> = vec4<f32>(background.rgb, 1);\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n`;\n\nconst _fsqClearMat4 = new Float64Array(16);\n\nconst _tNormalMat4 = new Float64Array(16); // Light type index gives either 0, 1, or 2 which indicates what type of light there is.\n// While technically, there are only spot and directional lights, within the CellArrayMapper\n// there is a third, positional light. It is technically just a variant of a spot light with\n// a cone angle of 90 or above, however certain calculations can be skipped if it is treated\n// separately.\n// The mappings are shown below:\n// 0 -> positional light\n// 1 -> directional light\n// 2 -> spot light\n\n\nfunction getLightTypeIndex(light) {\n  if (light.getPositional()) {\n    if (light.getConeAngle() >= 90) {\n      return 0;\n    }\n\n    return 2;\n  }\n\n  return 1;\n} // ----------------------------------------------------------------------------\n// vtkWebGPURenderer methods\n// ----------------------------------------------------------------------------\n\n/* eslint-disable no-bitwise */\n\n\nfunction vtkWebGPURenderer(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPURenderer'); // Builds myself.\n\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n\n      model.camera = model.renderable.getActiveCamera();\n      publicAPI.updateLights();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.camera);\n      publicAPI.addMissingNodes(model.renderable.getViewPropsWithNestedProps());\n      publicAPI.removeUnusedNodes();\n      model.webgpuCamera = publicAPI.getViewNodeFor(model.camera);\n      publicAPI.updateStabilizedMatrix();\n    }\n  };\n\n  publicAPI.updateStabilizedMatrix = () => {\n    // This method is designed to help with floating point\n    // issues when rendering datasets that push the limits of\n    // resolutions on float.\n    //\n    // One of the most common cases is when the dataset is located far\n    // away from the origin relative to the clipping range we are looking\n    // at. For that case we want to perform the floating point sensitive\n    // multiplications on the CPU in double. To this end we want the\n    // vertex rendering ops to look something like\n    //\n    // Compute shifted points and load those into the VBO\n    // pointCoordsSC = WorldToStabilizedMatrix * pointCoords;\n    //\n    // In the vertex shader do the following\n    // positionVC = StabilizedToDeviceMatrix * ModelToStabilizedMatrix*vertexIn;\n    //\n    // We use two matrices because it is expensive to change the\n    // WorldToStabilized matrix as we have to reupload all pointCoords\n    // So that matrix (MCSCMatrix) is fairly static, the Stabilized to\n    // Device matrix is the one that gets updated every time the camera\n    // changes.\n    //\n    // The basic idea is that we should translate the data so that\n    // when the center of the view frustum moves a lot\n    // we recenter it. The center of the view frustum is roughly\n    // camPos + dirOfProj*(far + near)*0.5\n    const clipRange = model.camera.getClippingRange();\n    const pos = model.camera.getPositionByReference();\n    const dop = model.camera.getDirectionOfProjectionByReference();\n    const center = [];\n    const offset = [];\n    vec3.scale(offset, dop, 0.5 * (clipRange[0] + clipRange[1]));\n    vec3.add(center, pos, offset);\n    vec3.sub(offset, center, model.stabilizedCenter);\n    const length = vec3.len(offset);\n\n    if (length / (clipRange[1] - clipRange[0]) > model.recenterThreshold) {\n      model.stabilizedCenter = center;\n      model.stabilizedTime.modified();\n    }\n  };\n\n  publicAPI.updateLights = () => {\n    let count = 0;\n    const lights = model.renderable.getLightsByReference();\n\n    for (let index = 0; index < lights.length; ++index) {\n      if (lights[index].getSwitch() > 0.0) {\n        count++;\n      }\n    }\n\n    if (!count) {\n      vtkDebugMacro('No lights are on, creating one.');\n      model.renderable.createLight();\n    }\n\n    return count;\n  };\n\n  publicAPI.updateUBO = () => {\n    // make sure the data is up to date\n    // has the camera changed?\n    const utime = model.UBO.getSendTime();\n\n    if (model._parent.getMTime() > utime || publicAPI.getMTime() > utime || model.camera.getMTime() > utime || model.renderable.getMTime() > utime) {\n      const keyMats = model.webgpuCamera.getKeyMatrices(publicAPI);\n      model.UBO.setArray('WCVCMatrix', keyMats.wcvc);\n      model.UBO.setArray('SCPCMatrix', keyMats.scpc);\n      model.UBO.setArray('PCSCMatrix', keyMats.pcsc);\n      model.UBO.setArray('SCVCMatrix', keyMats.scvc);\n      model.UBO.setArray('VCPCMatrix', keyMats.vcpc);\n      model.UBO.setArray('WCVCNormals', keyMats.normalMatrix);\n      model.UBO.setValue('LightCount', model.renderable.getLights().length);\n      model.UBO.setValue('MaxEnvironmentMipLevel', model.renderable.getEnvironmentTexture()?.getMipLevel());\n      model.UBO.setValue('BackgroundDiffuseStrength', model.renderable.getEnvironmentTextureDiffuseStrength());\n      model.UBO.setValue('BackgroundSpecularStrength', model.renderable.getEnvironmentTextureSpecularStrength());\n      const tsize = publicAPI.getYInvertedTiledSizeAndOrigin();\n      model.UBO.setArray('viewportSize', [tsize.usize, tsize.vsize]);\n      model.UBO.setValue('cameraParallel', model.camera.getParallelProjection());\n\n      const device = model._parent.getDevice();\n\n      model.UBO.sendIfNeeded(device);\n    }\n  };\n\n  publicAPI.updateSSBO = () => {\n    const lights = model.renderable.getLights();\n    const keyMats = model.webgpuCamera.getKeyMatrices(publicAPI);\n    let lightTimeString = `${model.renderable.getMTime()}`;\n\n    for (let i = 0; i < lights.length; i++) {\n      lightTimeString += lights[i].getMTime();\n    }\n\n    if (lightTimeString !== model.lightTimeString) {\n      const lightPosArray = new Float32Array(lights.length * 4);\n      const lightDirArray = new Float32Array(lights.length * 4);\n      const lightColorArray = new Float32Array(lights.length * 4);\n      const lightTypeArray = new Float32Array(lights.length * 4);\n\n      for (let i = 0; i < lights.length; i++) {\n        const offset = i * 4; // Position\n\n        const viewCoordinatePosition = lights[i].getPosition();\n        vec3.transformMat4(viewCoordinatePosition, viewCoordinatePosition, keyMats.wcvc); // viewCoordinatePosition\n\n        lightPosArray[offset] = viewCoordinatePosition[0];\n        lightPosArray[offset + 1] = viewCoordinatePosition[1];\n        lightPosArray[offset + 2] = viewCoordinatePosition[2];\n        lightPosArray[offset + 3] = 0; // Rotation (All are negative to correct for -Z being forward)\n\n        lightDirArray[offset] = -lights[i].getDirection()[0];\n        lightDirArray[offset + 1] = -lights[i].getDirection()[1];\n        lightDirArray[offset + 2] = -lights[i].getDirection()[2];\n        lightDirArray[offset + 3] = 0; // Color\n\n        lightColorArray[offset] = lights[i].getColor()[0];\n        lightColorArray[offset + 1] = lights[i].getColor()[1];\n        lightColorArray[offset + 2] = lights[i].getColor()[2];\n        lightColorArray[offset + 3] = lights[i].getIntensity() * 5; // arbitrary multiplication to fix the dullness of low value PBR lights\n        // Type\n\n        lightTypeArray[offset] = getLightTypeIndex(lights[i]); // Type\n\n        lightTypeArray[offset + 1] = Math.cos(vtkMath.radiansFromDegrees(lights[i].getConeAngle())); // Inner Phi, should probably do some check on these to make sure they dont excede limits\n\n        lightTypeArray[offset + 2] = Math.cos(vtkMath.radiansFromDegrees(lights[i].getConeAngle() + lights[i].getConeFalloff())); // Outer Phi\n\n        lightTypeArray[offset + 3] = 0;\n      } // Im not sure how correct this is, but this is what the example does\n      // https://kitware.github.io/vtk-js/api/Rendering_WebGPU_VolumePassFSQ.html\n\n\n      model.SSBO.clearData();\n      model.SSBO.setNumberOfInstances(lights.length);\n      model.SSBO.addEntry('LightPos', 'vec4<f32>'); // Position\n\n      model.SSBO.addEntry('LightDir', 'vec4<f32>'); // Direction\n\n      model.SSBO.addEntry('LightColor', 'vec4<f32>'); // Color (r, g, b, intensity)\n\n      model.SSBO.addEntry('LightData', 'vec4<f32>'); // Other data (type, etc, etc, etc)\n\n      model.SSBO.setAllInstancesFromArray('LightPos', lightPosArray);\n      model.SSBO.setAllInstancesFromArray('LightDir', lightDirArray);\n      model.SSBO.setAllInstancesFromArray('LightColor', lightColorArray);\n      model.SSBO.setAllInstancesFromArray('LightData', lightTypeArray);\n\n      const device = model._parent.getDevice();\n\n      model.SSBO.send(device);\n    }\n\n    model.lightTimeString = lightTimeString;\n  };\n\n  publicAPI.scissorAndViewport = encoder => {\n    const tsize = publicAPI.getYInvertedTiledSizeAndOrigin();\n    encoder.getHandle().setViewport(tsize.lowerLeftU, tsize.lowerLeftV, tsize.usize, tsize.vsize, 0.0, 1.0); // set scissor\n\n    encoder.getHandle().setScissorRect(tsize.lowerLeftU, tsize.lowerLeftV, tsize.usize, tsize.vsize);\n  };\n\n  publicAPI.bindUBO = renderEncoder => {\n    renderEncoder.activateBindGroup(model.bindGroup);\n  }; // Renders myself\n\n\n  publicAPI.opaquePass = prepass => {\n    if (prepass) {\n      model.renderEncoder.begin(model._parent.getCommandEncoder());\n      publicAPI.updateUBO();\n      publicAPI.updateSSBO();\n    } else {\n      publicAPI.scissorAndViewport(model.renderEncoder);\n      publicAPI.clear();\n      model.renderEncoder.end();\n    }\n  };\n\n  publicAPI.clear = () => {\n    if (model.renderable.getTransparent() || model.suppressClear) {\n      return;\n    }\n\n    const device = model._parent.getDevice(); // Normal Solid Color\n\n\n    if (!model.clearFSQ) {\n      model.clearFSQ = vtkWebGPUFullScreenQuad.newInstance();\n      model.clearFSQ.setDevice(device);\n      model.clearFSQ.setPipelineHash('clearfsq');\n      model.clearFSQ.setFragmentShaderTemplate(clearFragColorTemplate);\n      const ubo = vtkWebGPUUniformBuffer.newInstance({\n        label: 'mapperUBO'\n      });\n      ubo.addEntry('FSQMatrix', 'mat4x4<f32>');\n      ubo.addEntry('BackgroundColor', 'vec4<f32>');\n      model.clearFSQ.setUBO(ubo);\n      model.backgroundTex = model.renderable.getEnvironmentTexture();\n    } // Textured Background\n\n\n    if (model.clearFSQ.getPipelineHash() !== 'clearfsqwithtexture' && model.renderable.getUseEnvironmentTextureAsBackground() && model.backgroundTex?.getImageLoaded()) {\n      model.clearFSQ.setFragmentShaderTemplate(clearFragTextureTemplate);\n      const ubo = vtkWebGPUUniformBuffer.newInstance({\n        label: 'mapperUBO'\n      });\n      ubo.addEntry('FSQMatrix', 'mat4x4<f32>');\n      ubo.addEntry('BackgroundColor', 'vec4<f32>');\n      model.clearFSQ.setUBO(ubo);\n      const environmentTextureHash = device.getTextureManager().getTextureForVTKTexture(model.backgroundTex);\n\n      if (environmentTextureHash.getReady()) {\n        const tview = environmentTextureHash.createView(`EnvironmentTexture`);\n        model.clearFSQ.setTextureViews([tview]);\n        model.backgroundTexLoaded = true;\n        const interpolate = model.backgroundTex.getInterpolate() ? 'linear' : 'nearest';\n        tview.addSampler(device, {\n          addressModeU: 'repeat',\n          addressModeV: 'clamp-to-edge',\n          addressModeW: 'repeat',\n          minFilter: interpolate,\n          magFilter: interpolate,\n          mipmapFilter: 'linear'\n        });\n      }\n\n      model.clearFSQ.setPipelineHash('clearfsqwithtexture');\n    } else if (model.clearFSQ.getPipelineHash() === 'clearfsqwithtexture' && !model.renderable.getUseEnvironmentTextureAsBackground()) {\n      // In case the mode is changed at runtime\n      model.clearFSQ = vtkWebGPUFullScreenQuad.newInstance();\n      model.clearFSQ.setDevice(device);\n      model.clearFSQ.setPipelineHash('clearfsq');\n      model.clearFSQ.setFragmentShaderTemplate(clearFragColorTemplate);\n      const ubo = vtkWebGPUUniformBuffer.newInstance({\n        label: 'mapperUBO'\n      });\n      ubo.addEntry('FSQMatrix', 'mat4x4<f32>');\n      ubo.addEntry('BackgroundColor', 'vec4<f32>');\n      model.clearFSQ.setUBO(ubo);\n    }\n\n    const keyMats = model.webgpuCamera.getKeyMatrices(publicAPI);\n    const background = model.renderable.getBackgroundByReference();\n    model.clearFSQ.getUBO().setArray('BackgroundColor', background);\n    mat4.transpose(_tNormalMat4, keyMats.normalMatrix);\n    mat4.mul(_fsqClearMat4, keyMats.scvc, keyMats.pcsc);\n    mat4.mul(_fsqClearMat4, _tNormalMat4, _fsqClearMat4);\n    model.clearFSQ.getUBO().setArray('FSQMatrix', _fsqClearMat4);\n    model.clearFSQ.getUBO().sendIfNeeded(device);\n    model.clearFSQ.prepareAndDraw(model.renderEncoder);\n  };\n\n  publicAPI.translucentPass = prepass => {\n    if (prepass) {\n      model.renderEncoder.begin(model._parent.getCommandEncoder());\n    } else {\n      publicAPI.scissorAndViewport(model.renderEncoder);\n      model.renderEncoder.end();\n    }\n  };\n\n  publicAPI.volumeDepthRangePass = prepass => {\n    if (prepass) {\n      model.renderEncoder.begin(model._parent.getCommandEncoder());\n    } else {\n      publicAPI.scissorAndViewport(model.renderEncoder);\n      model.renderEncoder.end();\n    }\n  };\n\n  publicAPI.getAspectRatio = () => {\n    const size = model._parent.getSizeByReference();\n\n    const viewport = model.renderable.getViewportByReference();\n    return size[0] * (viewport[2] - viewport[0]) / ((viewport[3] - viewport[1]) * size[1]);\n  };\n\n  publicAPI.convertToOpenGLDepth = val => model.webgpuCamera.convertToOpenGLDepth(val);\n\n  publicAPI.getYInvertedTiledSizeAndOrigin = () => {\n    const res = publicAPI.getTiledSizeAndOrigin();\n\n    const size = model._parent.getSizeByReference();\n\n    res.lowerLeftV = size[1] - res.vsize - res.lowerLeftV;\n    return res;\n  };\n\n  publicAPI.getTiledSizeAndOrigin = () => {\n    const vport = model.renderable.getViewportByReference(); // if there is no window assume 0 1\n\n    const tileViewPort = [0.0, 0.0, 1.0, 1.0]; // find the lower left corner of the viewport, taking into account the\n    // lower left boundary of this tile\n\n    const vpu = vport[0] - tileViewPort[0];\n    const vpv = vport[1] - tileViewPort[1]; // store the result as a pixel value\n\n    const ndvp = model._parent.normalizedDisplayToDisplay(vpu, vpv);\n\n    const lowerLeftU = Math.round(ndvp[0]);\n    const lowerLeftV = Math.round(ndvp[1]); // find the upper right corner of the viewport, taking into account the\n    // lower left boundary of this tile\n\n    const vpu2 = vport[2] - tileViewPort[0];\n    const vpv2 = vport[3] - tileViewPort[1];\n\n    const ndvp2 = model._parent.normalizedDisplayToDisplay(vpu2, vpv2); // now compute the size of the intersection of the viewport with the\n    // current tile\n\n\n    let usize = Math.round(ndvp2[0]) - lowerLeftU;\n    let vsize = Math.round(ndvp2[1]) - lowerLeftV;\n\n    if (usize < 0) {\n      usize = 0;\n    }\n\n    if (vsize < 0) {\n      vsize = 0;\n    }\n\n    return {\n      usize,\n      vsize,\n      lowerLeftU,\n      lowerLeftV\n    };\n  };\n\n  publicAPI.getPropFromID = id => {\n    for (let i = 0; i < model.children.length; i++) {\n      const res = model.children[i].getPropID ? model.children[i].getPropID() : -1;\n\n      if (res === id) {\n        return model.children[i];\n      }\n    }\n\n    return null;\n  };\n\n  publicAPI.getStabilizedTime = () => model.stabilizedTime.getMTime();\n\n  publicAPI.releaseGraphicsResources = () => {\n    if (model.selector !== null) {\n      model.selector.releaseGraphicsResources();\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  bindGroup: null,\n  selector: null,\n  renderEncoder: null,\n  recenterThreshold: 20.0,\n  suppressClear: false,\n  stabilizedCenter: [0.0, 0.0, 0.0]\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues); // UBO\n\n  model.UBO = vtkWebGPUUniformBuffer.newInstance({\n    label: 'rendererUBO'\n  });\n  model.UBO.addEntry('WCVCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('SCPCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('PCSCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('SCVCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('VCPCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('WCVCNormals', 'mat4x4<f32>');\n  model.UBO.addEntry('viewportSize', 'vec2<f32>');\n  model.UBO.addEntry('LightCount', 'i32');\n  model.UBO.addEntry('MaxEnvironmentMipLevel', 'f32');\n  model.UBO.addEntry('BackgroundDiffuseStrength', 'f32');\n  model.UBO.addEntry('BackgroundSpecularStrength', 'f32');\n  model.UBO.addEntry('cameraParallel', 'u32'); // SSBO (Light data)\n\n  model.SSBO = vtkWebGPUStorageBuffer.newInstance({\n    label: 'rendererLightSSBO'\n  });\n  model.lightTimeString = '';\n  model.bindGroup = vtkWebGPUBindGroup.newInstance({\n    label: 'rendererBG'\n  });\n  model.bindGroup.setBindables([model.UBO, model.SSBO]);\n  model.tmpMat4 = mat4.identity(new Float64Array(16));\n  model.stabilizedTime = {};\n  macro.obj(model.stabilizedTime, {\n    mtime: 0\n  }); // Build VTK API\n\n  macro.get(publicAPI, model, ['bindGroup', 'stabilizedTime']);\n  macro.getArray(publicAPI, model, ['stabilizedCenter']);\n  macro.setGet(publicAPI, model, ['renderEncoder', 'selector', 'suppressClear', 'UBO']); // Object methods\n\n  vtkWebGPURenderer(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkWebGPURenderer'); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend\n}; // Register ourself to WebGPU backend if imported\n\nregisterOverride('vtkRenderer', newInstance);","map":{"version":3,"names":["vec3","mat4","macro","vtkMath","vtkViewNode","vtkWebGPUBindGroup","vtkWebGPUFullScreenQuad","vtkWebGPUStorageBuffer","vtkWebGPUUniformBuffer","registerOverride","vtkDebugMacro","clearFragColorTemplate","clearFragTextureTemplate","_fsqClearMat4","Float64Array","_tNormalMat4","getLightTypeIndex","light","getPositional","getConeAngle","vtkWebGPURenderer","publicAPI","model","classHierarchy","push","buildPass","prepass","renderable","camera","getActiveCamera","updateLights","prepareNodes","addMissingNode","addMissingNodes","getViewPropsWithNestedProps","removeUnusedNodes","webgpuCamera","getViewNodeFor","updateStabilizedMatrix","clipRange","getClippingRange","pos","getPositionByReference","dop","getDirectionOfProjectionByReference","center","offset","scale","add","sub","stabilizedCenter","length","len","recenterThreshold","stabilizedTime","modified","count","lights","getLightsByReference","index","getSwitch","createLight","updateUBO","utime","UBO","getSendTime","_parent","getMTime","keyMats","getKeyMatrices","setArray","wcvc","scpc","pcsc","scvc","vcpc","normalMatrix","setValue","getLights","getEnvironmentTexture","getMipLevel","getEnvironmentTextureDiffuseStrength","getEnvironmentTextureSpecularStrength","tsize","getYInvertedTiledSizeAndOrigin","usize","vsize","getParallelProjection","device","getDevice","sendIfNeeded","updateSSBO","lightTimeString","i","lightPosArray","Float32Array","lightDirArray","lightColorArray","lightTypeArray","viewCoordinatePosition","getPosition","transformMat4","getDirection","getColor","getIntensity","Math","cos","radiansFromDegrees","getConeFalloff","SSBO","clearData","setNumberOfInstances","addEntry","setAllInstancesFromArray","send","scissorAndViewport","encoder","getHandle","setViewport","lowerLeftU","lowerLeftV","setScissorRect","bindUBO","renderEncoder","activateBindGroup","bindGroup","opaquePass","begin","getCommandEncoder","clear","end","getTransparent","suppressClear","clearFSQ","newInstance","setDevice","setPipelineHash","setFragmentShaderTemplate","ubo","label","setUBO","backgroundTex","getPipelineHash","getUseEnvironmentTextureAsBackground","getImageLoaded","environmentTextureHash","getTextureManager","getTextureForVTKTexture","getReady","tview","createView","setTextureViews","backgroundTexLoaded","interpolate","getInterpolate","addSampler","addressModeU","addressModeV","addressModeW","minFilter","magFilter","mipmapFilter","background","getBackgroundByReference","getUBO","transpose","mul","prepareAndDraw","translucentPass","volumeDepthRangePass","getAspectRatio","size","getSizeByReference","viewport","getViewportByReference","convertToOpenGLDepth","val","res","getTiledSizeAndOrigin","vport","tileViewPort","vpu","vpv","ndvp","normalizedDisplayToDisplay","round","vpu2","vpv2","ndvp2","getPropFromID","id","children","getPropID","getStabilizedTime","releaseGraphicsResources","selector","DEFAULT_VALUES","extend","initialValues","Object","assign","setBindables","tmpMat4","identity","obj","mtime","get","getArray","setGet"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/WebGPU/Renderer/index.js"],"sourcesContent":["import { vec3, mat4 } from 'gl-matrix';\nimport * as macro from 'vtk.js/Sources/macros';\nimport * as vtkMath from 'vtk.js/Sources/Common/Core/Math';\nimport vtkViewNode from 'vtk.js/Sources/Rendering/SceneGraph/ViewNode';\nimport vtkWebGPUBindGroup from 'vtk.js/Sources/Rendering/WebGPU/BindGroup';\nimport vtkWebGPUFullScreenQuad from 'vtk.js/Sources/Rendering/WebGPU/FullScreenQuad';\nimport vtkWebGPUStorageBuffer from 'vtk.js/Sources/Rendering/WebGPU/StorageBuffer';\nimport vtkWebGPUUniformBuffer from 'vtk.js/Sources/Rendering/WebGPU/UniformBuffer';\n\nimport { registerOverride } from 'vtk.js/Sources/Rendering/WebGPU/ViewNodeFactory';\n\nconst { vtkDebugMacro } = macro;\n\nconst clearFragColorTemplate = `\n//VTK::Renderer::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output: fragmentOutput;\n\n  var computedColor: vec4<f32> = mapperUBO.BackgroundColor;\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n`;\n\nconst clearFragTextureTemplate = `\nfn vecToRectCoord(dir: vec3<f32>) -> vec2<f32> {\n  var tau: f32 = 6.28318530718;\n  var pi: f32 = 3.14159265359;\n  var out: vec2<f32> = vec2<f32>(0.0);\n\n  out.x = atan2(dir.z, dir.x) / tau;\n  out.x += 0.5;\n\n  var phix: f32 = length(vec2(dir.x, dir.z));\n  out.y = atan2(dir.y, phix) / pi + 0.5;\n\n  return out;\n}\n\n//VTK::Renderer::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output: fragmentOutput;\n\n  var tcoord: vec4<f32> = vec4<f32>(input.vertexVC.xy, -1, 1);\n  var V: vec4<f32> = normalize(mapperUBO.FSQMatrix * tcoord); // vec2<f32>((input.tcoordVS.x - 0.5) * 2, -(input.tcoordVS.y - 0.5) * 2);\n  // textureSampleLevel gets rid of some ugly artifacts\n  var background = textureSampleLevel(EnvironmentTexture, EnvironmentTextureSampler, vecToRectCoord(V.xyz), 0);\n  var computedColor: vec4<f32> = vec4<f32>(background.rgb, 1);\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n`;\n\nconst _fsqClearMat4 = new Float64Array(16);\nconst _tNormalMat4 = new Float64Array(16);\n\n// Light type index gives either 0, 1, or 2 which indicates what type of light there is.\n// While technically, there are only spot and directional lights, within the CellArrayMapper\n// there is a third, positional light. It is technically just a variant of a spot light with\n// a cone angle of 90 or above, however certain calculations can be skipped if it is treated\n// separately.\n// The mappings are shown below:\n// 0 -> positional light\n// 1 -> directional light\n// 2 -> spot light\nfunction getLightTypeIndex(light) {\n  if (light.getPositional()) {\n    if (light.getConeAngle() >= 90) {\n      return 0;\n    }\n    return 2;\n  }\n  return 1;\n}\n\n// ----------------------------------------------------------------------------\n// vtkWebGPURenderer methods\n// ----------------------------------------------------------------------------\n/* eslint-disable no-bitwise */\n\nfunction vtkWebGPURenderer(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPURenderer');\n\n  // Builds myself.\n  publicAPI.buildPass = (prepass) => {\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n\n      model.camera = model.renderable.getActiveCamera();\n\n      publicAPI.updateLights();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.camera);\n      publicAPI.addMissingNodes(model.renderable.getViewPropsWithNestedProps());\n      publicAPI.removeUnusedNodes();\n\n      model.webgpuCamera = publicAPI.getViewNodeFor(model.camera);\n      publicAPI.updateStabilizedMatrix();\n    }\n  };\n\n  publicAPI.updateStabilizedMatrix = () => {\n    // This method is designed to help with floating point\n    // issues when rendering datasets that push the limits of\n    // resolutions on float.\n    //\n    // One of the most common cases is when the dataset is located far\n    // away from the origin relative to the clipping range we are looking\n    // at. For that case we want to perform the floating point sensitive\n    // multiplications on the CPU in double. To this end we want the\n    // vertex rendering ops to look something like\n    //\n    // Compute shifted points and load those into the VBO\n    // pointCoordsSC = WorldToStabilizedMatrix * pointCoords;\n    //\n    // In the vertex shader do the following\n    // positionVC = StabilizedToDeviceMatrix * ModelToStabilizedMatrix*vertexIn;\n    //\n    // We use two matrices because it is expensive to change the\n    // WorldToStabilized matrix as we have to reupload all pointCoords\n    // So that matrix (MCSCMatrix) is fairly static, the Stabilized to\n    // Device matrix is the one that gets updated every time the camera\n    // changes.\n    //\n    // The basic idea is that we should translate the data so that\n    // when the center of the view frustum moves a lot\n    // we recenter it. The center of the view frustum is roughly\n    // camPos + dirOfProj*(far + near)*0.5\n    const clipRange = model.camera.getClippingRange();\n    const pos = model.camera.getPositionByReference();\n    const dop = model.camera.getDirectionOfProjectionByReference();\n    const center = [];\n    const offset = [];\n    vec3.scale(offset, dop, 0.5 * (clipRange[0] + clipRange[1]));\n    vec3.add(center, pos, offset);\n    vec3.sub(offset, center, model.stabilizedCenter);\n    const length = vec3.len(offset);\n    if (length / (clipRange[1] - clipRange[0]) > model.recenterThreshold) {\n      model.stabilizedCenter = center;\n      model.stabilizedTime.modified();\n    }\n  };\n\n  publicAPI.updateLights = () => {\n    let count = 0;\n\n    const lights = model.renderable.getLightsByReference();\n    for (let index = 0; index < lights.length; ++index) {\n      if (lights[index].getSwitch() > 0.0) {\n        count++;\n      }\n    }\n\n    if (!count) {\n      vtkDebugMacro('No lights are on, creating one.');\n      model.renderable.createLight();\n    }\n\n    return count;\n  };\n\n  publicAPI.updateUBO = () => {\n    // make sure the data is up to date\n    // has the camera changed?\n    const utime = model.UBO.getSendTime();\n    if (\n      model._parent.getMTime() > utime ||\n      publicAPI.getMTime() > utime ||\n      model.camera.getMTime() > utime ||\n      model.renderable.getMTime() > utime\n    ) {\n      const keyMats = model.webgpuCamera.getKeyMatrices(publicAPI);\n      model.UBO.setArray('WCVCMatrix', keyMats.wcvc);\n      model.UBO.setArray('SCPCMatrix', keyMats.scpc);\n      model.UBO.setArray('PCSCMatrix', keyMats.pcsc);\n      model.UBO.setArray('SCVCMatrix', keyMats.scvc);\n      model.UBO.setArray('VCPCMatrix', keyMats.vcpc);\n      model.UBO.setArray('WCVCNormals', keyMats.normalMatrix);\n      model.UBO.setValue('LightCount', model.renderable.getLights().length);\n      model.UBO.setValue(\n        'MaxEnvironmentMipLevel',\n        model.renderable.getEnvironmentTexture()?.getMipLevel()\n      );\n      model.UBO.setValue(\n        'BackgroundDiffuseStrength',\n        model.renderable.getEnvironmentTextureDiffuseStrength()\n      );\n      model.UBO.setValue(\n        'BackgroundSpecularStrength',\n        model.renderable.getEnvironmentTextureSpecularStrength()\n      );\n\n      const tsize = publicAPI.getYInvertedTiledSizeAndOrigin();\n      model.UBO.setArray('viewportSize', [tsize.usize, tsize.vsize]);\n      model.UBO.setValue(\n        'cameraParallel',\n        model.camera.getParallelProjection()\n      );\n\n      const device = model._parent.getDevice();\n      model.UBO.sendIfNeeded(device);\n    }\n  };\n\n  publicAPI.updateSSBO = () => {\n    const lights = model.renderable.getLights();\n    const keyMats = model.webgpuCamera.getKeyMatrices(publicAPI);\n\n    let lightTimeString = `${model.renderable.getMTime()}`;\n    for (let i = 0; i < lights.length; i++) {\n      lightTimeString += lights[i].getMTime();\n    }\n\n    if (lightTimeString !== model.lightTimeString) {\n      const lightPosArray = new Float32Array(lights.length * 4);\n      const lightDirArray = new Float32Array(lights.length * 4);\n      const lightColorArray = new Float32Array(lights.length * 4);\n      const lightTypeArray = new Float32Array(lights.length * 4);\n\n      for (let i = 0; i < lights.length; i++) {\n        const offset = i * 4;\n\n        // Position\n        const viewCoordinatePosition = lights[i].getPosition();\n        vec3.transformMat4(\n          viewCoordinatePosition,\n          viewCoordinatePosition,\n          keyMats.wcvc\n        );\n        // viewCoordinatePosition\n        lightPosArray[offset] = viewCoordinatePosition[0];\n        lightPosArray[offset + 1] = viewCoordinatePosition[1];\n        lightPosArray[offset + 2] = viewCoordinatePosition[2];\n        lightPosArray[offset + 3] = 0;\n\n        // Rotation (All are negative to correct for -Z being forward)\n        lightDirArray[offset] = -lights[i].getDirection()[0];\n        lightDirArray[offset + 1] = -lights[i].getDirection()[1];\n        lightDirArray[offset + 2] = -lights[i].getDirection()[2];\n        lightDirArray[offset + 3] = 0;\n\n        // Color\n        lightColorArray[offset] = lights[i].getColor()[0];\n        lightColorArray[offset + 1] = lights[i].getColor()[1];\n        lightColorArray[offset + 2] = lights[i].getColor()[2];\n        lightColorArray[offset + 3] = lights[i].getIntensity() * 5; // arbitrary multiplication to fix the dullness of low value PBR lights\n\n        // Type\n        lightTypeArray[offset] = getLightTypeIndex(lights[i]); // Type\n        lightTypeArray[offset + 1] = Math.cos(\n          vtkMath.radiansFromDegrees(lights[i].getConeAngle())\n        ); // Inner Phi, should probably do some check on these to make sure they dont excede limits\n        lightTypeArray[offset + 2] = Math.cos(\n          vtkMath.radiansFromDegrees(\n            lights[i].getConeAngle() + lights[i].getConeFalloff()\n          )\n        ); // Outer Phi\n        lightTypeArray[offset + 3] = 0;\n      }\n\n      // Im not sure how correct this is, but this is what the example does\n      // https://kitware.github.io/vtk-js/api/Rendering_WebGPU_VolumePassFSQ.html\n      model.SSBO.clearData();\n      model.SSBO.setNumberOfInstances(lights.length);\n\n      model.SSBO.addEntry('LightPos', 'vec4<f32>'); // Position\n      model.SSBO.addEntry('LightDir', 'vec4<f32>'); // Direction\n      model.SSBO.addEntry('LightColor', 'vec4<f32>'); // Color (r, g, b, intensity)\n      model.SSBO.addEntry('LightData', 'vec4<f32>'); // Other data (type, etc, etc, etc)\n\n      model.SSBO.setAllInstancesFromArray('LightPos', lightPosArray);\n      model.SSBO.setAllInstancesFromArray('LightDir', lightDirArray);\n      model.SSBO.setAllInstancesFromArray('LightColor', lightColorArray);\n      model.SSBO.setAllInstancesFromArray('LightData', lightTypeArray);\n\n      const device = model._parent.getDevice();\n      model.SSBO.send(device);\n    }\n\n    model.lightTimeString = lightTimeString;\n  };\n\n  publicAPI.scissorAndViewport = (encoder) => {\n    const tsize = publicAPI.getYInvertedTiledSizeAndOrigin();\n    encoder\n      .getHandle()\n      .setViewport(\n        tsize.lowerLeftU,\n        tsize.lowerLeftV,\n        tsize.usize,\n        tsize.vsize,\n        0.0,\n        1.0\n      );\n    // set scissor\n    encoder\n      .getHandle()\n      .setScissorRect(\n        tsize.lowerLeftU,\n        tsize.lowerLeftV,\n        tsize.usize,\n        tsize.vsize\n      );\n  };\n\n  publicAPI.bindUBO = (renderEncoder) => {\n    renderEncoder.activateBindGroup(model.bindGroup);\n  };\n\n  // Renders myself\n  publicAPI.opaquePass = (prepass) => {\n    if (prepass) {\n      model.renderEncoder.begin(model._parent.getCommandEncoder());\n      publicAPI.updateUBO();\n      publicAPI.updateSSBO();\n    } else {\n      publicAPI.scissorAndViewport(model.renderEncoder);\n      publicAPI.clear();\n      model.renderEncoder.end();\n    }\n  };\n\n  publicAPI.clear = () => {\n    if (model.renderable.getTransparent() || model.suppressClear) {\n      return;\n    }\n\n    const device = model._parent.getDevice();\n    // Normal Solid Color\n    if (!model.clearFSQ) {\n      model.clearFSQ = vtkWebGPUFullScreenQuad.newInstance();\n      model.clearFSQ.setDevice(device);\n      model.clearFSQ.setPipelineHash('clearfsq');\n      model.clearFSQ.setFragmentShaderTemplate(clearFragColorTemplate);\n      const ubo = vtkWebGPUUniformBuffer.newInstance({ label: 'mapperUBO' });\n      ubo.addEntry('FSQMatrix', 'mat4x4<f32>');\n      ubo.addEntry('BackgroundColor', 'vec4<f32>');\n      model.clearFSQ.setUBO(ubo);\n\n      model.backgroundTex = model.renderable.getEnvironmentTexture();\n    }\n    // Textured Background\n    if (\n      model.clearFSQ.getPipelineHash() !== 'clearfsqwithtexture' &&\n      model.renderable.getUseEnvironmentTextureAsBackground() &&\n      model.backgroundTex?.getImageLoaded()\n    ) {\n      model.clearFSQ.setFragmentShaderTemplate(clearFragTextureTemplate);\n      const ubo = vtkWebGPUUniformBuffer.newInstance({ label: 'mapperUBO' });\n      ubo.addEntry('FSQMatrix', 'mat4x4<f32>');\n      ubo.addEntry('BackgroundColor', 'vec4<f32>');\n      model.clearFSQ.setUBO(ubo);\n\n      const environmentTextureHash = device\n        .getTextureManager()\n        .getTextureForVTKTexture(model.backgroundTex);\n      if (environmentTextureHash.getReady()) {\n        const tview = environmentTextureHash.createView(`EnvironmentTexture`);\n        model.clearFSQ.setTextureViews([tview]);\n        model.backgroundTexLoaded = true;\n        const interpolate = model.backgroundTex.getInterpolate()\n          ? 'linear'\n          : 'nearest';\n        tview.addSampler(device, {\n          addressModeU: 'repeat',\n          addressModeV: 'clamp-to-edge',\n          addressModeW: 'repeat',\n          minFilter: interpolate,\n          magFilter: interpolate,\n          mipmapFilter: 'linear',\n        });\n      }\n      model.clearFSQ.setPipelineHash('clearfsqwithtexture');\n    } else if (\n      model.clearFSQ.getPipelineHash() === 'clearfsqwithtexture' &&\n      !model.renderable.getUseEnvironmentTextureAsBackground()\n    ) {\n      // In case the mode is changed at runtime\n      model.clearFSQ = vtkWebGPUFullScreenQuad.newInstance();\n      model.clearFSQ.setDevice(device);\n      model.clearFSQ.setPipelineHash('clearfsq');\n      model.clearFSQ.setFragmentShaderTemplate(clearFragColorTemplate);\n      const ubo = vtkWebGPUUniformBuffer.newInstance({ label: 'mapperUBO' });\n      ubo.addEntry('FSQMatrix', 'mat4x4<f32>');\n      ubo.addEntry('BackgroundColor', 'vec4<f32>');\n      model.clearFSQ.setUBO(ubo);\n    }\n\n    const keyMats = model.webgpuCamera.getKeyMatrices(publicAPI);\n    const background = model.renderable.getBackgroundByReference();\n\n    model.clearFSQ.getUBO().setArray('BackgroundColor', background);\n    mat4.transpose(_tNormalMat4, keyMats.normalMatrix);\n    mat4.mul(_fsqClearMat4, keyMats.scvc, keyMats.pcsc);\n    mat4.mul(_fsqClearMat4, _tNormalMat4, _fsqClearMat4);\n    model.clearFSQ.getUBO().setArray('FSQMatrix', _fsqClearMat4);\n\n    model.clearFSQ.getUBO().sendIfNeeded(device);\n    model.clearFSQ.prepareAndDraw(model.renderEncoder);\n  };\n\n  publicAPI.translucentPass = (prepass) => {\n    if (prepass) {\n      model.renderEncoder.begin(model._parent.getCommandEncoder());\n    } else {\n      publicAPI.scissorAndViewport(model.renderEncoder);\n      model.renderEncoder.end();\n    }\n  };\n\n  publicAPI.volumeDepthRangePass = (prepass) => {\n    if (prepass) {\n      model.renderEncoder.begin(model._parent.getCommandEncoder());\n    } else {\n      publicAPI.scissorAndViewport(model.renderEncoder);\n      model.renderEncoder.end();\n    }\n  };\n\n  publicAPI.getAspectRatio = () => {\n    const size = model._parent.getSizeByReference();\n    const viewport = model.renderable.getViewportByReference();\n    return (\n      (size[0] * (viewport[2] - viewport[0])) /\n      ((viewport[3] - viewport[1]) * size[1])\n    );\n  };\n\n  publicAPI.convertToOpenGLDepth = (val) =>\n    model.webgpuCamera.convertToOpenGLDepth(val);\n\n  publicAPI.getYInvertedTiledSizeAndOrigin = () => {\n    const res = publicAPI.getTiledSizeAndOrigin();\n    const size = model._parent.getSizeByReference();\n    res.lowerLeftV = size[1] - res.vsize - res.lowerLeftV;\n    return res;\n  };\n\n  publicAPI.getTiledSizeAndOrigin = () => {\n    const vport = model.renderable.getViewportByReference();\n\n    // if there is no window assume 0 1\n    const tileViewPort = [0.0, 0.0, 1.0, 1.0];\n\n    // find the lower left corner of the viewport, taking into account the\n    // lower left boundary of this tile\n    const vpu = vport[0] - tileViewPort[0];\n    const vpv = vport[1] - tileViewPort[1];\n\n    // store the result as a pixel value\n    const ndvp = model._parent.normalizedDisplayToDisplay(vpu, vpv);\n    const lowerLeftU = Math.round(ndvp[0]);\n    const lowerLeftV = Math.round(ndvp[1]);\n\n    // find the upper right corner of the viewport, taking into account the\n    // lower left boundary of this tile\n    const vpu2 = vport[2] - tileViewPort[0];\n    const vpv2 = vport[3] - tileViewPort[1];\n    const ndvp2 = model._parent.normalizedDisplayToDisplay(vpu2, vpv2);\n\n    // now compute the size of the intersection of the viewport with the\n    // current tile\n    let usize = Math.round(ndvp2[0]) - lowerLeftU;\n    let vsize = Math.round(ndvp2[1]) - lowerLeftV;\n\n    if (usize < 0) {\n      usize = 0;\n    }\n    if (vsize < 0) {\n      vsize = 0;\n    }\n\n    return { usize, vsize, lowerLeftU, lowerLeftV };\n  };\n\n  publicAPI.getPropFromID = (id) => {\n    for (let i = 0; i < model.children.length; i++) {\n      const res = model.children[i].getPropID\n        ? model.children[i].getPropID()\n        : -1;\n      if (res === id) {\n        return model.children[i];\n      }\n    }\n    return null;\n  };\n\n  publicAPI.getStabilizedTime = () => model.stabilizedTime.getMTime();\n\n  publicAPI.releaseGraphicsResources = () => {\n    if (model.selector !== null) {\n      model.selector.releaseGraphicsResources();\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  bindGroup: null,\n  selector: null,\n  renderEncoder: null,\n  recenterThreshold: 20.0,\n  suppressClear: false,\n  stabilizedCenter: [0.0, 0.0, 0.0],\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n\n  // UBO\n  model.UBO = vtkWebGPUUniformBuffer.newInstance({ label: 'rendererUBO' });\n  model.UBO.addEntry('WCVCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('SCPCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('PCSCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('SCVCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('VCPCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('WCVCNormals', 'mat4x4<f32>');\n  model.UBO.addEntry('viewportSize', 'vec2<f32>');\n  model.UBO.addEntry('LightCount', 'i32');\n  model.UBO.addEntry('MaxEnvironmentMipLevel', 'f32');\n  model.UBO.addEntry('BackgroundDiffuseStrength', 'f32');\n  model.UBO.addEntry('BackgroundSpecularStrength', 'f32');\n  model.UBO.addEntry('cameraParallel', 'u32');\n\n  // SSBO (Light data)\n  model.SSBO = vtkWebGPUStorageBuffer.newInstance({\n    label: 'rendererLightSSBO',\n  });\n  model.lightTimeString = '';\n\n  model.bindGroup = vtkWebGPUBindGroup.newInstance({ label: 'rendererBG' });\n  model.bindGroup.setBindables([model.UBO, model.SSBO]);\n\n  model.tmpMat4 = mat4.identity(new Float64Array(16));\n\n  model.stabilizedTime = {};\n  macro.obj(model.stabilizedTime, { mtime: 0 });\n\n  // Build VTK API\n  macro.get(publicAPI, model, ['bindGroup', 'stabilizedTime']);\n  macro.getArray(publicAPI, model, ['stabilizedCenter']);\n  macro.setGet(publicAPI, model, [\n    'renderEncoder',\n    'selector',\n    'suppressClear',\n    'UBO',\n  ]);\n\n  // Object methods\n  vtkWebGPURenderer(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkWebGPURenderer');\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend };\n\n// Register ourself to WebGPU backend if imported\nregisterOverride('vtkRenderer', newInstance);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}