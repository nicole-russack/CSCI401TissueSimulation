{"ast":null,"code":"import macro from 'vtk.js/Sources/macros';\nimport * as vtkMath from 'vtk.js/Sources/Common/Core/Math';\nimport Constants from 'vtk.js/Sources/Rendering/Core/RenderWindowInteractor/Constants';\nconst {\n  Device,\n  Input\n} = Constants;\nconst {\n  vtkWarningMacro,\n  vtkErrorMacro,\n  normalizeWheel,\n  vtkOnceErrorMacro\n} = macro; // ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nconst EMPTY_MOUSE_EVENT = new MouseEvent('');\nconst deviceInputMap = {\n  'xr-standard': [Input.Trigger, Input.Grip, Input.TrackPad, Input.Thumbstick, Input.A, Input.B]\n};\nconst handledEvents = ['StartAnimation', 'Animation', 'EndAnimation', 'PointerEnter', 'PointerLeave', 'MouseEnter', 'MouseLeave', 'StartMouseMove', 'MouseMove', 'EndMouseMove', 'LeftButtonPress', 'LeftButtonRelease', 'MiddleButtonPress', 'MiddleButtonRelease', 'RightButtonPress', 'RightButtonRelease', 'KeyPress', 'KeyDown', 'KeyUp', 'StartMouseWheel', 'MouseWheel', 'EndMouseWheel', 'StartPinch', 'Pinch', 'EndPinch', 'StartPan', 'Pan', 'EndPan', 'StartRotate', 'Rotate', 'EndRotate', 'Button3D', 'Move3D', 'StartPointerLock', 'EndPointerLock', 'StartInteraction', 'Interaction', 'EndInteraction', 'AnimationFrameRateUpdate'];\n\nfunction preventDefault(event) {\n  if (event.cancelable) {\n    event.preventDefault();\n  }\n}\n\nfunction pointerCacheToPositions(cache) {\n  const positions = Object.create(null);\n  cache.forEach(_ref => {\n    let {\n      pointerId,\n      position\n    } = _ref;\n    positions[pointerId] = position;\n  });\n  return positions;\n} // ----------------------------------------------------------------------------\n// vtkRenderWindowInteractor methods\n// ----------------------------------------------------------------------------\n\n\nfunction vtkRenderWindowInteractor(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkRenderWindowInteractor'); // Initialize list of requesters\n\n  const animationRequesters = new Set(); // map from pointerId to { pointerId: number, position: [x, y] }\n\n  const pointerCache = new Map(); // Public API methods\n  //----------------------------------------------------------------------\n\n  publicAPI.start = () => {\n    // Let the compositing handle the event loop if it wants to.\n    // if (publicAPI.HasObserver(vtkCommand::StartEvent) && !publicAPI.HandleEventLoop) {\n    //   publicAPI.invokeEvent({ type: 'StartEvent' });\n    //   return;\n    // }\n    // As a convenience, initialize if we aren't initialized yet.\n    if (!model.initialized) {\n      publicAPI.initialize();\n\n      if (!model.initialized) {\n        return;\n      }\n    } // Pass execution to the subclass which will run the event loop,\n    // this will not return until TerminateApp is called.\n\n\n    publicAPI.startEventLoop();\n  }; //----------------------------------------------------------------------\n\n\n  publicAPI.setRenderWindow = aren => {\n    vtkErrorMacro('you want to call setView(view) instead of setRenderWindow on a vtk.js interactor');\n  }; //----------------------------------------------------------------------\n\n\n  publicAPI.setInteractorStyle = style => {\n    if (model.interactorStyle !== style) {\n      if (model.interactorStyle != null) {\n        model.interactorStyle.setInteractor(null);\n      }\n\n      model.interactorStyle = style;\n\n      if (model.interactorStyle != null) {\n        if (model.interactorStyle.getInteractor() !== publicAPI) {\n          model.interactorStyle.setInteractor(publicAPI);\n        }\n      }\n    }\n  }; //---------------------------------------------------------------------\n\n\n  publicAPI.initialize = () => {\n    model.initialized = true;\n    publicAPI.enable();\n    publicAPI.render();\n  };\n\n  publicAPI.enable = () => publicAPI.setEnabled(true);\n\n  publicAPI.disable = () => publicAPI.setEnabled(false);\n\n  publicAPI.startEventLoop = () => vtkWarningMacro('empty event loop');\n\n  function updateCurrentRenderer(x, y) {\n    if (!model._forcedRenderer) {\n      model.currentRenderer = publicAPI.findPokedRenderer(x, y);\n    }\n  }\n\n  publicAPI.getCurrentRenderer = () => {\n    if (model.currentRenderer) {\n      return model.currentRenderer;\n    }\n\n    updateCurrentRenderer(0, 0);\n    return model.currentRenderer;\n  };\n\n  function getScreenEventPositionFor(source) {\n    const canvas = model._view.getCanvas();\n\n    const bounds = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / bounds.width;\n    const scaleY = canvas.height / bounds.height;\n    const position = {\n      x: scaleX * (source.clientX - bounds.left),\n      y: scaleY * (bounds.height - source.clientY + bounds.top),\n      z: 0\n    }; // if multitouch, do not update the current renderer\n\n    if (pointerCache.size <= 1 || !model.currentRenderer) {\n      updateCurrentRenderer(position.x, position.y);\n    }\n\n    return position;\n  }\n\n  function getModifierKeysFor(event) {\n    return {\n      controlKey: event.ctrlKey,\n      altKey: event.altKey,\n      shiftKey: event.shiftKey\n    };\n  }\n\n  function getKeysFor(event) {\n    const modifierKeys = getModifierKeysFor(event);\n    const keys = {\n      key: event.key,\n      keyCode: event.charCode,\n      ...modifierKeys\n    };\n    return keys;\n  }\n\n  function getDeviceTypeFor(event) {\n    return event.pointerType || '';\n  }\n\n  publicAPI.bindEvents = container => {\n    model.container = container;\n    container.addEventListener('contextmenu', preventDefault);\n    container.addEventListener('wheel', publicAPI.handleWheel);\n    container.addEventListener('DOMMouseScroll', publicAPI.handleWheel);\n    container.addEventListener('pointerenter', publicAPI.handlePointerEnter);\n    container.addEventListener('pointerleave', publicAPI.handlePointerLeave);\n    container.addEventListener('pointermove', publicAPI.handlePointerMove, {\n      passive: false\n    });\n    container.addEventListener('pointerdown', publicAPI.handlePointerDown, {\n      passive: false\n    });\n    container.addEventListener('pointerup', publicAPI.handlePointerUp);\n    container.addEventListener('pointercancel', publicAPI.handlePointerCancel);\n    document.addEventListener('keypress', publicAPI.handleKeyPress);\n    document.addEventListener('keydown', publicAPI.handleKeyDown);\n    document.addEventListener('keyup', publicAPI.handleKeyUp);\n    document.addEventListener('pointerlockchange', publicAPI.handlePointerLockChange); // using touchAction is more performant than preventDefault\n    // in a touchstart handler.\n\n    container.style.touchAction = 'none';\n    container.style.userSelect = 'none'; // disables tap highlight for when cursor is pointer\n\n    container.style.webkitTapHighlightColor = 'rgba(0,0,0,0)';\n  };\n\n  publicAPI.unbindEvents = () => {\n    const {\n      container\n    } = model;\n    container.removeEventListener('contextmenu', preventDefault);\n    container.removeEventListener('wheel', publicAPI.handleWheel);\n    container.removeEventListener('DOMMouseScroll', publicAPI.handleWheel);\n    container.removeEventListener('pointerenter', publicAPI.handlePointerEnter);\n    container.removeEventListener('pointerleave', publicAPI.handlePointerLeave);\n    container.removeEventListener('pointermove', publicAPI.handlePointerMove, {\n      passive: false\n    });\n    container.removeEventListener('pointerdown', publicAPI.handlePointerDown, {\n      passive: false\n    });\n    container.removeEventListener('pointerup', publicAPI.handlePointerUp);\n    container.removeEventListener('pointercancel', publicAPI.handlePointerCancel);\n    document.removeEventListener('keypress', publicAPI.handleKeyPress);\n    document.removeEventListener('keydown', publicAPI.handleKeyDown);\n    document.removeEventListener('keyup', publicAPI.handleKeyUp);\n    document.removeEventListener('pointerlockchange', publicAPI.handlePointerLockChange);\n    model.container = null;\n    pointerCache.clear();\n  };\n\n  publicAPI.handleKeyPress = event => {\n    const data = getKeysFor(event);\n    publicAPI.keyPressEvent(data);\n  };\n\n  publicAPI.handleKeyDown = event => {\n    const data = getKeysFor(event);\n    publicAPI.keyDownEvent(data);\n  };\n\n  publicAPI.handleKeyUp = event => {\n    const data = getKeysFor(event);\n    publicAPI.keyUpEvent(data);\n  };\n\n  publicAPI.handlePointerEnter = event => {\n    const callData = { ...getModifierKeysFor(event),\n      position: getScreenEventPositionFor(event),\n      deviceType: getDeviceTypeFor(event)\n    };\n    publicAPI.pointerEnterEvent(callData);\n\n    if (callData.deviceType === 'mouse') {\n      publicAPI.mouseEnterEvent(callData);\n    }\n  };\n\n  publicAPI.handlePointerLeave = event => {\n    const callData = { ...getModifierKeysFor(event),\n      position: getScreenEventPositionFor(event),\n      deviceType: getDeviceTypeFor(event)\n    };\n    publicAPI.pointerLeaveEvent(callData);\n\n    if (callData.deviceType === 'mouse') {\n      publicAPI.mouseLeaveEvent(callData);\n    }\n  };\n\n  publicAPI.handlePointerDown = event => {\n    if (event.button > 2 || publicAPI.isPointerLocked()) {\n      // ignore events from extra mouse buttons such as `back` and `forward`\n      return;\n    }\n\n    if (model.preventDefaultOnPointerDown) {\n      preventDefault(event);\n    }\n\n    if (event.target.hasPointerCapture(event.pointerId)) {\n      event.target.releasePointerCapture(event.pointerId);\n    }\n\n    model.container.setPointerCapture(event.pointerId);\n\n    if (pointerCache.has(event.pointerId)) {\n      vtkWarningMacro('[RenderWindowInteractor] duplicate pointerId detected');\n    }\n\n    pointerCache.set(event.pointerId, {\n      pointerId: event.pointerId,\n      position: getScreenEventPositionFor(event)\n    });\n\n    switch (event.pointerType) {\n      case 'pen':\n      case 'touch':\n        publicAPI.handleTouchStart(event);\n        break;\n\n      case 'mouse':\n      default:\n        publicAPI.handleMouseDown(event);\n        break;\n    }\n  };\n\n  publicAPI.handlePointerUp = event => {\n    if (pointerCache.has(event.pointerId)) {\n      if (model.preventDefaultOnPointerUp) {\n        preventDefault(event);\n      }\n\n      pointerCache.delete(event.pointerId);\n      model.container.releasePointerCapture(event.pointerId);\n\n      switch (event.pointerType) {\n        case 'pen':\n        case 'touch':\n          publicAPI.handleTouchEnd(event);\n          break;\n\n        case 'mouse':\n        default:\n          publicAPI.handleMouseUp(event);\n          break;\n      }\n    }\n  };\n\n  publicAPI.handlePointerCancel = event => {\n    if (pointerCache.has(event.pointerId)) {\n      pointerCache.delete(event.pointerId);\n\n      switch (event.pointerType) {\n        case 'pen':\n        case 'touch':\n          publicAPI.handleTouchEnd(event);\n          break;\n\n        case 'mouse':\n        default:\n          publicAPI.handleMouseUp(event);\n          break;\n      }\n    }\n  };\n\n  publicAPI.handlePointerMove = event => {\n    if (pointerCache.has(event.pointerId)) {\n      const pointer = pointerCache.get(event.pointerId);\n      pointer.position = getScreenEventPositionFor(event);\n    }\n\n    switch (event.pointerType) {\n      case 'pen':\n      case 'touch':\n        publicAPI.handleTouchMove(event);\n        break;\n\n      case 'mouse':\n      default:\n        publicAPI.handleMouseMove(event);\n        break;\n    }\n  };\n\n  publicAPI.handleMouseDown = event => {\n    const callData = { ...getModifierKeysFor(event),\n      position: getScreenEventPositionFor(event),\n      deviceType: getDeviceTypeFor(event)\n    };\n\n    switch (event.button) {\n      case 0:\n        publicAPI.leftButtonPressEvent(callData);\n        break;\n\n      case 1:\n        publicAPI.middleButtonPressEvent(callData);\n        break;\n\n      case 2:\n        publicAPI.rightButtonPressEvent(callData);\n        break;\n\n      default:\n        vtkErrorMacro(`Unknown mouse button pressed: ${event.button}`);\n        break;\n    }\n  }; //----------------------------------------------------------------------\n\n\n  publicAPI.requestPointerLock = () => {\n    if (model.container) {\n      model.container.requestPointerLock();\n    }\n  }; //----------------------------------------------------------------------\n\n\n  publicAPI.exitPointerLock = () => document.exitPointerLock(); //----------------------------------------------------------------------\n\n\n  publicAPI.isPointerLocked = () => !!model.container && document.pointerLockElement === model.container; //----------------------------------------------------------------------\n\n\n  publicAPI.handlePointerLockChange = () => {\n    if (publicAPI.isPointerLocked()) {\n      publicAPI.startPointerLockEvent();\n    } else {\n      publicAPI.endPointerLockEvent();\n    }\n  }; //----------------------------------------------------------------------\n\n\n  function forceRender() {\n    if (model._view && model.enabled && model.enableRender) {\n      model.inRender = true;\n\n      model._view.traverseAllPasses();\n\n      model.inRender = false;\n    } // outside the above test so that third-party code can redirect\n    // the render to the appropriate class\n\n\n    publicAPI.invokeRenderEvent();\n  }\n\n  publicAPI.requestAnimation = requestor => {\n    if (requestor === undefined) {\n      vtkErrorMacro(`undefined requester, can not start animating`);\n      return;\n    }\n\n    if (animationRequesters.has(requestor)) {\n      vtkWarningMacro(`requester is already registered for animating`);\n      return;\n    }\n\n    animationRequesters.add(requestor);\n\n    if (!model.animationRequest && animationRequesters.size === 1 && !model.xrAnimation) {\n      model._animationStartTime = Date.now();\n      model._animationFrameCount = 0;\n      model.animationRequest = requestAnimationFrame(publicAPI.handleAnimation);\n      publicAPI.startAnimationEvent();\n    }\n  }; // continue animating for at least the specified duration of\n  // milliseconds.\n\n\n  publicAPI.extendAnimation = duration => {\n    const newEnd = Date.now() + duration;\n    model._animationExtendedEnd = Math.max(model._animationExtendedEnd, newEnd);\n\n    if (!model.animationRequest && animationRequesters.size === 0 && !model.xrAnimation) {\n      model._animationStartTime = Date.now();\n      model._animationFrameCount = 0;\n      model.animationRequest = requestAnimationFrame(publicAPI.handleAnimation);\n      publicAPI.startAnimationEvent();\n    }\n  };\n\n  publicAPI.isAnimating = () => model.xrAnimation || model.animationRequest !== null;\n\n  publicAPI.cancelAnimation = function (requestor) {\n    let skipWarning = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (!animationRequesters.has(requestor)) {\n      if (!skipWarning) {\n        const requestStr = requestor && requestor.getClassName ? requestor.getClassName() : requestor;\n        vtkWarningMacro(`${requestStr} did not request an animation`);\n      }\n\n      return;\n    }\n\n    animationRequesters.delete(requestor);\n\n    if (model.animationRequest && animationRequesters.size === 0 && Date.now() > model._animationExtendedEnd) {\n      cancelAnimationFrame(model.animationRequest);\n      model.animationRequest = null;\n      publicAPI.endAnimationEvent();\n      publicAPI.render();\n    }\n  };\n\n  publicAPI.switchToXRAnimation = () => {\n    // cancel existing animation if any\n    if (model.animationRequest) {\n      cancelAnimationFrame(model.animationRequest);\n      model.animationRequest = null;\n    }\n\n    model.xrAnimation = true;\n  };\n\n  publicAPI.returnFromXRAnimation = () => {\n    model.xrAnimation = false;\n\n    if (animationRequesters.size !== 0) {\n      model.recentAnimationFrameRate = 10.0;\n      model.animationRequest = requestAnimationFrame(publicAPI.handleAnimation);\n    }\n  };\n\n  publicAPI.updateXRGamepads = (xrSession, xrFrame, xrRefSpace) => {\n    // watch for when buttons change state and fire events\n    xrSession.inputSources.forEach(inputSource => {\n      const gripPose = inputSource.gripSpace == null ? null : xrFrame.getPose(inputSource.gripSpace, xrRefSpace);\n      const gp = inputSource.gamepad;\n      const hand = inputSource.handedness;\n\n      if (gp) {\n        if (!(gp.index in model.lastGamepadValues)) {\n          model.lastGamepadValues[gp.index] = {\n            left: {\n              buttons: {}\n            },\n            right: {\n              buttons: {}\n            },\n            none: {\n              buttons: {}\n            }\n          };\n        }\n\n        for (let b = 0; b < gp.buttons.length; ++b) {\n          if (!(b in model.lastGamepadValues[gp.index][hand].buttons)) {\n            model.lastGamepadValues[gp.index][hand].buttons[b] = false;\n          }\n\n          if (model.lastGamepadValues[gp.index][hand].buttons[b] !== gp.buttons[b].pressed && gripPose != null) {\n            publicAPI.button3DEvent({\n              gamepad: gp,\n              position: gripPose.transform.position,\n              orientation: gripPose.transform.orientation,\n              pressed: gp.buttons[b].pressed,\n              device: inputSource.handedness === 'left' ? Device.LeftController : Device.RightController,\n              input: deviceInputMap[gp.mapping] && deviceInputMap[gp.mapping][b] ? deviceInputMap[gp.mapping][b] : Input.Trigger\n            });\n            model.lastGamepadValues[gp.index][hand].buttons[b] = gp.buttons[b].pressed;\n          }\n\n          if (model.lastGamepadValues[gp.index][hand].buttons[b] && gripPose != null) {\n            publicAPI.move3DEvent({\n              gamepad: gp,\n              position: gripPose.transform.position,\n              orientation: gripPose.transform.orientation,\n              device: inputSource.handedness === 'left' ? Device.LeftController : Device.RightController\n            });\n          }\n        }\n      }\n    });\n  };\n\n  publicAPI.handleMouseMove = event => {\n    const callData = { ...getModifierKeysFor(event),\n      position: getScreenEventPositionFor(event),\n      deviceType: getDeviceTypeFor(event)\n    };\n\n    if (model.moveTimeoutID === 0) {\n      publicAPI.startMouseMoveEvent(callData);\n    } else {\n      publicAPI.mouseMoveEvent(callData);\n      clearTimeout(model.moveTimeoutID);\n    } // start a timer to keep us animating while we get mouse move events\n\n\n    model.moveTimeoutID = setTimeout(() => {\n      publicAPI.endMouseMoveEvent();\n      model.moveTimeoutID = 0;\n    }, 200);\n  };\n\n  publicAPI.handleAnimation = () => {\n    const currTime = Date.now();\n    model._animationFrameCount++;\n\n    if (currTime - model._animationStartTime > 1000.0 && model._animationFrameCount > 1) {\n      model.recentAnimationFrameRate = 1000.0 * (model._animationFrameCount - 1) / (currTime - model._animationStartTime);\n      model.lastFrameTime = 1.0 / model.recentAnimationFrameRate;\n      publicAPI.animationFrameRateUpdateEvent();\n      model._animationStartTime = currTime;\n      model._animationFrameCount = 1;\n    }\n\n    publicAPI.animationEvent();\n    forceRender();\n\n    if (animationRequesters.size > 0 || Date.now() < model._animationExtendedEnd) {\n      model.animationRequest = requestAnimationFrame(publicAPI.handleAnimation);\n    } else {\n      cancelAnimationFrame(model.animationRequest);\n      model.animationRequest = null;\n      publicAPI.endAnimationEvent();\n      publicAPI.render();\n    }\n  };\n\n  publicAPI.handleWheel = event => {\n    preventDefault(event);\n    /**\n     * wheel event values can vary significantly across browsers, platforms\n     * and devices [1]. `normalizeWheel` uses facebook's solution from their\n     * fixed-data-table repository [2].\n     *\n     * [1] https://developer.mozilla.org/en-US/docs/Web/Events/mousewheel\n     * [2] https://github.com/facebookarchive/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js\n     *\n     * This code will return an object with properties:\n     *\n     *   spinX   -- normalized spin speed (use for zoom) - x plane\n     *   spinY   -- \" - y plane\n     *   pixelX  -- normalized distance (to pixels) - x plane\n     *   pixelY  -- \" - y plane\n     *\n     */\n\n    const callData = { ...normalizeWheel(event),\n      ...getModifierKeysFor(event),\n      position: getScreenEventPositionFor(event),\n      deviceType: getDeviceTypeFor(event)\n    };\n\n    if (model.wheelTimeoutID === 0) {\n      publicAPI.startMouseWheelEvent(callData);\n    } else {\n      publicAPI.mouseWheelEvent(callData);\n      clearTimeout(model.wheelTimeoutID);\n    } // start a timer to keep us animating while we get wheel events\n\n\n    model.wheelTimeoutID = setTimeout(() => {\n      publicAPI.extendAnimation(600);\n      publicAPI.endMouseWheelEvent();\n      model.wheelTimeoutID = 0;\n    }, 200);\n  };\n\n  publicAPI.handleMouseUp = event => {\n    const callData = { ...getModifierKeysFor(event),\n      position: getScreenEventPositionFor(event),\n      deviceType: getDeviceTypeFor(event)\n    };\n\n    switch (event.button) {\n      case 0:\n        publicAPI.leftButtonReleaseEvent(callData);\n        break;\n\n      case 1:\n        publicAPI.middleButtonReleaseEvent(callData);\n        break;\n\n      case 2:\n        publicAPI.rightButtonReleaseEvent(callData);\n        break;\n\n      default:\n        vtkErrorMacro(`Unknown mouse button released: ${event.button}`);\n        break;\n    }\n  };\n\n  publicAPI.handleTouchStart = event => {\n    const pointers = [...pointerCache.values()]; // If multitouch\n\n    if (model.recognizeGestures && pointers.length > 1) {\n      const positions = pointerCacheToPositions(pointerCache); // did we just transition to multitouch?\n\n      if (pointers.length === 2) {\n        const callData = { ...getModifierKeysFor(EMPTY_MOUSE_EVENT),\n          position: pointers[0].position,\n          deviceType: getDeviceTypeFor(event)\n        };\n        publicAPI.leftButtonReleaseEvent(callData);\n      } // handle the gesture\n\n\n      publicAPI.recognizeGesture('TouchStart', positions);\n    } else if (pointers.length === 1) {\n      const callData = { ...getModifierKeysFor(EMPTY_MOUSE_EVENT),\n        position: getScreenEventPositionFor(event),\n        deviceType: getDeviceTypeFor(event)\n      };\n      publicAPI.leftButtonPressEvent(callData);\n    }\n  };\n\n  publicAPI.handleTouchMove = event => {\n    const pointers = [...pointerCache.values()];\n\n    if (model.recognizeGestures && pointers.length > 1) {\n      const positions = pointerCacheToPositions(pointerCache);\n      publicAPI.recognizeGesture('TouchMove', positions);\n    } else if (pointers.length === 1) {\n      const callData = { ...getModifierKeysFor(EMPTY_MOUSE_EVENT),\n        position: pointers[0].position,\n        deviceType: getDeviceTypeFor(event)\n      };\n      publicAPI.mouseMoveEvent(callData);\n    }\n  };\n\n  publicAPI.handleTouchEnd = event => {\n    const pointers = [...pointerCache.values()];\n\n    if (model.recognizeGestures) {\n      // No more fingers down\n      if (pointers.length === 0) {\n        const callData = { ...getModifierKeysFor(EMPTY_MOUSE_EVENT),\n          position: getScreenEventPositionFor(event),\n          deviceType: getDeviceTypeFor(event)\n        };\n        publicAPI.leftButtonReleaseEvent(callData);\n      } else if (pointers.length === 1) {\n        // If one finger left, end touch and start button press\n        const positions = pointerCacheToPositions(pointerCache);\n        publicAPI.recognizeGesture('TouchEnd', positions);\n        const callData = { ...getModifierKeysFor(EMPTY_MOUSE_EVENT),\n          position: pointers[0].position,\n          deviceType: getDeviceTypeFor(event)\n        };\n        publicAPI.leftButtonPressEvent(callData);\n      } else {\n        // If more than one finger left, keep touch move\n        const positions = pointerCacheToPositions(pointerCache);\n        publicAPI.recognizeGesture('TouchMove', positions);\n      }\n    } else if (pointers.length === 1) {\n      const callData = { ...getModifierKeysFor(EMPTY_MOUSE_EVENT),\n        position: pointers[0].position,\n        deviceType: getDeviceTypeFor(event)\n      };\n      publicAPI.leftButtonReleaseEvent(callData);\n    }\n  };\n\n  publicAPI.setView = val => {\n    if (model._view === val) {\n      return;\n    }\n\n    model._view = val;\n\n    model._view.getRenderable().setInteractor(publicAPI);\n\n    publicAPI.modified();\n  };\n\n  publicAPI.getFirstRenderer = () => model._view?.getRenderable()?.getRenderersByReference()?.[0];\n\n  publicAPI.findPokedRenderer = function () {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    if (!model._view) {\n      return null;\n    } // The original order of renderers needs to remain as\n    // the first one is the one we want to manipulate the camera on.\n\n\n    const rc = model._view?.getRenderable()?.getRenderers();\n\n    if (!rc) {\n      return null;\n    }\n\n    rc.sort((a, b) => a.getLayer() - b.getLayer());\n    let interactiveren = null;\n    let viewportren = null;\n    let currentRenderer = null;\n    let count = rc.length;\n\n    while (count--) {\n      const aren = rc[count];\n\n      if (model._view.isInViewport(x, y, aren) && aren.getInteractive()) {\n        currentRenderer = aren;\n        break;\n      }\n\n      if (interactiveren === null && aren.getInteractive()) {\n        // Save this renderer in case we can't find one in the viewport that\n        // is interactive.\n        interactiveren = aren;\n      }\n\n      if (viewportren === null && model._view.isInViewport(x, y, aren)) {\n        // Save this renderer in case we can't find one in the viewport that\n        // is interactive.\n        viewportren = aren;\n      }\n    } // We must have a value.  If we found an interactive renderer before, that's\n    // better than a non-interactive renderer.\n\n\n    if (currentRenderer === null) {\n      currentRenderer = interactiveren;\n    } // We must have a value.  If we found a renderer that is in the viewport,\n    // that is better than any old viewport (but not as good as an interactive\n    // one).\n\n\n    if (currentRenderer === null) {\n      currentRenderer = viewportren;\n    } // We must have a value - take anything.\n\n\n    if (currentRenderer == null) {\n      currentRenderer = rc[0];\n    }\n\n    return currentRenderer;\n  }; // only render if we are not animating. If we are animating\n  // then renders will happen naturally anyhow and we definitely\n  // do not want extra renders as the make the apparent interaction\n  // rate slower.\n\n\n  publicAPI.render = () => {\n    if (!publicAPI.isAnimating() && !model.inRender) {\n      forceRender();\n    }\n  }; // create the generic Event methods\n\n\n  handledEvents.forEach(eventName => {\n    const lowerFirst = eventName.charAt(0).toLowerCase() + eventName.slice(1);\n\n    publicAPI[`${lowerFirst}Event`] = arg => {\n      // Check that interactor enabled\n      if (!model.enabled) {\n        return;\n      } // Check that a poked renderer exists\n\n\n      const renderer = publicAPI.getCurrentRenderer();\n\n      if (!renderer) {\n        vtkOnceErrorMacro(`\n          Can not forward events without a current renderer on the interactor.\n        `);\n        return;\n      } // Pass the eventName and the poked renderer\n\n\n      const callData = {\n        type: eventName,\n        pokedRenderer: model.currentRenderer,\n        firstRenderer: publicAPI.getFirstRenderer(),\n        // Add the arguments to the call data\n        ...arg\n      }; // Call invoke\n\n      publicAPI[`invoke${eventName}`](callData);\n    };\n  }); // we know we are in multitouch now, so start recognizing\n\n  publicAPI.recognizeGesture = (event, positions) => {\n    // more than two pointers we ignore\n    if (Object.keys(positions).length > 2) {\n      return;\n    }\n\n    if (!model.startingEventPositions) {\n      model.startingEventPositions = {};\n    } // store the initial positions\n\n\n    if (event === 'TouchStart') {\n      Object.keys(positions).forEach(key => {\n        model.startingEventPositions[key] = positions[key];\n      }); // we do not know what the gesture is yet\n\n      model.currentGesture = 'Start';\n      return;\n    } // end the gesture if needed\n\n\n    if (event === 'TouchEnd') {\n      if (model.currentGesture === 'Pinch') {\n        publicAPI.render();\n        publicAPI.endPinchEvent();\n      }\n\n      if (model.currentGesture === 'Rotate') {\n        publicAPI.render();\n        publicAPI.endRotateEvent();\n      }\n\n      if (model.currentGesture === 'Pan') {\n        publicAPI.render();\n        publicAPI.endPanEvent();\n      }\n\n      model.currentGesture = 'Start';\n      model.startingEventPositions = {};\n      return;\n    } // what are the two pointers we are working with\n\n\n    let count = 0;\n    const posVals = [];\n    const startVals = [];\n    Object.keys(positions).forEach(key => {\n      posVals[count] = positions[key];\n      startVals[count] = model.startingEventPositions[key];\n      count++;\n    }); // The meat of the algorithm\n    // on move events we analyze them to determine what type\n    // of movement it is and then deal with it.\n    // calculate the distances\n\n    const originalDistance = Math.sqrt((startVals[0].x - startVals[1].x) * (startVals[0].x - startVals[1].x) + (startVals[0].y - startVals[1].y) * (startVals[0].y - startVals[1].y));\n    const newDistance = Math.sqrt((posVals[0].x - posVals[1].x) * (posVals[0].x - posVals[1].x) + (posVals[0].y - posVals[1].y) * (posVals[0].y - posVals[1].y)); // calculate rotations\n\n    let originalAngle = vtkMath.degreesFromRadians(Math.atan2(startVals[1].y - startVals[0].y, startVals[1].x - startVals[0].x));\n    let newAngle = vtkMath.degreesFromRadians(Math.atan2(posVals[1].y - posVals[0].y, posVals[1].x - posVals[0].x)); // angles are cyclic so watch for that, 1 and 359 are only 2 apart :)\n\n    let angleDeviation = newAngle - originalAngle;\n    newAngle = newAngle + 180.0 >= 360.0 ? newAngle - 180.0 : newAngle + 180.0;\n    originalAngle = originalAngle + 180.0 >= 360.0 ? originalAngle - 180.0 : originalAngle + 180.0;\n\n    if (Math.abs(newAngle - originalAngle) < Math.abs(angleDeviation)) {\n      angleDeviation = newAngle - originalAngle;\n    } // calculate the translations\n\n\n    const trans = [];\n    trans[0] = (posVals[0].x - startVals[0].x + posVals[1].x - startVals[1].x) / 2.0;\n    trans[1] = (posVals[0].y - startVals[0].y + posVals[1].y - startVals[1].y) / 2.0;\n\n    if (event === 'TouchMove') {\n      // OK we want to\n      // - immediately respond to the user\n      // - allow the user to zoom without panning (saves focal point)\n      // - allow the user to rotate without panning (saves focal point)\n      // do we know what gesture we are doing yet? If not\n      // see if we can figure it out\n      if (model.currentGesture === 'Start') {\n        // pinch is a move to/from the center point\n        // rotate is a move along the circumference\n        // pan is a move of the center point\n        // compute the distance along each of these axes in pixels\n        // the first to break thresh wins\n        let thresh = 0.01 * Math.sqrt(model.container.clientWidth * model.container.clientWidth + model.container.clientHeight * model.container.clientHeight);\n\n        if (thresh < 15.0) {\n          thresh = 15.0;\n        }\n\n        const pinchDistance = Math.abs(newDistance - originalDistance);\n        const rotateDistance = newDistance * 3.1415926 * Math.abs(angleDeviation) / 360.0;\n        const panDistance = Math.sqrt(trans[0] * trans[0] + trans[1] * trans[1]);\n\n        if (pinchDistance > thresh && pinchDistance > rotateDistance && pinchDistance > panDistance) {\n          model.currentGesture = 'Pinch';\n          const callData = {\n            scale: 1.0,\n            touches: positions\n          };\n          publicAPI.startPinchEvent(callData);\n        } else if (rotateDistance > thresh && rotateDistance > panDistance) {\n          model.currentGesture = 'Rotate';\n          const callData = {\n            rotation: 0.0,\n            touches: positions\n          };\n          publicAPI.startRotateEvent(callData);\n        } else if (panDistance > thresh) {\n          model.currentGesture = 'Pan';\n          const callData = {\n            translation: [0, 0],\n            touches: positions\n          };\n          publicAPI.startPanEvent(callData);\n        }\n      } else {\n        // if we have found a specific type of movement then\n        // handle it\n        if (model.currentGesture === 'Rotate') {\n          const callData = {\n            rotation: angleDeviation,\n            touches: positions\n          };\n          publicAPI.rotateEvent(callData);\n        }\n\n        if (model.currentGesture === 'Pinch') {\n          const callData = {\n            scale: newDistance / originalDistance,\n            touches: positions\n          };\n          publicAPI.pinchEvent(callData);\n        }\n\n        if (model.currentGesture === 'Pan') {\n          const callData = {\n            translation: trans,\n            touches: positions\n          };\n          publicAPI.panEvent(callData);\n        }\n      }\n    }\n  };\n\n  publicAPI.handleVisibilityChange = () => {\n    model._animationStartTime = Date.now();\n    model._animationFrameCount = 0;\n  };\n\n  publicAPI.setCurrentRenderer = r => {\n    model._forcedRenderer = !!r;\n    model.currentRenderer = r;\n  }; // Stop animating if the renderWindowInteractor is deleted.\n\n\n  const superDelete = publicAPI.delete;\n\n  publicAPI.delete = () => {\n    while (animationRequesters.size) {\n      publicAPI.cancelAnimation(animationRequesters.values().next().value);\n    }\n\n    if (typeof document.hidden !== 'undefined') {\n      document.removeEventListener('visibilitychange', publicAPI.handleVisibilityChange);\n    }\n\n    superDelete();\n  }; // Use the Page Visibility API to detect when we switch away from or back to\n  // this tab, and reset the animationFrameStart. When tabs are not active, browsers\n  // will stop calling requestAnimationFrame callbacks.\n\n\n  if (typeof document.hidden !== 'undefined') {\n    document.addEventListener('visibilitychange', publicAPI.handleVisibilityChange, false);\n  }\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  renderWindow: null,\n  interactorStyle: null,\n  picker: null,\n  pickingManager: null,\n  initialized: false,\n  enabled: false,\n  enableRender: true,\n  currentRenderer: null,\n  lightFollowCamera: true,\n  desiredUpdateRate: 30.0,\n  stillUpdateRate: 2.0,\n  container: null,\n  // _view: null,\n  recognizeGestures: true,\n  currentGesture: 'Start',\n  animationRequest: null,\n  lastFrameTime: 0.1,\n  recentAnimationFrameRate: 10.0,\n  wheelTimeoutID: 0,\n  moveTimeoutID: 0,\n  lastGamepadValues: {},\n  preventDefaultOnPointerDown: false,\n  preventDefaultOnPointerUp: false\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods\n\n  macro.obj(publicAPI, model); // run animation at least until this time\n\n  model._animationExtendedEnd = 0;\n  macro.event(publicAPI, model, 'RenderEvent');\n  handledEvents.forEach(eventName => macro.event(publicAPI, model, eventName)); // Create get-only macros\n\n  macro.get(publicAPI, model, ['initialized', 'container', 'interactorStyle', 'lastFrameTime', 'recentAnimationFrameRate', '_view']); // Create get-set macros\n\n  macro.setGet(publicAPI, model, ['lightFollowCamera', 'enabled', 'enableRender', 'recognizeGestures', 'desiredUpdateRate', 'stillUpdateRate', 'picker', 'preventDefaultOnPointerDown', 'preventDefaultOnPointerUp']);\n  macro.moveToProtected(publicAPI, model, ['view']); // For more macro methods, see \"Sources/macros.js\"\n  // Object specific methods\n\n  vtkRenderWindowInteractor(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkRenderWindowInteractor'); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend,\n  handledEvents,\n  ...Constants\n};","map":{"version":3,"names":["macro","vtkMath","Constants","Device","Input","vtkWarningMacro","vtkErrorMacro","normalizeWheel","vtkOnceErrorMacro","EMPTY_MOUSE_EVENT","MouseEvent","deviceInputMap","Trigger","Grip","TrackPad","Thumbstick","A","B","handledEvents","preventDefault","event","cancelable","pointerCacheToPositions","cache","positions","Object","create","forEach","pointerId","position","vtkRenderWindowInteractor","publicAPI","model","classHierarchy","push","animationRequesters","Set","pointerCache","Map","start","initialized","initialize","startEventLoop","setRenderWindow","aren","setInteractorStyle","style","interactorStyle","setInteractor","getInteractor","enable","render","setEnabled","disable","updateCurrentRenderer","x","y","_forcedRenderer","currentRenderer","findPokedRenderer","getCurrentRenderer","getScreenEventPositionFor","source","canvas","_view","getCanvas","bounds","getBoundingClientRect","scaleX","width","scaleY","height","clientX","left","clientY","top","z","size","getModifierKeysFor","controlKey","ctrlKey","altKey","shiftKey","getKeysFor","modifierKeys","keys","key","keyCode","charCode","getDeviceTypeFor","pointerType","bindEvents","container","addEventListener","handleWheel","handlePointerEnter","handlePointerLeave","handlePointerMove","passive","handlePointerDown","handlePointerUp","handlePointerCancel","document","handleKeyPress","handleKeyDown","handleKeyUp","handlePointerLockChange","touchAction","userSelect","webkitTapHighlightColor","unbindEvents","removeEventListener","clear","data","keyPressEvent","keyDownEvent","keyUpEvent","callData","deviceType","pointerEnterEvent","mouseEnterEvent","pointerLeaveEvent","mouseLeaveEvent","button","isPointerLocked","preventDefaultOnPointerDown","target","hasPointerCapture","releasePointerCapture","setPointerCapture","has","set","handleTouchStart","handleMouseDown","preventDefaultOnPointerUp","delete","handleTouchEnd","handleMouseUp","pointer","get","handleTouchMove","handleMouseMove","leftButtonPressEvent","middleButtonPressEvent","rightButtonPressEvent","requestPointerLock","exitPointerLock","pointerLockElement","startPointerLockEvent","endPointerLockEvent","forceRender","enabled","enableRender","inRender","traverseAllPasses","invokeRenderEvent","requestAnimation","requestor","undefined","add","animationRequest","xrAnimation","_animationStartTime","Date","now","_animationFrameCount","requestAnimationFrame","handleAnimation","startAnimationEvent","extendAnimation","duration","newEnd","_animationExtendedEnd","Math","max","isAnimating","cancelAnimation","skipWarning","requestStr","getClassName","cancelAnimationFrame","endAnimationEvent","switchToXRAnimation","returnFromXRAnimation","recentAnimationFrameRate","updateXRGamepads","xrSession","xrFrame","xrRefSpace","inputSources","inputSource","gripPose","gripSpace","getPose","gp","gamepad","hand","handedness","index","lastGamepadValues","buttons","right","none","b","length","pressed","button3DEvent","transform","orientation","device","LeftController","RightController","input","mapping","move3DEvent","moveTimeoutID","startMouseMoveEvent","mouseMoveEvent","clearTimeout","setTimeout","endMouseMoveEvent","currTime","lastFrameTime","animationFrameRateUpdateEvent","animationEvent","wheelTimeoutID","startMouseWheelEvent","mouseWheelEvent","endMouseWheelEvent","leftButtonReleaseEvent","middleButtonReleaseEvent","rightButtonReleaseEvent","pointers","values","recognizeGestures","recognizeGesture","setView","val","getRenderable","modified","getFirstRenderer","getRenderersByReference","rc","getRenderers","sort","a","getLayer","interactiveren","viewportren","count","isInViewport","getInteractive","eventName","lowerFirst","charAt","toLowerCase","slice","arg","renderer","type","pokedRenderer","firstRenderer","startingEventPositions","currentGesture","endPinchEvent","endRotateEvent","endPanEvent","posVals","startVals","originalDistance","sqrt","newDistance","originalAngle","degreesFromRadians","atan2","newAngle","angleDeviation","abs","trans","thresh","clientWidth","clientHeight","pinchDistance","rotateDistance","panDistance","scale","touches","startPinchEvent","rotation","startRotateEvent","translation","startPanEvent","rotateEvent","pinchEvent","panEvent","handleVisibilityChange","setCurrentRenderer","r","superDelete","next","value","hidden","DEFAULT_VALUES","renderWindow","picker","pickingManager","lightFollowCamera","desiredUpdateRate","stillUpdateRate","extend","initialValues","assign","obj","setGet","moveToProtected","newInstance"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/Core/RenderWindowInteractor/index.js"],"sourcesContent":["import macro from 'vtk.js/Sources/macros';\nimport * as vtkMath from 'vtk.js/Sources/Common/Core/Math';\n\nimport Constants from 'vtk.js/Sources/Rendering/Core/RenderWindowInteractor/Constants';\n\nconst { Device, Input } = Constants;\nconst { vtkWarningMacro, vtkErrorMacro, normalizeWheel, vtkOnceErrorMacro } =\n  macro;\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nconst EMPTY_MOUSE_EVENT = new MouseEvent('');\n\nconst deviceInputMap = {\n  'xr-standard': [\n    Input.Trigger,\n    Input.Grip,\n    Input.TrackPad,\n    Input.Thumbstick,\n    Input.A,\n    Input.B,\n  ],\n};\n\nconst handledEvents = [\n  'StartAnimation',\n  'Animation',\n  'EndAnimation',\n  'PointerEnter',\n  'PointerLeave',\n  'MouseEnter',\n  'MouseLeave',\n  'StartMouseMove',\n  'MouseMove',\n  'EndMouseMove',\n  'LeftButtonPress',\n  'LeftButtonRelease',\n  'MiddleButtonPress',\n  'MiddleButtonRelease',\n  'RightButtonPress',\n  'RightButtonRelease',\n  'KeyPress',\n  'KeyDown',\n  'KeyUp',\n  'StartMouseWheel',\n  'MouseWheel',\n  'EndMouseWheel',\n  'StartPinch',\n  'Pinch',\n  'EndPinch',\n  'StartPan',\n  'Pan',\n  'EndPan',\n  'StartRotate',\n  'Rotate',\n  'EndRotate',\n  'Button3D',\n  'Move3D',\n  'StartPointerLock',\n  'EndPointerLock',\n  'StartInteraction',\n  'Interaction',\n  'EndInteraction',\n  'AnimationFrameRateUpdate',\n];\n\nfunction preventDefault(event) {\n  if (event.cancelable) {\n    event.preventDefault();\n  }\n}\n\nfunction pointerCacheToPositions(cache) {\n  const positions = Object.create(null);\n  cache.forEach(({ pointerId, position }) => {\n    positions[pointerId] = position;\n  });\n  return positions;\n}\n\n// ----------------------------------------------------------------------------\n// vtkRenderWindowInteractor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkRenderWindowInteractor(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkRenderWindowInteractor');\n\n  // Initialize list of requesters\n  const animationRequesters = new Set();\n\n  // map from pointerId to { pointerId: number, position: [x, y] }\n  const pointerCache = new Map();\n\n  // Public API methods\n\n  //----------------------------------------------------------------------\n  publicAPI.start = () => {\n    // Let the compositing handle the event loop if it wants to.\n    // if (publicAPI.HasObserver(vtkCommand::StartEvent) && !publicAPI.HandleEventLoop) {\n    //   publicAPI.invokeEvent({ type: 'StartEvent' });\n    //   return;\n    // }\n\n    // As a convenience, initialize if we aren't initialized yet.\n    if (!model.initialized) {\n      publicAPI.initialize();\n      if (!model.initialized) {\n        return;\n      }\n    }\n    // Pass execution to the subclass which will run the event loop,\n    // this will not return until TerminateApp is called.\n    publicAPI.startEventLoop();\n  };\n\n  //----------------------------------------------------------------------\n  publicAPI.setRenderWindow = (aren) => {\n    vtkErrorMacro(\n      'you want to call setView(view) instead of setRenderWindow on a vtk.js interactor'\n    );\n  };\n\n  //----------------------------------------------------------------------\n  publicAPI.setInteractorStyle = (style) => {\n    if (model.interactorStyle !== style) {\n      if (model.interactorStyle != null) {\n        model.interactorStyle.setInteractor(null);\n      }\n      model.interactorStyle = style;\n      if (model.interactorStyle != null) {\n        if (model.interactorStyle.getInteractor() !== publicAPI) {\n          model.interactorStyle.setInteractor(publicAPI);\n        }\n      }\n    }\n  };\n\n  //---------------------------------------------------------------------\n  publicAPI.initialize = () => {\n    model.initialized = true;\n    publicAPI.enable();\n    publicAPI.render();\n  };\n\n  publicAPI.enable = () => publicAPI.setEnabled(true);\n\n  publicAPI.disable = () => publicAPI.setEnabled(false);\n\n  publicAPI.startEventLoop = () => vtkWarningMacro('empty event loop');\n\n  function updateCurrentRenderer(x, y) {\n    if (!model._forcedRenderer) {\n      model.currentRenderer = publicAPI.findPokedRenderer(x, y);\n    }\n  }\n\n  publicAPI.getCurrentRenderer = () => {\n    if (model.currentRenderer) {\n      return model.currentRenderer;\n    }\n    updateCurrentRenderer(0, 0);\n    return model.currentRenderer;\n  };\n\n  function getScreenEventPositionFor(source) {\n    const canvas = model._view.getCanvas();\n    const bounds = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / bounds.width;\n    const scaleY = canvas.height / bounds.height;\n    const position = {\n      x: scaleX * (source.clientX - bounds.left),\n      y: scaleY * (bounds.height - source.clientY + bounds.top),\n      z: 0,\n    };\n\n    // if multitouch, do not update the current renderer\n    if (pointerCache.size <= 1 || !model.currentRenderer) {\n      updateCurrentRenderer(position.x, position.y);\n    }\n    return position;\n  }\n\n  function getModifierKeysFor(event) {\n    return {\n      controlKey: event.ctrlKey,\n      altKey: event.altKey,\n      shiftKey: event.shiftKey,\n    };\n  }\n\n  function getKeysFor(event) {\n    const modifierKeys = getModifierKeysFor(event);\n    const keys = {\n      key: event.key,\n      keyCode: event.charCode,\n      ...modifierKeys,\n    };\n    return keys;\n  }\n\n  function getDeviceTypeFor(event) {\n    return event.pointerType || '';\n  }\n\n  publicAPI.bindEvents = (container) => {\n    model.container = container;\n    container.addEventListener('contextmenu', preventDefault);\n    container.addEventListener('wheel', publicAPI.handleWheel);\n    container.addEventListener('DOMMouseScroll', publicAPI.handleWheel);\n    container.addEventListener('pointerenter', publicAPI.handlePointerEnter);\n    container.addEventListener('pointerleave', publicAPI.handlePointerLeave);\n    container.addEventListener('pointermove', publicAPI.handlePointerMove, {\n      passive: false,\n    });\n    container.addEventListener('pointerdown', publicAPI.handlePointerDown, {\n      passive: false,\n    });\n    container.addEventListener('pointerup', publicAPI.handlePointerUp);\n    container.addEventListener('pointercancel', publicAPI.handlePointerCancel);\n    document.addEventListener('keypress', publicAPI.handleKeyPress);\n    document.addEventListener('keydown', publicAPI.handleKeyDown);\n    document.addEventListener('keyup', publicAPI.handleKeyUp);\n\n    document.addEventListener(\n      'pointerlockchange',\n      publicAPI.handlePointerLockChange\n    );\n\n    // using touchAction is more performant than preventDefault\n    // in a touchstart handler.\n    container.style.touchAction = 'none';\n    container.style.userSelect = 'none';\n    // disables tap highlight for when cursor is pointer\n    container.style.webkitTapHighlightColor = 'rgba(0,0,0,0)';\n  };\n\n  publicAPI.unbindEvents = () => {\n    const { container } = model;\n    container.removeEventListener('contextmenu', preventDefault);\n    container.removeEventListener('wheel', publicAPI.handleWheel);\n    container.removeEventListener('DOMMouseScroll', publicAPI.handleWheel);\n    container.removeEventListener('pointerenter', publicAPI.handlePointerEnter);\n    container.removeEventListener('pointerleave', publicAPI.handlePointerLeave);\n    container.removeEventListener('pointermove', publicAPI.handlePointerMove, {\n      passive: false,\n    });\n    container.removeEventListener('pointerdown', publicAPI.handlePointerDown, {\n      passive: false,\n    });\n    container.removeEventListener('pointerup', publicAPI.handlePointerUp);\n    container.removeEventListener(\n      'pointercancel',\n      publicAPI.handlePointerCancel\n    );\n    document.removeEventListener('keypress', publicAPI.handleKeyPress);\n    document.removeEventListener('keydown', publicAPI.handleKeyDown);\n    document.removeEventListener('keyup', publicAPI.handleKeyUp);\n    document.removeEventListener(\n      'pointerlockchange',\n      publicAPI.handlePointerLockChange\n    );\n    model.container = null;\n    pointerCache.clear();\n  };\n\n  publicAPI.handleKeyPress = (event) => {\n    const data = getKeysFor(event);\n    publicAPI.keyPressEvent(data);\n  };\n\n  publicAPI.handleKeyDown = (event) => {\n    const data = getKeysFor(event);\n    publicAPI.keyDownEvent(data);\n  };\n\n  publicAPI.handleKeyUp = (event) => {\n    const data = getKeysFor(event);\n    publicAPI.keyUpEvent(data);\n  };\n\n  publicAPI.handlePointerEnter = (event) => {\n    const callData = {\n      ...getModifierKeysFor(event),\n      position: getScreenEventPositionFor(event),\n      deviceType: getDeviceTypeFor(event),\n    };\n    publicAPI.pointerEnterEvent(callData);\n    if (callData.deviceType === 'mouse') {\n      publicAPI.mouseEnterEvent(callData);\n    }\n  };\n\n  publicAPI.handlePointerLeave = (event) => {\n    const callData = {\n      ...getModifierKeysFor(event),\n      position: getScreenEventPositionFor(event),\n      deviceType: getDeviceTypeFor(event),\n    };\n    publicAPI.pointerLeaveEvent(callData);\n    if (callData.deviceType === 'mouse') {\n      publicAPI.mouseLeaveEvent(callData);\n    }\n  };\n\n  publicAPI.handlePointerDown = (event) => {\n    if (event.button > 2 || publicAPI.isPointerLocked()) {\n      // ignore events from extra mouse buttons such as `back` and `forward`\n      return;\n    }\n    if (model.preventDefaultOnPointerDown) {\n      preventDefault(event);\n    }\n\n    if (event.target.hasPointerCapture(event.pointerId)) {\n      event.target.releasePointerCapture(event.pointerId);\n    }\n    model.container.setPointerCapture(event.pointerId);\n\n    if (pointerCache.has(event.pointerId)) {\n      vtkWarningMacro('[RenderWindowInteractor] duplicate pointerId detected');\n    }\n\n    pointerCache.set(event.pointerId, {\n      pointerId: event.pointerId,\n      position: getScreenEventPositionFor(event),\n    });\n\n    switch (event.pointerType) {\n      case 'pen':\n      case 'touch':\n        publicAPI.handleTouchStart(event);\n        break;\n      case 'mouse':\n      default:\n        publicAPI.handleMouseDown(event);\n        break;\n    }\n  };\n\n  publicAPI.handlePointerUp = (event) => {\n    if (pointerCache.has(event.pointerId)) {\n      if (model.preventDefaultOnPointerUp) {\n        preventDefault(event);\n      }\n\n      pointerCache.delete(event.pointerId);\n      model.container.releasePointerCapture(event.pointerId);\n\n      switch (event.pointerType) {\n        case 'pen':\n        case 'touch':\n          publicAPI.handleTouchEnd(event);\n          break;\n        case 'mouse':\n        default:\n          publicAPI.handleMouseUp(event);\n          break;\n      }\n    }\n  };\n\n  publicAPI.handlePointerCancel = (event) => {\n    if (pointerCache.has(event.pointerId)) {\n      pointerCache.delete(event.pointerId);\n\n      switch (event.pointerType) {\n        case 'pen':\n        case 'touch':\n          publicAPI.handleTouchEnd(event);\n          break;\n        case 'mouse':\n        default:\n          publicAPI.handleMouseUp(event);\n          break;\n      }\n    }\n  };\n\n  publicAPI.handlePointerMove = (event) => {\n    if (pointerCache.has(event.pointerId)) {\n      const pointer = pointerCache.get(event.pointerId);\n      pointer.position = getScreenEventPositionFor(event);\n    }\n\n    switch (event.pointerType) {\n      case 'pen':\n      case 'touch':\n        publicAPI.handleTouchMove(event);\n        break;\n      case 'mouse':\n      default:\n        publicAPI.handleMouseMove(event);\n        break;\n    }\n  };\n\n  publicAPI.handleMouseDown = (event) => {\n    const callData = {\n      ...getModifierKeysFor(event),\n      position: getScreenEventPositionFor(event),\n      deviceType: getDeviceTypeFor(event),\n    };\n    switch (event.button) {\n      case 0:\n        publicAPI.leftButtonPressEvent(callData);\n        break;\n      case 1:\n        publicAPI.middleButtonPressEvent(callData);\n        break;\n      case 2:\n        publicAPI.rightButtonPressEvent(callData);\n        break;\n      default:\n        vtkErrorMacro(`Unknown mouse button pressed: ${event.button}`);\n        break;\n    }\n  };\n\n  //----------------------------------------------------------------------\n  publicAPI.requestPointerLock = () => {\n    if (model.container) {\n      model.container.requestPointerLock();\n    }\n  };\n\n  //----------------------------------------------------------------------\n  publicAPI.exitPointerLock = () => document.exitPointerLock();\n\n  //----------------------------------------------------------------------\n  publicAPI.isPointerLocked = () =>\n    !!model.container && document.pointerLockElement === model.container;\n\n  //----------------------------------------------------------------------\n  publicAPI.handlePointerLockChange = () => {\n    if (publicAPI.isPointerLocked()) {\n      publicAPI.startPointerLockEvent();\n    } else {\n      publicAPI.endPointerLockEvent();\n    }\n  };\n\n  //----------------------------------------------------------------------\n  function forceRender() {\n    if (model._view && model.enabled && model.enableRender) {\n      model.inRender = true;\n      model._view.traverseAllPasses();\n      model.inRender = false;\n    }\n    // outside the above test so that third-party code can redirect\n    // the render to the appropriate class\n    publicAPI.invokeRenderEvent();\n  }\n\n  publicAPI.requestAnimation = (requestor) => {\n    if (requestor === undefined) {\n      vtkErrorMacro(`undefined requester, can not start animating`);\n      return;\n    }\n    if (animationRequesters.has(requestor)) {\n      vtkWarningMacro(`requester is already registered for animating`);\n      return;\n    }\n    animationRequesters.add(requestor);\n    if (\n      !model.animationRequest &&\n      animationRequesters.size === 1 &&\n      !model.xrAnimation\n    ) {\n      model._animationStartTime = Date.now();\n      model._animationFrameCount = 0;\n      model.animationRequest = requestAnimationFrame(publicAPI.handleAnimation);\n      publicAPI.startAnimationEvent();\n    }\n  };\n\n  // continue animating for at least the specified duration of\n  // milliseconds.\n  publicAPI.extendAnimation = (duration) => {\n    const newEnd = Date.now() + duration;\n    model._animationExtendedEnd = Math.max(model._animationExtendedEnd, newEnd);\n    if (\n      !model.animationRequest &&\n      animationRequesters.size === 0 &&\n      !model.xrAnimation\n    ) {\n      model._animationStartTime = Date.now();\n      model._animationFrameCount = 0;\n      model.animationRequest = requestAnimationFrame(publicAPI.handleAnimation);\n      publicAPI.startAnimationEvent();\n    }\n  };\n\n  publicAPI.isAnimating = () =>\n    model.xrAnimation || model.animationRequest !== null;\n\n  publicAPI.cancelAnimation = (requestor, skipWarning = false) => {\n    if (!animationRequesters.has(requestor)) {\n      if (!skipWarning) {\n        const requestStr =\n          requestor && requestor.getClassName\n            ? requestor.getClassName()\n            : requestor;\n        vtkWarningMacro(`${requestStr} did not request an animation`);\n      }\n\n      return;\n    }\n    animationRequesters.delete(requestor);\n    if (\n      model.animationRequest &&\n      animationRequesters.size === 0 &&\n      Date.now() > model._animationExtendedEnd\n    ) {\n      cancelAnimationFrame(model.animationRequest);\n      model.animationRequest = null;\n      publicAPI.endAnimationEvent();\n      publicAPI.render();\n    }\n  };\n\n  publicAPI.switchToXRAnimation = () => {\n    // cancel existing animation if any\n    if (model.animationRequest) {\n      cancelAnimationFrame(model.animationRequest);\n      model.animationRequest = null;\n    }\n    model.xrAnimation = true;\n  };\n\n  publicAPI.returnFromXRAnimation = () => {\n    model.xrAnimation = false;\n    if (animationRequesters.size !== 0) {\n      model.recentAnimationFrameRate = 10.0;\n      model.animationRequest = requestAnimationFrame(publicAPI.handleAnimation);\n    }\n  };\n\n  publicAPI.updateXRGamepads = (xrSession, xrFrame, xrRefSpace) => {\n    // watch for when buttons change state and fire events\n    xrSession.inputSources.forEach((inputSource) => {\n      const gripPose =\n        inputSource.gripSpace == null\n          ? null\n          : xrFrame.getPose(inputSource.gripSpace, xrRefSpace);\n      const gp = inputSource.gamepad;\n      const hand = inputSource.handedness;\n      if (gp) {\n        if (!(gp.index in model.lastGamepadValues)) {\n          model.lastGamepadValues[gp.index] = {\n            left: { buttons: {} },\n            right: { buttons: {} },\n            none: { buttons: {} },\n          };\n        }\n        for (let b = 0; b < gp.buttons.length; ++b) {\n          if (!(b in model.lastGamepadValues[gp.index][hand].buttons)) {\n            model.lastGamepadValues[gp.index][hand].buttons[b] = false;\n          }\n          if (\n            model.lastGamepadValues[gp.index][hand].buttons[b] !==\n              gp.buttons[b].pressed &&\n            gripPose != null\n          ) {\n            publicAPI.button3DEvent({\n              gamepad: gp,\n              position: gripPose.transform.position,\n              orientation: gripPose.transform.orientation,\n              pressed: gp.buttons[b].pressed,\n              device:\n                inputSource.handedness === 'left'\n                  ? Device.LeftController\n                  : Device.RightController,\n              input:\n                deviceInputMap[gp.mapping] && deviceInputMap[gp.mapping][b]\n                  ? deviceInputMap[gp.mapping][b]\n                  : Input.Trigger,\n            });\n            model.lastGamepadValues[gp.index][hand].buttons[b] =\n              gp.buttons[b].pressed;\n          }\n          if (\n            model.lastGamepadValues[gp.index][hand].buttons[b] &&\n            gripPose != null\n          ) {\n            publicAPI.move3DEvent({\n              gamepad: gp,\n              position: gripPose.transform.position,\n              orientation: gripPose.transform.orientation,\n              device:\n                inputSource.handedness === 'left'\n                  ? Device.LeftController\n                  : Device.RightController,\n            });\n          }\n        }\n      }\n    });\n  };\n\n  publicAPI.handleMouseMove = (event) => {\n    const callData = {\n      ...getModifierKeysFor(event),\n      position: getScreenEventPositionFor(event),\n      deviceType: getDeviceTypeFor(event),\n    };\n\n    if (model.moveTimeoutID === 0) {\n      publicAPI.startMouseMoveEvent(callData);\n    } else {\n      publicAPI.mouseMoveEvent(callData);\n      clearTimeout(model.moveTimeoutID);\n    }\n\n    // start a timer to keep us animating while we get mouse move events\n    model.moveTimeoutID = setTimeout(() => {\n      publicAPI.endMouseMoveEvent();\n      model.moveTimeoutID = 0;\n    }, 200);\n  };\n\n  publicAPI.handleAnimation = () => {\n    const currTime = Date.now();\n    model._animationFrameCount++;\n    if (\n      currTime - model._animationStartTime > 1000.0 &&\n      model._animationFrameCount > 1\n    ) {\n      model.recentAnimationFrameRate =\n        (1000.0 * (model._animationFrameCount - 1)) /\n        (currTime - model._animationStartTime);\n      model.lastFrameTime = 1.0 / model.recentAnimationFrameRate;\n      publicAPI.animationFrameRateUpdateEvent();\n      model._animationStartTime = currTime;\n      model._animationFrameCount = 1;\n    }\n    publicAPI.animationEvent();\n    forceRender();\n    if (\n      animationRequesters.size > 0 ||\n      Date.now() < model._animationExtendedEnd\n    ) {\n      model.animationRequest = requestAnimationFrame(publicAPI.handleAnimation);\n    } else {\n      cancelAnimationFrame(model.animationRequest);\n      model.animationRequest = null;\n      publicAPI.endAnimationEvent();\n      publicAPI.render();\n    }\n  };\n\n  publicAPI.handleWheel = (event) => {\n    preventDefault(event);\n\n    /**\n     * wheel event values can vary significantly across browsers, platforms\n     * and devices [1]. `normalizeWheel` uses facebook's solution from their\n     * fixed-data-table repository [2].\n     *\n     * [1] https://developer.mozilla.org/en-US/docs/Web/Events/mousewheel\n     * [2] https://github.com/facebookarchive/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js\n     *\n     * This code will return an object with properties:\n     *\n     *   spinX   -- normalized spin speed (use for zoom) - x plane\n     *   spinY   -- \" - y plane\n     *   pixelX  -- normalized distance (to pixels) - x plane\n     *   pixelY  -- \" - y plane\n     *\n     */\n    const callData = {\n      ...normalizeWheel(event),\n      ...getModifierKeysFor(event),\n      position: getScreenEventPositionFor(event),\n      deviceType: getDeviceTypeFor(event),\n    };\n\n    if (model.wheelTimeoutID === 0) {\n      publicAPI.startMouseWheelEvent(callData);\n    } else {\n      publicAPI.mouseWheelEvent(callData);\n      clearTimeout(model.wheelTimeoutID);\n    }\n\n    // start a timer to keep us animating while we get wheel events\n    model.wheelTimeoutID = setTimeout(() => {\n      publicAPI.extendAnimation(600);\n      publicAPI.endMouseWheelEvent();\n      model.wheelTimeoutID = 0;\n    }, 200);\n  };\n\n  publicAPI.handleMouseUp = (event) => {\n    const callData = {\n      ...getModifierKeysFor(event),\n      position: getScreenEventPositionFor(event),\n      deviceType: getDeviceTypeFor(event),\n    };\n    switch (event.button) {\n      case 0:\n        publicAPI.leftButtonReleaseEvent(callData);\n        break;\n      case 1:\n        publicAPI.middleButtonReleaseEvent(callData);\n        break;\n      case 2:\n        publicAPI.rightButtonReleaseEvent(callData);\n        break;\n      default:\n        vtkErrorMacro(`Unknown mouse button released: ${event.button}`);\n        break;\n    }\n  };\n\n  publicAPI.handleTouchStart = (event) => {\n    const pointers = [...pointerCache.values()];\n    // If multitouch\n    if (model.recognizeGestures && pointers.length > 1) {\n      const positions = pointerCacheToPositions(pointerCache);\n      // did we just transition to multitouch?\n      if (pointers.length === 2) {\n        const callData = {\n          ...getModifierKeysFor(EMPTY_MOUSE_EVENT),\n          position: pointers[0].position,\n          deviceType: getDeviceTypeFor(event),\n        };\n        publicAPI.leftButtonReleaseEvent(callData);\n      }\n      // handle the gesture\n      publicAPI.recognizeGesture('TouchStart', positions);\n    } else if (pointers.length === 1) {\n      const callData = {\n        ...getModifierKeysFor(EMPTY_MOUSE_EVENT),\n        position: getScreenEventPositionFor(event),\n        deviceType: getDeviceTypeFor(event),\n      };\n      publicAPI.leftButtonPressEvent(callData);\n    }\n  };\n\n  publicAPI.handleTouchMove = (event) => {\n    const pointers = [...pointerCache.values()];\n    if (model.recognizeGestures && pointers.length > 1) {\n      const positions = pointerCacheToPositions(pointerCache);\n      publicAPI.recognizeGesture('TouchMove', positions);\n    } else if (pointers.length === 1) {\n      const callData = {\n        ...getModifierKeysFor(EMPTY_MOUSE_EVENT),\n        position: pointers[0].position,\n        deviceType: getDeviceTypeFor(event),\n      };\n      publicAPI.mouseMoveEvent(callData);\n    }\n  };\n\n  publicAPI.handleTouchEnd = (event) => {\n    const pointers = [...pointerCache.values()];\n\n    if (model.recognizeGestures) {\n      // No more fingers down\n      if (pointers.length === 0) {\n        const callData = {\n          ...getModifierKeysFor(EMPTY_MOUSE_EVENT),\n          position: getScreenEventPositionFor(event),\n          deviceType: getDeviceTypeFor(event),\n        };\n        publicAPI.leftButtonReleaseEvent(callData);\n      } else if (pointers.length === 1) {\n        // If one finger left, end touch and start button press\n        const positions = pointerCacheToPositions(pointerCache);\n        publicAPI.recognizeGesture('TouchEnd', positions);\n        const callData = {\n          ...getModifierKeysFor(EMPTY_MOUSE_EVENT),\n          position: pointers[0].position,\n          deviceType: getDeviceTypeFor(event),\n        };\n        publicAPI.leftButtonPressEvent(callData);\n      } else {\n        // If more than one finger left, keep touch move\n        const positions = pointerCacheToPositions(pointerCache);\n        publicAPI.recognizeGesture('TouchMove', positions);\n      }\n    } else if (pointers.length === 1) {\n      const callData = {\n        ...getModifierKeysFor(EMPTY_MOUSE_EVENT),\n        position: pointers[0].position,\n        deviceType: getDeviceTypeFor(event),\n      };\n      publicAPI.leftButtonReleaseEvent(callData);\n    }\n  };\n\n  publicAPI.setView = (val) => {\n    if (model._view === val) {\n      return;\n    }\n    model._view = val;\n    model._view.getRenderable().setInteractor(publicAPI);\n    publicAPI.modified();\n  };\n\n  publicAPI.getFirstRenderer = () =>\n    model._view?.getRenderable()?.getRenderersByReference()?.[0];\n\n  publicAPI.findPokedRenderer = (x = 0, y = 0) => {\n    if (!model._view) {\n      return null;\n    }\n    // The original order of renderers needs to remain as\n    // the first one is the one we want to manipulate the camera on.\n    const rc = model._view?.getRenderable()?.getRenderers();\n    if (!rc) {\n      return null;\n    }\n    rc.sort((a, b) => a.getLayer() - b.getLayer());\n    let interactiveren = null;\n    let viewportren = null;\n    let currentRenderer = null;\n\n    let count = rc.length;\n    while (count--) {\n      const aren = rc[count];\n      if (model._view.isInViewport(x, y, aren) && aren.getInteractive()) {\n        currentRenderer = aren;\n        break;\n      }\n\n      if (interactiveren === null && aren.getInteractive()) {\n        // Save this renderer in case we can't find one in the viewport that\n        // is interactive.\n        interactiveren = aren;\n      }\n      if (viewportren === null && model._view.isInViewport(x, y, aren)) {\n        // Save this renderer in case we can't find one in the viewport that\n        // is interactive.\n        viewportren = aren;\n      }\n    }\n\n    // We must have a value.  If we found an interactive renderer before, that's\n    // better than a non-interactive renderer.\n    if (currentRenderer === null) {\n      currentRenderer = interactiveren;\n    }\n\n    // We must have a value.  If we found a renderer that is in the viewport,\n    // that is better than any old viewport (but not as good as an interactive\n    // one).\n    if (currentRenderer === null) {\n      currentRenderer = viewportren;\n    }\n\n    // We must have a value - take anything.\n    if (currentRenderer == null) {\n      currentRenderer = rc[0];\n    }\n\n    return currentRenderer;\n  };\n\n  // only render if we are not animating. If we are animating\n  // then renders will happen naturally anyhow and we definitely\n  // do not want extra renders as the make the apparent interaction\n  // rate slower.\n  publicAPI.render = () => {\n    if (!publicAPI.isAnimating() && !model.inRender) {\n      forceRender();\n    }\n  };\n\n  // create the generic Event methods\n  handledEvents.forEach((eventName) => {\n    const lowerFirst = eventName.charAt(0).toLowerCase() + eventName.slice(1);\n    publicAPI[`${lowerFirst}Event`] = (arg) => {\n      // Check that interactor enabled\n      if (!model.enabled) {\n        return;\n      }\n\n      // Check that a poked renderer exists\n      const renderer = publicAPI.getCurrentRenderer();\n      if (!renderer) {\n        vtkOnceErrorMacro(`\n          Can not forward events without a current renderer on the interactor.\n        `);\n        return;\n      }\n\n      // Pass the eventName and the poked renderer\n      const callData = {\n        type: eventName,\n        pokedRenderer: model.currentRenderer,\n        firstRenderer: publicAPI.getFirstRenderer(),\n        // Add the arguments to the call data\n        ...arg,\n      };\n\n      // Call invoke\n      publicAPI[`invoke${eventName}`](callData);\n    };\n  });\n\n  // we know we are in multitouch now, so start recognizing\n  publicAPI.recognizeGesture = (event, positions) => {\n    // more than two pointers we ignore\n    if (Object.keys(positions).length > 2) {\n      return;\n    }\n\n    if (!model.startingEventPositions) {\n      model.startingEventPositions = {};\n    }\n\n    // store the initial positions\n    if (event === 'TouchStart') {\n      Object.keys(positions).forEach((key) => {\n        model.startingEventPositions[key] = positions[key];\n      });\n      // we do not know what the gesture is yet\n      model.currentGesture = 'Start';\n      return;\n    }\n\n    // end the gesture if needed\n    if (event === 'TouchEnd') {\n      if (model.currentGesture === 'Pinch') {\n        publicAPI.render();\n        publicAPI.endPinchEvent();\n      }\n      if (model.currentGesture === 'Rotate') {\n        publicAPI.render();\n        publicAPI.endRotateEvent();\n      }\n      if (model.currentGesture === 'Pan') {\n        publicAPI.render();\n        publicAPI.endPanEvent();\n      }\n      model.currentGesture = 'Start';\n      model.startingEventPositions = {};\n      return;\n    }\n\n    // what are the two pointers we are working with\n    let count = 0;\n    const posVals = [];\n    const startVals = [];\n    Object.keys(positions).forEach((key) => {\n      posVals[count] = positions[key];\n      startVals[count] = model.startingEventPositions[key];\n      count++;\n    });\n\n    // The meat of the algorithm\n    // on move events we analyze them to determine what type\n    // of movement it is and then deal with it.\n    // calculate the distances\n    const originalDistance = Math.sqrt(\n      (startVals[0].x - startVals[1].x) * (startVals[0].x - startVals[1].x) +\n        (startVals[0].y - startVals[1].y) * (startVals[0].y - startVals[1].y)\n    );\n    const newDistance = Math.sqrt(\n      (posVals[0].x - posVals[1].x) * (posVals[0].x - posVals[1].x) +\n        (posVals[0].y - posVals[1].y) * (posVals[0].y - posVals[1].y)\n    );\n\n    // calculate rotations\n    let originalAngle = vtkMath.degreesFromRadians(\n      Math.atan2(\n        startVals[1].y - startVals[0].y,\n        startVals[1].x - startVals[0].x\n      )\n    );\n    let newAngle = vtkMath.degreesFromRadians(\n      Math.atan2(posVals[1].y - posVals[0].y, posVals[1].x - posVals[0].x)\n    );\n\n    // angles are cyclic so watch for that, 1 and 359 are only 2 apart :)\n    let angleDeviation = newAngle - originalAngle;\n    newAngle = newAngle + 180.0 >= 360.0 ? newAngle - 180.0 : newAngle + 180.0;\n    originalAngle =\n      originalAngle + 180.0 >= 360.0\n        ? originalAngle - 180.0\n        : originalAngle + 180.0;\n    if (Math.abs(newAngle - originalAngle) < Math.abs(angleDeviation)) {\n      angleDeviation = newAngle - originalAngle;\n    }\n\n    // calculate the translations\n    const trans = [];\n    trans[0] =\n      (posVals[0].x - startVals[0].x + posVals[1].x - startVals[1].x) / 2.0;\n    trans[1] =\n      (posVals[0].y - startVals[0].y + posVals[1].y - startVals[1].y) / 2.0;\n\n    if (event === 'TouchMove') {\n      // OK we want to\n      // - immediately respond to the user\n      // - allow the user to zoom without panning (saves focal point)\n      // - allow the user to rotate without panning (saves focal point)\n\n      // do we know what gesture we are doing yet? If not\n      // see if we can figure it out\n      if (model.currentGesture === 'Start') {\n        // pinch is a move to/from the center point\n        // rotate is a move along the circumference\n        // pan is a move of the center point\n        // compute the distance along each of these axes in pixels\n        // the first to break thresh wins\n        let thresh =\n          0.01 *\n          Math.sqrt(\n            model.container.clientWidth * model.container.clientWidth +\n              model.container.clientHeight * model.container.clientHeight\n          );\n        if (thresh < 15.0) {\n          thresh = 15.0;\n        }\n        const pinchDistance = Math.abs(newDistance - originalDistance);\n        const rotateDistance =\n          (newDistance * 3.1415926 * Math.abs(angleDeviation)) / 360.0;\n        const panDistance = Math.sqrt(\n          trans[0] * trans[0] + trans[1] * trans[1]\n        );\n        if (\n          pinchDistance > thresh &&\n          pinchDistance > rotateDistance &&\n          pinchDistance > panDistance\n        ) {\n          model.currentGesture = 'Pinch';\n          const callData = {\n            scale: 1.0,\n            touches: positions,\n          };\n          publicAPI.startPinchEvent(callData);\n        } else if (rotateDistance > thresh && rotateDistance > panDistance) {\n          model.currentGesture = 'Rotate';\n          const callData = {\n            rotation: 0.0,\n            touches: positions,\n          };\n          publicAPI.startRotateEvent(callData);\n        } else if (panDistance > thresh) {\n          model.currentGesture = 'Pan';\n          const callData = {\n            translation: [0, 0],\n            touches: positions,\n          };\n          publicAPI.startPanEvent(callData);\n        }\n      } else {\n        // if we have found a specific type of movement then\n        // handle it\n        if (model.currentGesture === 'Rotate') {\n          const callData = {\n            rotation: angleDeviation,\n            touches: positions,\n          };\n          publicAPI.rotateEvent(callData);\n        }\n\n        if (model.currentGesture === 'Pinch') {\n          const callData = {\n            scale: newDistance / originalDistance,\n            touches: positions,\n          };\n          publicAPI.pinchEvent(callData);\n        }\n\n        if (model.currentGesture === 'Pan') {\n          const callData = {\n            translation: trans,\n            touches: positions,\n          };\n          publicAPI.panEvent(callData);\n        }\n      }\n    }\n  };\n\n  publicAPI.handleVisibilityChange = () => {\n    model._animationStartTime = Date.now();\n    model._animationFrameCount = 0;\n  };\n\n  publicAPI.setCurrentRenderer = (r) => {\n    model._forcedRenderer = !!r;\n    model.currentRenderer = r;\n  };\n\n  // Stop animating if the renderWindowInteractor is deleted.\n  const superDelete = publicAPI.delete;\n  publicAPI.delete = () => {\n    while (animationRequesters.size) {\n      publicAPI.cancelAnimation(animationRequesters.values().next().value);\n    }\n    if (typeof document.hidden !== 'undefined') {\n      document.removeEventListener(\n        'visibilitychange',\n        publicAPI.handleVisibilityChange\n      );\n    }\n    superDelete();\n  };\n\n  // Use the Page Visibility API to detect when we switch away from or back to\n  // this tab, and reset the animationFrameStart. When tabs are not active, browsers\n  // will stop calling requestAnimationFrame callbacks.\n  if (typeof document.hidden !== 'undefined') {\n    document.addEventListener(\n      'visibilitychange',\n      publicAPI.handleVisibilityChange,\n      false\n    );\n  }\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  renderWindow: null,\n  interactorStyle: null,\n  picker: null,\n  pickingManager: null,\n  initialized: false,\n  enabled: false,\n  enableRender: true,\n  currentRenderer: null,\n  lightFollowCamera: true,\n  desiredUpdateRate: 30.0,\n  stillUpdateRate: 2.0,\n  container: null,\n  // _view: null,\n  recognizeGestures: true,\n  currentGesture: 'Start',\n  animationRequest: null,\n  lastFrameTime: 0.1,\n  recentAnimationFrameRate: 10.0,\n  wheelTimeoutID: 0,\n  moveTimeoutID: 0,\n  lastGamepadValues: {},\n  preventDefaultOnPointerDown: false,\n  preventDefaultOnPointerUp: false,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n\n  // run animation at least until this time\n  model._animationExtendedEnd = 0;\n\n  macro.event(publicAPI, model, 'RenderEvent');\n  handledEvents.forEach((eventName) =>\n    macro.event(publicAPI, model, eventName)\n  );\n\n  // Create get-only macros\n  macro.get(publicAPI, model, [\n    'initialized',\n    'container',\n    'interactorStyle',\n    'lastFrameTime',\n    'recentAnimationFrameRate',\n    '_view',\n  ]);\n\n  // Create get-set macros\n  macro.setGet(publicAPI, model, [\n    'lightFollowCamera',\n    'enabled',\n    'enableRender',\n    'recognizeGestures',\n    'desiredUpdateRate',\n    'stillUpdateRate',\n    'picker',\n    'preventDefaultOnPointerDown',\n    'preventDefaultOnPointerUp',\n  ]);\n  macro.moveToProtected(publicAPI, model, ['view']);\n\n  // For more macro methods, see \"Sources/macros.js\"\n\n  // Object specific methods\n  vtkRenderWindowInteractor(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(\n  extend,\n  'vtkRenderWindowInteractor'\n);\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend, handledEvents, ...Constants };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}