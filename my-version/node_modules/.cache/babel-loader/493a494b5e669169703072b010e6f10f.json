{"ast":null,"code":"import { VtkDataTypes } from 'vtk.js/Sources/Common/Core/DataArray/Constants';\nimport macro from 'vtk.js/Sources/macros';\nimport { registerViewConstructor } from 'vtk.js/Sources/Rendering/Core/RenderWindow';\nimport vtkForwardPass from 'vtk.js/Sources/Rendering/OpenGL/ForwardPass';\nimport vtkOpenGLHardwareSelector from 'vtk.js/Sources/Rendering/OpenGL/HardwareSelector';\nimport vtkShaderCache from 'vtk.js/Sources/Rendering/OpenGL/ShaderCache';\nimport vtkOpenGLTextureUnitManager from 'vtk.js/Sources/Rendering/OpenGL/TextureUnitManager';\nimport vtkOpenGLViewNodeFactory from 'vtk.js/Sources/Rendering/OpenGL/ViewNodeFactory';\nimport vtkRenderPass from 'vtk.js/Sources/Rendering/SceneGraph/RenderPass';\nimport vtkRenderWindowViewNode from 'vtk.js/Sources/Rendering/SceneGraph/RenderWindowViewNode';\nimport { createContextProxyHandler } from 'vtk.js/Sources/Rendering/OpenGL/RenderWindow/ContextProxy';\nconst {\n  vtkDebugMacro,\n  vtkErrorMacro\n} = macro;\nconst SCREENSHOT_PLACEHOLDER = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  width: '100%',\n  height: '100%'\n};\nconst DEFAULT_RESET_FACTORS = {\n  vr: {\n    rescaleFactor: 1.0,\n    translateZ: -0.7 // 0.7 m forward from the camera\n\n  },\n  ar: {\n    rescaleFactor: 0.25,\n    // scale down AR for viewing comfort by default\n    translateZ: -0.5 // 0.5 m forward from the camera\n\n  }\n};\n\nfunction checkRenderTargetSupport(gl, format, type) {\n  // create temporary frame buffer and texture\n  const framebuffer = gl.createFramebuffer();\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, 2, 2, 0, format, type, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0); // check frame buffer status\n\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER); // clean up\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  return status === gl.FRAMEBUFFER_COMPLETE;\n} // ----------------------------------------------------------------------------\n// Monitor the usage of GL context across vtkOpenGLRenderWindow instances\n// ----------------------------------------------------------------------------\n\n\nlet GL_CONTEXT_COUNT = 0;\nconst GL_CONTEXT_LISTENERS = [];\n\nfunction createGLContext() {\n  GL_CONTEXT_COUNT++;\n  GL_CONTEXT_LISTENERS.forEach(cb => cb(GL_CONTEXT_COUNT));\n}\n\nfunction deleteGLContext() {\n  GL_CONTEXT_COUNT--;\n  GL_CONTEXT_LISTENERS.forEach(cb => cb(GL_CONTEXT_COUNT));\n}\n\nexport function pushMonitorGLContextCount(cb) {\n  GL_CONTEXT_LISTENERS.push(cb);\n}\nexport function popMonitorGLContextCount(cb) {\n  return GL_CONTEXT_LISTENERS.pop();\n} // ----------------------------------------------------------------------------\n// vtkOpenGLRenderWindow methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLRenderWindow(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLRenderWindow');\n  const cachingContextHandler = createContextProxyHandler();\n\n  publicAPI.getViewNodeFactory = () => model.myFactory; // prevent default context lost handler\n\n\n  model.canvas.addEventListener('webglcontextlost', event => {\n    event.preventDefault();\n  }, false);\n  model.canvas.addEventListener('webglcontextrestored', publicAPI.restoreContext, false); // Cache the value here as calling it on each frame is expensive\n\n  const isImmersiveVrSupported = navigator.xr !== undefined && navigator.xr.isSessionSupported('immersive-vr'); // Auto update style\n\n  const previousSize = [0, 0];\n\n  function updateWindow() {\n    // Canvas size\n    if (model.renderable) {\n      if (model.size[0] !== previousSize[0] || model.size[1] !== previousSize[1]) {\n        previousSize[0] = model.size[0];\n        previousSize[1] = model.size[1];\n        model.canvas.setAttribute('width', model.size[0]);\n        model.canvas.setAttribute('height', model.size[1]);\n      }\n    } // ImageStream size\n\n\n    if (model.viewStream) {\n      // If same size that's a NoOp\n      model.viewStream.setSize(model.size[0], model.size[1]);\n    } // Offscreen ?\n\n\n    model.canvas.style.display = model.useOffScreen ? 'none' : 'block'; // Cursor type\n\n    if (model.el) {\n      model.el.style.cursor = model.cursorVisibility ? model.cursor : 'none';\n    } // Invalidate cached DOM container size\n\n\n    model.containerSize = null;\n  }\n\n  publicAPI.onModified(updateWindow); // Builds myself.\n\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNodes(model.renderable.getRenderersByReference());\n      publicAPI.removeUnusedNodes();\n      publicAPI.initialize();\n      model.children.forEach(child => {\n        child.setOpenGLRenderWindow(publicAPI);\n      });\n    }\n  };\n\n  publicAPI.initialize = () => {\n    if (!model.initialized) {\n      model.context = publicAPI.get3DContext();\n      model.textureUnitManager = vtkOpenGLTextureUnitManager.newInstance();\n      model.textureUnitManager.setContext(model.context);\n      model.shaderCache.setContext(model.context); // initialize blending for transparency\n\n      const gl = model.context;\n      gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n      gl.depthFunc(gl.LEQUAL);\n      gl.enable(gl.BLEND);\n      model.initialized = true;\n    }\n  };\n\n  publicAPI.makeCurrent = () => {\n    model.context.makeCurrent();\n  };\n\n  publicAPI.setContainer = el => {\n    if (model.el && model.el !== el) {\n      if (model.canvas.parentNode !== model.el) {\n        vtkErrorMacro('Error: canvas parent node does not match container');\n      } // Remove canvas from previous container\n\n\n      model.el.removeChild(model.canvas); // If the renderer has previously added\n      // a background image, remove it from the DOM.\n\n      if (model.el.contains(model.bgImage)) {\n        model.el.removeChild(model.bgImage);\n      }\n    }\n\n    if (model.el !== el) {\n      model.el = el;\n\n      if (model.el) {\n        model.el.appendChild(model.canvas); // If the renderer is set to use a background\n        // image, attach it to the DOM.\n\n        if (model.useBackgroundImage) {\n          model.el.appendChild(model.bgImage);\n        }\n      } // Trigger modified()\n\n\n      publicAPI.modified();\n    }\n  };\n\n  publicAPI.getContainer = () => model.el;\n\n  publicAPI.getContainerSize = () => {\n    if (!model.containerSize && model.el) {\n      const {\n        width,\n        height\n      } = model.el.getBoundingClientRect();\n      model.containerSize = [width, height];\n    }\n\n    return model.containerSize || model.size;\n  };\n\n  publicAPI.getFramebufferSize = () => {\n    if (model.activeFramebuffer) {\n      return model.activeFramebuffer.getSize();\n    }\n\n    return model.size;\n  };\n\n  publicAPI.getPixelData = (x1, y1, x2, y2) => {\n    const pixels = new Uint8Array((x2 - x1 + 1) * (y2 - y1 + 1) * 4);\n    model.context.readPixels(x1, y1, x2 - x1 + 1, y2 - y1 + 1, model.context.RGBA, model.context.UNSIGNED_BYTE, pixels);\n    return pixels;\n  };\n\n  publicAPI.get3DContext = function () {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      preserveDrawingBuffer: false,\n      depth: true,\n      alpha: true,\n      powerPreference: 'high-performance'\n    };\n    let result = null; // Do we have webxr support\n\n    if (isImmersiveVrSupported) {\n      publicAPI.invokeHaveVRDisplay();\n    }\n\n    const webgl2Supported = typeof WebGL2RenderingContext !== 'undefined';\n    model.webgl2 = false;\n\n    if (model.defaultToWebgl2 && webgl2Supported) {\n      result = model.canvas.getContext('webgl2', options);\n\n      if (result) {\n        model.webgl2 = true;\n        vtkDebugMacro('using webgl2');\n      }\n    }\n\n    if (!result) {\n      vtkDebugMacro('using webgl1');\n      result = model.canvas.getContext('webgl', options) || model.canvas.getContext('experimental-webgl', options);\n    }\n\n    return new Proxy(result, cachingContextHandler);\n  }; // Request an XR session on the user device with WebXR,\n  // typically in response to a user request such as a button press\n\n\n  publicAPI.startXR = isAR => {\n    if (navigator.xr === undefined) {\n      throw new Error('WebXR is not available');\n    }\n\n    model.xrSessionIsAR = isAR;\n    const sessionType = isAR ? 'immersive-ar' : 'immersive-vr';\n\n    if (!navigator.xr.isSessionSupported(sessionType)) {\n      if (isAR) {\n        throw new Error('Device does not support AR session');\n      } else {\n        throw new Error('VR display is not available');\n      }\n    }\n\n    if (model.xrSession === null) {\n      navigator.xr.requestSession(sessionType).then(publicAPI.enterXR, () => {\n        throw new Error('Failed to create XR session!');\n      });\n    } else {\n      throw new Error('XR Session already exists!');\n    }\n  }; // When an XR session is available, set up the XRWebGLLayer\n  // and request the first animation frame for the device\n\n\n  publicAPI.enterXR = async xrSession => {\n    model.xrSession = xrSession;\n    model.oldCanvasSize = model.size.slice();\n\n    if (model.xrSession !== null) {\n      const gl = publicAPI.get3DContext();\n      await gl.makeXRCompatible();\n      const glLayer = new global.XRWebGLLayer(model.xrSession, gl);\n      publicAPI.setSize(glLayer.framebufferWidth, glLayer.framebufferHeight);\n      model.xrSession.updateRenderState({\n        baseLayer: glLayer\n      });\n      model.xrSession.requestReferenceSpace('local').then(refSpace => {\n        model.xrReferenceSpace = refSpace;\n      });\n      publicAPI.resetXRScene();\n      model.renderable.getInteractor().switchToXRAnimation();\n      model.xrSceneFrame = model.xrSession.requestAnimationFrame(publicAPI.xrRender);\n    } else {\n      throw new Error('Failed to enter VR with a null xrSession.');\n    }\n  };\n\n  publicAPI.resetXRScene = function () {\n    let inputRescaleFactor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_RESET_FACTORS.vr.rescaleFactor;\n    let inputTranslateZ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_RESET_FACTORS.vr.translateZ;\n    // Adjust world-to-physical parameters for different modalities\n    // Default parameter values are for VR (model.xrSessionIsAR == false)\n    let rescaleFactor = inputRescaleFactor;\n    let translateZ = inputTranslateZ;\n\n    if (model.xrSessionIsAR && rescaleFactor === DEFAULT_RESET_FACTORS.vr.rescaleFactor) {\n      // Scale down by default in AR\n      rescaleFactor = DEFAULT_RESET_FACTORS.ar.rescaleFactor;\n    }\n\n    if (model.xrSessionIsAR && translateZ === DEFAULT_RESET_FACTORS.vr.translateZ) {\n      // Default closer to the camera in AR\n      translateZ = DEFAULT_RESET_FACTORS.ar.translateZ;\n    }\n\n    const ren = model.renderable.getRenderers()[0];\n    ren.resetCamera();\n    const camera = ren.getActiveCamera();\n    let physicalScale = camera.getPhysicalScale();\n    const physicalTranslation = camera.getPhysicalTranslation();\n    physicalScale /= rescaleFactor;\n    translateZ *= physicalScale;\n    physicalTranslation[2] += translateZ;\n    camera.setPhysicalScale(physicalScale);\n    camera.setPhysicalTranslation(physicalTranslation); // Clip at 0.1m, 100.0m in physical space by default\n\n    camera.setClippingRange(0.1 * physicalScale, 100.0 * physicalScale);\n  };\n\n  publicAPI.stopXR = async () => {\n    if (navigator.xr === undefined) {\n      // WebXR polyfill not available so nothing to do\n      return;\n    }\n\n    if (model.xrSession !== null) {\n      model.xrSession.cancelAnimationFrame(model.xrSceneFrame);\n      model.renderable.getInteractor().returnFromXRAnimation();\n      const gl = publicAPI.get3DContext();\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      await model.xrSession.end().catch(error => {\n        if (!(error instanceof DOMException)) {\n          throw error;\n        }\n      });\n      model.xrSession = null;\n    }\n\n    if (model.oldCanvasSize !== undefined) {\n      publicAPI.setSize(...model.oldCanvasSize);\n    } // Reset to default canvas\n\n\n    const ren = model.renderable.getRenderers()[0];\n    ren.getActiveCamera().setProjectionMatrix(null);\n    ren.resetCamera();\n    ren.setViewport(0.0, 0, 1.0, 1.0);\n    publicAPI.traverseAllPasses();\n  };\n\n  publicAPI.xrRender = async (t, frame) => {\n    const xrSession = frame.session;\n    model.renderable.getInteractor().updateXRGamepads(xrSession, frame, model.xrReferenceSpace);\n    model.xrSceneFrame = model.xrSession.requestAnimationFrame(publicAPI.xrRender);\n    const xrPose = frame.getViewerPose(model.xrReferenceSpace);\n\n    if (xrPose) {\n      const gl = publicAPI.get3DContext();\n\n      if (model.xrSessionIsAR && model.oldCanvasSize !== undefined) {\n        gl.canvas.width = model.oldCanvasSize[0];\n        gl.canvas.height = model.oldCanvasSize[1];\n      }\n\n      const glLayer = xrSession.renderState.baseLayer;\n      gl.bindFramebuffer(gl.FRAMEBUFFER, glLayer.framebuffer);\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      gl.clear(gl.DEPTH_BUFFER_BIT); // get the first renderer\n\n      const ren = model.renderable.getRenderers()[0]; // Do a render pass for each eye\n\n      xrPose.views.forEach(view => {\n        const viewport = glLayer.getViewport(view);\n        gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height); // TODO: Appropriate handling for AR passthrough on HMDs\n        // with two eyes will require further investigation.\n\n        if (!model.xrSessionIsAR) {\n          if (view.eye === 'left') {\n            ren.setViewport(0, 0, 0.5, 1.0);\n          } else if (view.eye === 'right') {\n            ren.setViewport(0.5, 0, 1.0, 1.0);\n          } else {\n            // No handling for non-eye viewport\n            return;\n          }\n        }\n\n        ren.getActiveCamera().computeViewParametersFromPhysicalMatrix(view.transform.inverse.matrix);\n        ren.getActiveCamera().setProjectionMatrix(view.projectionMatrix);\n        publicAPI.traverseAllPasses();\n      });\n    }\n  };\n\n  publicAPI.restoreContext = () => {\n    const rp = vtkRenderPass.newInstance();\n    rp.setCurrentOperation('Release');\n    rp.traverse(publicAPI, null);\n  };\n\n  publicAPI.activateTexture = texture => {\n    // Only add if it isn't already there\n    const result = model._textureResourceIds.get(texture);\n\n    if (result !== undefined) {\n      model.context.activeTexture(model.context.TEXTURE0 + result);\n      return;\n    }\n\n    const activeUnit = publicAPI.getTextureUnitManager().allocate();\n\n    if (activeUnit < 0) {\n      vtkErrorMacro('Hardware does not support the number of textures defined.');\n      return;\n    }\n\n    model._textureResourceIds.set(texture, activeUnit);\n\n    model.context.activeTexture(model.context.TEXTURE0 + activeUnit);\n  };\n\n  publicAPI.deactivateTexture = texture => {\n    // Only deactivate if it isn't already there\n    const result = model._textureResourceIds.get(texture);\n\n    if (result !== undefined) {\n      publicAPI.getTextureUnitManager().free(result);\n      delete model._textureResourceIds.delete(texture);\n    }\n  };\n\n  publicAPI.getTextureUnitForTexture = texture => {\n    const result = model._textureResourceIds.get(texture);\n\n    if (result !== undefined) {\n      return result;\n    }\n\n    return -1;\n  };\n\n  publicAPI.getDefaultTextureInternalFormat = (vtktype, numComps, useFloat) => {\n    if (model.webgl2) {\n      switch (vtktype) {\n        case VtkDataTypes.UNSIGNED_CHAR:\n          switch (numComps) {\n            case 1:\n              return model.context.R8;\n\n            case 2:\n              return model.context.RG8;\n\n            case 3:\n              return model.context.RGB8;\n\n            case 4:\n            default:\n              return model.context.RGBA8;\n          }\n\n        case VtkDataTypes.FLOAT:\n        default:\n          switch (numComps) {\n            case 1:\n              return model.context.R16F;\n\n            case 2:\n              return model.context.RG16F;\n\n            case 3:\n              return model.context.RGB16F;\n\n            case 4:\n            default:\n              return model.context.RGBA16F;\n          }\n\n      }\n    } // webgl1 only supports four types\n\n\n    switch (numComps) {\n      case 1:\n        return model.context.LUMINANCE;\n\n      case 2:\n        return model.context.LUMINANCE_ALPHA;\n\n      case 3:\n        return model.context.RGB;\n\n      case 4:\n      default:\n        return model.context.RGBA;\n    }\n  };\n\n  publicAPI.setBackgroundImage = img => {\n    model.bgImage.src = img.src;\n  };\n\n  publicAPI.setUseBackgroundImage = value => {\n    model.useBackgroundImage = value; // Add or remove the background image from the\n    // DOM as specified.\n\n    if (model.useBackgroundImage && !model.el.contains(model.bgImage)) {\n      model.el.appendChild(model.bgImage);\n    } else if (!model.useBackgroundImage && model.el.contains(model.bgImage)) {\n      model.el.removeChild(model.bgImage);\n    }\n  };\n\n  function getCanvasDataURL() {\n    let format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : model.imageFormat;\n    // Copy current canvas to not modify the original\n    const temporaryCanvas = document.createElement('canvas');\n    const temporaryContext = temporaryCanvas.getContext('2d');\n    temporaryCanvas.width = model.canvas.width;\n    temporaryCanvas.height = model.canvas.height;\n    temporaryContext.drawImage(model.canvas, 0, 0); // Get current client rect to place canvas\n\n    const mainBoundingClientRect = model.canvas.getBoundingClientRect();\n    const renderWindow = model.renderable;\n    const renderers = renderWindow.getRenderers();\n    renderers.forEach(renderer => {\n      const viewProps = renderer.getViewProps();\n      viewProps.forEach(viewProp => {\n        // Check if the prop has a container that should have canvas\n        if (viewProp.getContainer) {\n          const container = viewProp.getContainer();\n          const canvasList = container.getElementsByTagName('canvas'); // Go throughout all canvas and copy it into temporary main canvas\n\n          for (let i = 0; i < canvasList.length; i++) {\n            const currentCanvas = canvasList[i];\n            const boundingClientRect = currentCanvas.getBoundingClientRect();\n            const newXPosition = boundingClientRect.x - mainBoundingClientRect.x;\n            const newYPosition = boundingClientRect.y - mainBoundingClientRect.y;\n            temporaryContext.drawImage(currentCanvas, newXPosition, newYPosition);\n          }\n        }\n      });\n    });\n    const screenshot = temporaryCanvas.toDataURL(format);\n    temporaryCanvas.remove();\n    publicAPI.invokeImageReady(screenshot);\n  }\n\n  publicAPI.captureNextImage = function () {\n    let format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'image/png';\n    let {\n      resetCamera = false,\n      size = null,\n      scale = 1\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (model.deleted) {\n      return null;\n    }\n\n    model.imageFormat = format;\n    const previous = model.notifyStartCaptureImage;\n    model.notifyStartCaptureImage = true;\n    model._screenshot = {\n      size: !!size || scale !== 1 ? size || model.size.map(val => val * scale) : null\n    };\n    return new Promise((resolve, reject) => {\n      const subscription = publicAPI.onImageReady(imageURL => {\n        if (model._screenshot.size === null) {\n          model.notifyStartCaptureImage = previous;\n          subscription.unsubscribe();\n\n          if (model._screenshot.placeHolder) {\n            // resize the main canvas back to its original size and show it\n            model.size = model._screenshot.originalSize; // process the resize\n\n            publicAPI.modified(); // restore the saved camera parameters, if applicable\n\n            if (model._screenshot.cameras) {\n              model._screenshot.cameras.forEach(_ref => {\n                let {\n                  restoreParamsFn,\n                  arg\n                } = _ref;\n                return restoreParamsFn(arg);\n              });\n            } // Trigger a render at the original size\n\n\n            publicAPI.traverseAllPasses(); // Remove and clean up the placeholder, revealing the original\n\n            model.el.removeChild(model._screenshot.placeHolder);\n\n            model._screenshot.placeHolder.remove();\n\n            model._screenshot = null;\n          }\n\n          resolve(imageURL);\n        } else {\n          // Create a placeholder image overlay while we resize and render\n          const tmpImg = document.createElement('img');\n          tmpImg.style = SCREENSHOT_PLACEHOLDER;\n          tmpImg.src = imageURL;\n          model._screenshot.placeHolder = model.el.appendChild(tmpImg); // hide the main canvas\n\n          model.canvas.style.display = 'none'; // remember the main canvas original size, then resize it\n\n          model._screenshot.originalSize = model.size;\n          model.size = model._screenshot.size;\n          model._screenshot.size = null; // process the resize\n\n          publicAPI.modified();\n\n          if (resetCamera) {\n            const isUserResetCamera = resetCamera !== true; // If resetCamera was requested, we first save camera parameters\n            // from all the renderers, so we can restore them later\n\n            model._screenshot.cameras = model.renderable.getRenderers().map(renderer => {\n              const camera = renderer.getActiveCamera();\n              const params = camera.get('focalPoint', 'position', 'parallelScale');\n              return {\n                resetCameraArgs: isUserResetCamera ? {\n                  renderer\n                } : undefined,\n                resetCameraFn: isUserResetCamera ? resetCamera : renderer.resetCamera,\n                restoreParamsFn: camera.set,\n                // \"clone\" the params so we don't keep refs to properties\n                arg: JSON.parse(JSON.stringify(params))\n              };\n            }); // Perform the resetCamera() on each renderer only after capturing\n            // the params from all active cameras, in case there happen to be\n            // linked cameras among the renderers.\n\n            model._screenshot.cameras.forEach(_ref2 => {\n              let {\n                resetCameraFn,\n                resetCameraArgs\n              } = _ref2;\n              return resetCameraFn(resetCameraArgs);\n            });\n          } // Trigger a render at the custom size\n\n\n          publicAPI.traverseAllPasses();\n        }\n      });\n    });\n  };\n\n  let hardwareMaximumLineWidth;\n\n  publicAPI.getHardwareMaximumLineWidth = () => {\n    // We cache the result of this function because `getParameter` is slow\n    if (hardwareMaximumLineWidth != null) {\n      return hardwareMaximumLineWidth;\n    }\n\n    const gl = publicAPI.get3DContext();\n    const lineWidthRange = gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE);\n    hardwareMaximumLineWidth = lineWidthRange[1];\n    return lineWidthRange[1];\n  };\n\n  publicAPI.getGLInformations = () => {\n    const gl = publicAPI.get3DContext();\n    const glTextureFloat = gl.getExtension('OES_texture_float');\n    const glTextureHalfFloat = gl.getExtension('OES_texture_half_float');\n    const glDebugRendererInfo = gl.getExtension('WEBGL_debug_renderer_info');\n    const glDrawBuffers = gl.getExtension('WEBGL_draw_buffers');\n    const glAnisotropic = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n    const params = [['Max Vertex Attributes', 'MAX_VERTEX_ATTRIBS', gl.getParameter(gl.MAX_VERTEX_ATTRIBS)], ['Max Varying Vectors', 'MAX_VARYING_VECTORS', gl.getParameter(gl.MAX_VARYING_VECTORS)], ['Max Vertex Uniform Vectors', 'MAX_VERTEX_UNIFORM_VECTORS', gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS)], ['Max Fragment Uniform Vectors', 'MAX_FRAGMENT_UNIFORM_VECTORS', gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS)], ['Max Fragment Texture Image Units', 'MAX_TEXTURE_IMAGE_UNITS', gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS)], ['Max Vertex Texture Image Units', 'MAX_VERTEX_TEXTURE_IMAGE_UNITS', gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS)], ['Max Combined Texture Image Units', 'MAX_COMBINED_TEXTURE_IMAGE_UNITS', gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS)], ['Max 2D Texture Size', 'MAX_TEXTURE_SIZE', gl.getParameter(gl.MAX_TEXTURE_SIZE)], ['Max Cube Texture Size', 'MAX_CUBE_MAP_TEXTURE_SIZE', gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE)], ['Max Texture Anisotropy', 'MAX_TEXTURE_MAX_ANISOTROPY_EXT', glAnisotropic && gl.getParameter(glAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT)], ['Point Size Range', 'ALIASED_POINT_SIZE_RANGE', gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE).join(' - ')], ['Line Width Range', 'ALIASED_LINE_WIDTH_RANGE', gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE).join(' - ')], ['Max Viewport Dimensions', 'MAX_VIEWPORT_DIMS', gl.getParameter(gl.MAX_VIEWPORT_DIMS).join(' - ')], ['Max Renderbuffer Size', 'MAX_RENDERBUFFER_SIZE', gl.getParameter(gl.MAX_RENDERBUFFER_SIZE)], ['Framebuffer Red Bits', 'RED_BITS', gl.getParameter(gl.RED_BITS)], ['Framebuffer Green Bits', 'GREEN_BITS', gl.getParameter(gl.GREEN_BITS)], ['Framebuffer Blue Bits', 'BLUE_BITS', gl.getParameter(gl.BLUE_BITS)], ['Framebuffer Alpha Bits', 'ALPHA_BITS', gl.getParameter(gl.ALPHA_BITS)], ['Framebuffer Depth Bits', 'DEPTH_BITS', gl.getParameter(gl.DEPTH_BITS)], ['Framebuffer Stencil Bits', 'STENCIL_BITS', gl.getParameter(gl.STENCIL_BITS)], ['Framebuffer Subpixel Bits', 'SUBPIXEL_BITS', gl.getParameter(gl.SUBPIXEL_BITS)], ['MSAA Samples', 'SAMPLES', gl.getParameter(gl.SAMPLES)], ['MSAA Sample Buffers', 'SAMPLE_BUFFERS', gl.getParameter(gl.SAMPLE_BUFFERS)], ['Supported Formats for UByte Render Targets     ', 'UNSIGNED_BYTE RENDER TARGET FORMATS', [glTextureFloat && checkRenderTargetSupport(gl, gl.RGBA, gl.UNSIGNED_BYTE) ? 'RGBA' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.RGB, gl.UNSIGNED_BYTE) ? 'RGB' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.LUMINANCE, gl.UNSIGNED_BYTE) ? 'LUMINANCE' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.ALPHA, gl.UNSIGNED_BYTE) ? 'ALPHA' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.LUMINANCE_ALPHA, gl.UNSIGNED_BYTE) ? 'LUMINANCE_ALPHA' : ''].join(' ')], ['Supported Formats for Half Float Render Targets', 'HALF FLOAT RENDER TARGET FORMATS', [glTextureHalfFloat && checkRenderTargetSupport(gl, gl.RGBA, glTextureHalfFloat.HALF_FLOAT_OES) ? 'RGBA' : '', glTextureHalfFloat && checkRenderTargetSupport(gl, gl.RGB, glTextureHalfFloat.HALF_FLOAT_OES) ? 'RGB' : '', glTextureHalfFloat && checkRenderTargetSupport(gl, gl.LUMINANCE, glTextureHalfFloat.HALF_FLOAT_OES) ? 'LUMINANCE' : '', glTextureHalfFloat && checkRenderTargetSupport(gl, gl.ALPHA, glTextureHalfFloat.HALF_FLOAT_OES) ? 'ALPHA' : '', glTextureHalfFloat && checkRenderTargetSupport(gl, gl.LUMINANCE_ALPHA, glTextureHalfFloat.HALF_FLOAT_OES) ? 'LUMINANCE_ALPHA' : ''].join(' ')], ['Supported Formats for Full Float Render Targets', 'FLOAT RENDER TARGET FORMATS', [glTextureFloat && checkRenderTargetSupport(gl, gl.RGBA, gl.FLOAT) ? 'RGBA' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.RGB, gl.FLOAT) ? 'RGB' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.LUMINANCE, gl.FLOAT) ? 'LUMINANCE' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.ALPHA, gl.FLOAT) ? 'ALPHA' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.LUMINANCE_ALPHA, gl.FLOAT) ? 'LUMINANCE_ALPHA' : ''].join(' ')], ['Max Multiple Render Targets Buffers', 'MAX_DRAW_BUFFERS_WEBGL', glDrawBuffers ? gl.getParameter(glDrawBuffers.MAX_DRAW_BUFFERS_WEBGL) : 0], ['High Float Precision in Vertex Shader', 'HIGH_FLOAT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).rangeMax, '</sup>)'].join('')], ['Medium Float Precision in Vertex Shader', 'MEDIUM_FLOAT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).rangeMax, '</sup>)'].join('')], ['Low Float Precision in Vertex Shader', 'LOW_FLOAT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT).rangeMax, '</sup>)'].join('')], ['High Float Precision in Fragment Shader', 'HIGH_FLOAT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).rangeMax, '</sup>)'].join('')], ['Medium Float Precision in Fragment Shader', 'MEDIUM_FLOAT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).rangeMax, '</sup>)'].join('')], ['Low Float Precision in Fragment Shader', 'LOW_FLOAT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT).rangeMax, '</sup>)'].join('')], ['High Int Precision in Vertex Shader', 'HIGH_INT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT).rangeMax, '</sup>)'].join('')], ['Medium Int Precision in Vertex Shader', 'MEDIUM_INT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT).rangeMax, '</sup>)'].join('')], ['Low Int Precision in Vertex Shader', 'LOW_INT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT).rangeMax, '</sup>)'].join('')], ['High Int Precision in Fragment Shader', 'HIGH_INT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT).rangeMax, '</sup>)'].join('')], ['Medium Int Precision in Fragment Shader', 'MEDIUM_INT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT).rangeMax, '</sup>)'].join('')], ['Low Int Precision in Fragment Shader', 'LOW_INT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT).rangeMax, '</sup>)'].join('')], ['Supported Extensions', 'EXTENSIONS', gl.getSupportedExtensions().join('<br/>\\t\\t\\t\\t\\t    ')], ['WebGL Renderer', 'RENDERER', gl.getParameter(gl.RENDERER)], ['WebGL Vendor', 'VENDOR', gl.getParameter(gl.VENDOR)], ['WebGL Version', 'VERSION', gl.getParameter(gl.VERSION)], ['Shading Language Version', 'SHADING_LANGUAGE_VERSION', gl.getParameter(gl.SHADING_LANGUAGE_VERSION)], ['Unmasked Renderer', 'UNMASKED_RENDERER', glDebugRendererInfo && gl.getParameter(glDebugRendererInfo.UNMASKED_RENDERER_WEBGL)], ['Unmasked Vendor', 'UNMASKED_VENDOR', glDebugRendererInfo && gl.getParameter(glDebugRendererInfo.UNMASKED_VENDOR_WEBGL)], ['WebGL Version', 'WEBGL_VERSION', model.webgl2 ? 2 : 1]];\n    const result = {};\n\n    while (params.length) {\n      const [label, key, value] = params.pop();\n\n      if (key) {\n        result[key] = {\n          label,\n          value\n        };\n      }\n    }\n\n    return result;\n  };\n\n  publicAPI.traverseAllPasses = () => {\n    if (model.renderPasses) {\n      for (let index = 0; index < model.renderPasses.length; ++index) {\n        model.renderPasses[index].traverse(publicAPI, null);\n      }\n    }\n\n    if (model.notifyStartCaptureImage) {\n      getCanvasDataURL();\n    }\n  };\n\n  publicAPI.disableCullFace = () => {\n    if (model.cullFaceEnabled) {\n      model.context.disable(model.context.CULL_FACE);\n      model.cullFaceEnabled = false;\n    }\n  };\n\n  publicAPI.enableCullFace = () => {\n    if (!model.cullFaceEnabled) {\n      model.context.enable(model.context.CULL_FACE);\n      model.cullFaceEnabled = true;\n    }\n  };\n\n  publicAPI.setViewStream = stream => {\n    if (model.viewStream === stream) {\n      return false;\n    }\n\n    if (model.subscription) {\n      model.subscription.unsubscribe();\n      model.subscription = null;\n    }\n\n    model.viewStream = stream;\n\n    if (model.viewStream) {\n      // Force background to be transparent + render\n      const mainRenderer = model.renderable.getRenderers()[0];\n      mainRenderer.getBackgroundByReference()[3] = 0; // Enable display of the background image\n\n      publicAPI.setUseBackgroundImage(true); // Bind to remote stream\n\n      model.subscription = model.viewStream.onImageReady(e => publicAPI.setBackgroundImage(e.image));\n      model.viewStream.setSize(model.size[0], model.size[1]);\n      model.viewStream.invalidateCache();\n      model.viewStream.render();\n      publicAPI.modified();\n    }\n\n    return true;\n  };\n\n  publicAPI.createSelector = () => {\n    const ret = vtkOpenGLHardwareSelector.newInstance();\n    ret.setOpenGLRenderWindow(publicAPI);\n    return ret;\n  };\n\n  publicAPI.delete = macro.chain(publicAPI.delete, publicAPI.setViewStream, deleteGLContext);\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  cullFaceEnabled: false,\n  shaderCache: null,\n  initialized: false,\n  context: null,\n  canvas: null,\n  cursorVisibility: true,\n  cursor: 'pointer',\n  textureUnitManager: null,\n  textureResourceIds: null,\n  containerSize: null,\n  renderPasses: [],\n  notifyStartCaptureImage: false,\n  webgl2: false,\n  defaultToWebgl2: true,\n  // attempt webgl2 on by default\n  activeFramebuffer: null,\n  xrSession: null,\n  xrSessionIsAR: false,\n  xrReferenceSpace: null,\n  xrSupported: true,\n  imageFormat: 'image/png',\n  useOffScreen: false,\n  useBackgroundImage: false\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkRenderWindowViewNode.extend(publicAPI, model, initialValues); // Create internal instances\n\n  model.canvas = document.createElement('canvas');\n  model.canvas.style.width = '100%';\n  createGLContext();\n\n  if (!model.selector) {\n    model.selector = vtkOpenGLHardwareSelector.newInstance();\n    model.selector.setOpenGLRenderWindow(publicAPI);\n  } // Create internal bgImage\n\n\n  model.bgImage = new Image();\n  model.bgImage.style.position = 'absolute';\n  model.bgImage.style.left = '0';\n  model.bgImage.style.top = '0';\n  model.bgImage.style.width = '100%';\n  model.bgImage.style.height = '100%';\n  model.bgImage.style.zIndex = '-1';\n  model._textureResourceIds = new Map();\n  model.myFactory = vtkOpenGLViewNodeFactory.newInstance();\n  /* eslint-disable no-use-before-define */\n\n  model.myFactory.registerOverride('vtkRenderWindow', newInstance);\n  /* eslint-enable no-use-before-define */\n\n  model.shaderCache = vtkShaderCache.newInstance();\n  model.shaderCache.setOpenGLRenderWindow(publicAPI); // setup default forward pass rendering\n\n  model.renderPasses[0] = vtkForwardPass.newInstance();\n  macro.event(publicAPI, model, 'imageReady');\n  macro.event(publicAPI, model, 'haveVRDisplay'); // Build VTK API\n\n  macro.get(publicAPI, model, ['shaderCache', 'textureUnitManager', 'webgl2', 'vrDisplay', 'useBackgroundImage', 'xrSupported']);\n  macro.setGet(publicAPI, model, ['initialized', 'context', 'canvas', 'renderPasses', 'notifyStartCaptureImage', 'defaultToWebgl2', 'cursor', 'useOffScreen', // might want to make this not call modified as\n  // we change the active framebuffer a lot. Or maybe\n  // only mark modified if the size or depth\n  // of the buffer has changed\n  'activeFramebuffer']);\n  macro.setGetArray(publicAPI, model, ['size'], 2); // Object methods\n\n  vtkOpenGLRenderWindow(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkOpenGLRenderWindow'); // ----------------------------------------------------------------------------\n// Register API specific RenderWindow implementation\n// ----------------------------------------------------------------------------\n\nregisterViewConstructor('WebGL', newInstance); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend,\n  pushMonitorGLContextCount,\n  popMonitorGLContextCount\n};","map":{"version":3,"names":["VtkDataTypes","macro","registerViewConstructor","vtkForwardPass","vtkOpenGLHardwareSelector","vtkShaderCache","vtkOpenGLTextureUnitManager","vtkOpenGLViewNodeFactory","vtkRenderPass","vtkRenderWindowViewNode","createContextProxyHandler","vtkDebugMacro","vtkErrorMacro","SCREENSHOT_PLACEHOLDER","position","top","left","width","height","DEFAULT_RESET_FACTORS","vr","rescaleFactor","translateZ","ar","checkRenderTargetSupport","gl","format","type","framebuffer","createFramebuffer","texture","createTexture","bindTexture","TEXTURE_2D","texImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","GL_CONTEXT_COUNT","GL_CONTEXT_LISTENERS","createGLContext","forEach","cb","deleteGLContext","pushMonitorGLContextCount","push","popMonitorGLContextCount","pop","vtkOpenGLRenderWindow","publicAPI","model","classHierarchy","cachingContextHandler","getViewNodeFactory","myFactory","canvas","addEventListener","event","preventDefault","restoreContext","isImmersiveVrSupported","navigator","xr","undefined","isSessionSupported","previousSize","updateWindow","renderable","size","setAttribute","viewStream","setSize","style","display","useOffScreen","el","cursor","cursorVisibility","containerSize","onModified","buildPass","prepass","prepareNodes","addMissingNodes","getRenderersByReference","removeUnusedNodes","initialize","children","child","setOpenGLRenderWindow","initialized","context","get3DContext","textureUnitManager","newInstance","setContext","shaderCache","blendFuncSeparate","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","ONE","depthFunc","LEQUAL","enable","BLEND","makeCurrent","setContainer","parentNode","removeChild","contains","bgImage","appendChild","useBackgroundImage","modified","getContainer","getContainerSize","getBoundingClientRect","getFramebufferSize","activeFramebuffer","getSize","getPixelData","x1","y1","x2","y2","pixels","Uint8Array","readPixels","RGBA","UNSIGNED_BYTE","options","preserveDrawingBuffer","depth","alpha","powerPreference","result","invokeHaveVRDisplay","webgl2Supported","WebGL2RenderingContext","webgl2","defaultToWebgl2","getContext","Proxy","startXR","isAR","Error","xrSessionIsAR","sessionType","xrSession","requestSession","then","enterXR","oldCanvasSize","slice","makeXRCompatible","glLayer","global","XRWebGLLayer","framebufferWidth","framebufferHeight","updateRenderState","baseLayer","requestReferenceSpace","refSpace","xrReferenceSpace","resetXRScene","getInteractor","switchToXRAnimation","xrSceneFrame","requestAnimationFrame","xrRender","inputRescaleFactor","inputTranslateZ","ren","getRenderers","resetCamera","camera","getActiveCamera","physicalScale","getPhysicalScale","physicalTranslation","getPhysicalTranslation","setPhysicalScale","setPhysicalTranslation","setClippingRange","stopXR","cancelAnimationFrame","returnFromXRAnimation","end","catch","error","DOMException","setProjectionMatrix","setViewport","traverseAllPasses","t","frame","session","updateXRGamepads","xrPose","getViewerPose","renderState","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","views","view","viewport","getViewport","x","y","eye","computeViewParametersFromPhysicalMatrix","transform","inverse","matrix","projectionMatrix","rp","setCurrentOperation","traverse","activateTexture","_textureResourceIds","get","activeTexture","TEXTURE0","activeUnit","getTextureUnitManager","allocate","set","deactivateTexture","free","delete","getTextureUnitForTexture","getDefaultTextureInternalFormat","vtktype","numComps","useFloat","UNSIGNED_CHAR","R8","RG8","RGB8","RGBA8","FLOAT","R16F","RG16F","RGB16F","RGBA16F","LUMINANCE","LUMINANCE_ALPHA","RGB","setBackgroundImage","img","src","setUseBackgroundImage","value","getCanvasDataURL","imageFormat","temporaryCanvas","document","createElement","temporaryContext","drawImage","mainBoundingClientRect","renderWindow","renderers","renderer","viewProps","getViewProps","viewProp","container","canvasList","getElementsByTagName","i","length","currentCanvas","boundingClientRect","newXPosition","newYPosition","screenshot","toDataURL","remove","invokeImageReady","captureNextImage","scale","deleted","previous","notifyStartCaptureImage","_screenshot","map","val","Promise","resolve","reject","subscription","onImageReady","imageURL","unsubscribe","placeHolder","originalSize","cameras","restoreParamsFn","arg","tmpImg","isUserResetCamera","params","resetCameraArgs","resetCameraFn","JSON","parse","stringify","hardwareMaximumLineWidth","getHardwareMaximumLineWidth","lineWidthRange","getParameter","ALIASED_LINE_WIDTH_RANGE","getGLInformations","glTextureFloat","getExtension","glTextureHalfFloat","glDebugRendererInfo","glDrawBuffers","glAnisotropic","MAX_VERTEX_ATTRIBS","MAX_VARYING_VECTORS","MAX_VERTEX_UNIFORM_VECTORS","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_TEXTURE_IMAGE_UNITS","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_COMBINED_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","MAX_TEXTURE_MAX_ANISOTROPY_EXT","ALIASED_POINT_SIZE_RANGE","join","MAX_VIEWPORT_DIMS","MAX_RENDERBUFFER_SIZE","RED_BITS","GREEN_BITS","BLUE_BITS","ALPHA_BITS","DEPTH_BITS","STENCIL_BITS","SUBPIXEL_BITS","SAMPLES","SAMPLE_BUFFERS","ALPHA","HALF_FLOAT_OES","MAX_DRAW_BUFFERS_WEBGL","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","precision","rangeMin","rangeMax","MEDIUM_FLOAT","LOW_FLOAT","FRAGMENT_SHADER","HIGH_INT","MEDIUM_INT","LOW_INT","getSupportedExtensions","RENDERER","VENDOR","VERSION","SHADING_LANGUAGE_VERSION","UNMASKED_RENDERER_WEBGL","UNMASKED_VENDOR_WEBGL","label","key","renderPasses","index","disableCullFace","cullFaceEnabled","disable","CULL_FACE","enableCullFace","setViewStream","stream","mainRenderer","getBackgroundByReference","e","image","invalidateCache","render","createSelector","ret","chain","DEFAULT_VALUES","textureResourceIds","xrSupported","extend","initialValues","Object","assign","selector","Image","zIndex","Map","registerOverride","setGet","setGetArray"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/OpenGL/RenderWindow/index.js"],"sourcesContent":["import { VtkDataTypes } from 'vtk.js/Sources/Common/Core/DataArray/Constants';\nimport macro from 'vtk.js/Sources/macros';\nimport { registerViewConstructor } from 'vtk.js/Sources/Rendering/Core/RenderWindow';\nimport vtkForwardPass from 'vtk.js/Sources/Rendering/OpenGL/ForwardPass';\nimport vtkOpenGLHardwareSelector from 'vtk.js/Sources/Rendering/OpenGL/HardwareSelector';\nimport vtkShaderCache from 'vtk.js/Sources/Rendering/OpenGL/ShaderCache';\nimport vtkOpenGLTextureUnitManager from 'vtk.js/Sources/Rendering/OpenGL/TextureUnitManager';\nimport vtkOpenGLViewNodeFactory from 'vtk.js/Sources/Rendering/OpenGL/ViewNodeFactory';\nimport vtkRenderPass from 'vtk.js/Sources/Rendering/SceneGraph/RenderPass';\nimport vtkRenderWindowViewNode from 'vtk.js/Sources/Rendering/SceneGraph/RenderWindowViewNode';\nimport { createContextProxyHandler } from 'vtk.js/Sources/Rendering/OpenGL/RenderWindow/ContextProxy';\n\nconst { vtkDebugMacro, vtkErrorMacro } = macro;\n\nconst SCREENSHOT_PLACEHOLDER = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  width: '100%',\n  height: '100%',\n};\n\nconst DEFAULT_RESET_FACTORS = {\n  vr: {\n    rescaleFactor: 1.0,\n    translateZ: -0.7, // 0.7 m forward from the camera\n  },\n  ar: {\n    rescaleFactor: 0.25, // scale down AR for viewing comfort by default\n    translateZ: -0.5, // 0.5 m forward from the camera\n  },\n};\n\nfunction checkRenderTargetSupport(gl, format, type) {\n  // create temporary frame buffer and texture\n  const framebuffer = gl.createFramebuffer();\n  const texture = gl.createTexture();\n\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, 2, 2, 0, format, type, null);\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    texture,\n    0\n  );\n\n  // check frame buffer status\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\n  // clean up\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.bindTexture(gl.TEXTURE_2D, null);\n\n  return status === gl.FRAMEBUFFER_COMPLETE;\n}\n\n// ----------------------------------------------------------------------------\n// Monitor the usage of GL context across vtkOpenGLRenderWindow instances\n// ----------------------------------------------------------------------------\n\nlet GL_CONTEXT_COUNT = 0;\nconst GL_CONTEXT_LISTENERS = [];\n\nfunction createGLContext() {\n  GL_CONTEXT_COUNT++;\n  GL_CONTEXT_LISTENERS.forEach((cb) => cb(GL_CONTEXT_COUNT));\n}\n\nfunction deleteGLContext() {\n  GL_CONTEXT_COUNT--;\n  GL_CONTEXT_LISTENERS.forEach((cb) => cb(GL_CONTEXT_COUNT));\n}\n\nexport function pushMonitorGLContextCount(cb) {\n  GL_CONTEXT_LISTENERS.push(cb);\n}\n\nexport function popMonitorGLContextCount(cb) {\n  return GL_CONTEXT_LISTENERS.pop();\n}\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLRenderWindow methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLRenderWindow(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLRenderWindow');\n\n  const cachingContextHandler = createContextProxyHandler();\n\n  publicAPI.getViewNodeFactory = () => model.myFactory;\n\n  // prevent default context lost handler\n  model.canvas.addEventListener(\n    'webglcontextlost',\n    (event) => {\n      event.preventDefault();\n    },\n    false\n  );\n\n  model.canvas.addEventListener(\n    'webglcontextrestored',\n    publicAPI.restoreContext,\n    false\n  );\n\n  // Cache the value here as calling it on each frame is expensive\n  const isImmersiveVrSupported =\n    navigator.xr !== undefined &&\n    navigator.xr.isSessionSupported('immersive-vr');\n\n  // Auto update style\n  const previousSize = [0, 0];\n  function updateWindow() {\n    // Canvas size\n    if (model.renderable) {\n      if (\n        model.size[0] !== previousSize[0] ||\n        model.size[1] !== previousSize[1]\n      ) {\n        previousSize[0] = model.size[0];\n        previousSize[1] = model.size[1];\n        model.canvas.setAttribute('width', model.size[0]);\n        model.canvas.setAttribute('height', model.size[1]);\n      }\n    }\n\n    // ImageStream size\n    if (model.viewStream) {\n      // If same size that's a NoOp\n      model.viewStream.setSize(model.size[0], model.size[1]);\n    }\n\n    // Offscreen ?\n    model.canvas.style.display = model.useOffScreen ? 'none' : 'block';\n\n    // Cursor type\n    if (model.el) {\n      model.el.style.cursor = model.cursorVisibility ? model.cursor : 'none';\n    }\n\n    // Invalidate cached DOM container size\n    model.containerSize = null;\n  }\n  publicAPI.onModified(updateWindow);\n\n  // Builds myself.\n  publicAPI.buildPass = (prepass) => {\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNodes(model.renderable.getRenderersByReference());\n      publicAPI.removeUnusedNodes();\n\n      publicAPI.initialize();\n      model.children.forEach((child) => {\n        child.setOpenGLRenderWindow(publicAPI);\n      });\n    }\n  };\n\n  publicAPI.initialize = () => {\n    if (!model.initialized) {\n      model.context = publicAPI.get3DContext();\n      model.textureUnitManager = vtkOpenGLTextureUnitManager.newInstance();\n      model.textureUnitManager.setContext(model.context);\n      model.shaderCache.setContext(model.context);\n      // initialize blending for transparency\n      const gl = model.context;\n      gl.blendFuncSeparate(\n        gl.SRC_ALPHA,\n        gl.ONE_MINUS_SRC_ALPHA,\n        gl.ONE,\n        gl.ONE_MINUS_SRC_ALPHA\n      );\n      gl.depthFunc(gl.LEQUAL);\n      gl.enable(gl.BLEND);\n      model.initialized = true;\n    }\n  };\n\n  publicAPI.makeCurrent = () => {\n    model.context.makeCurrent();\n  };\n\n  publicAPI.setContainer = (el) => {\n    if (model.el && model.el !== el) {\n      if (model.canvas.parentNode !== model.el) {\n        vtkErrorMacro('Error: canvas parent node does not match container');\n      }\n\n      // Remove canvas from previous container\n      model.el.removeChild(model.canvas);\n\n      // If the renderer has previously added\n      // a background image, remove it from the DOM.\n      if (model.el.contains(model.bgImage)) {\n        model.el.removeChild(model.bgImage);\n      }\n    }\n\n    if (model.el !== el) {\n      model.el = el;\n      if (model.el) {\n        model.el.appendChild(model.canvas);\n\n        // If the renderer is set to use a background\n        // image, attach it to the DOM.\n        if (model.useBackgroundImage) {\n          model.el.appendChild(model.bgImage);\n        }\n      }\n\n      // Trigger modified()\n      publicAPI.modified();\n    }\n  };\n\n  publicAPI.getContainer = () => model.el;\n\n  publicAPI.getContainerSize = () => {\n    if (!model.containerSize && model.el) {\n      const { width, height } = model.el.getBoundingClientRect();\n      model.containerSize = [width, height];\n    }\n    return model.containerSize || model.size;\n  };\n\n  publicAPI.getFramebufferSize = () => {\n    if (model.activeFramebuffer) {\n      return model.activeFramebuffer.getSize();\n    }\n    return model.size;\n  };\n\n  publicAPI.getPixelData = (x1, y1, x2, y2) => {\n    const pixels = new Uint8Array((x2 - x1 + 1) * (y2 - y1 + 1) * 4);\n    model.context.readPixels(\n      x1,\n      y1,\n      x2 - x1 + 1,\n      y2 - y1 + 1,\n      model.context.RGBA,\n      model.context.UNSIGNED_BYTE,\n      pixels\n    );\n    return pixels;\n  };\n\n  publicAPI.get3DContext = (\n    options = {\n      preserveDrawingBuffer: false,\n      depth: true,\n      alpha: true,\n      powerPreference: 'high-performance',\n    }\n  ) => {\n    let result = null;\n\n    // Do we have webxr support\n    if (isImmersiveVrSupported) {\n      publicAPI.invokeHaveVRDisplay();\n    }\n\n    const webgl2Supported = typeof WebGL2RenderingContext !== 'undefined';\n    model.webgl2 = false;\n    if (model.defaultToWebgl2 && webgl2Supported) {\n      result = model.canvas.getContext('webgl2', options);\n      if (result) {\n        model.webgl2 = true;\n        vtkDebugMacro('using webgl2');\n      }\n    }\n    if (!result) {\n      vtkDebugMacro('using webgl1');\n      result =\n        model.canvas.getContext('webgl', options) ||\n        model.canvas.getContext('experimental-webgl', options);\n    }\n\n    return new Proxy(result, cachingContextHandler);\n  };\n\n  // Request an XR session on the user device with WebXR,\n  // typically in response to a user request such as a button press\n  publicAPI.startXR = (isAR) => {\n    if (navigator.xr === undefined) {\n      throw new Error('WebXR is not available');\n    }\n\n    model.xrSessionIsAR = isAR;\n    const sessionType = isAR ? 'immersive-ar' : 'immersive-vr';\n    if (!navigator.xr.isSessionSupported(sessionType)) {\n      if (isAR) {\n        throw new Error('Device does not support AR session');\n      } else {\n        throw new Error('VR display is not available');\n      }\n    }\n    if (model.xrSession === null) {\n      navigator.xr.requestSession(sessionType).then(publicAPI.enterXR, () => {\n        throw new Error('Failed to create XR session!');\n      });\n    } else {\n      throw new Error('XR Session already exists!');\n    }\n  };\n\n  // When an XR session is available, set up the XRWebGLLayer\n  // and request the first animation frame for the device\n  publicAPI.enterXR = async (xrSession) => {\n    model.xrSession = xrSession;\n    model.oldCanvasSize = model.size.slice();\n\n    if (model.xrSession !== null) {\n      const gl = publicAPI.get3DContext();\n      await gl.makeXRCompatible();\n\n      const glLayer = new global.XRWebGLLayer(model.xrSession, gl);\n      publicAPI.setSize(glLayer.framebufferWidth, glLayer.framebufferHeight);\n\n      model.xrSession.updateRenderState({\n        baseLayer: glLayer,\n      });\n\n      model.xrSession.requestReferenceSpace('local').then((refSpace) => {\n        model.xrReferenceSpace = refSpace;\n      });\n\n      publicAPI.resetXRScene();\n\n      model.renderable.getInteractor().switchToXRAnimation();\n      model.xrSceneFrame = model.xrSession.requestAnimationFrame(\n        publicAPI.xrRender\n      );\n    } else {\n      throw new Error('Failed to enter VR with a null xrSession.');\n    }\n  };\n\n  publicAPI.resetXRScene = (\n    inputRescaleFactor = DEFAULT_RESET_FACTORS.vr.rescaleFactor,\n    inputTranslateZ = DEFAULT_RESET_FACTORS.vr.translateZ\n  ) => {\n    // Adjust world-to-physical parameters for different modalities\n    // Default parameter values are for VR (model.xrSessionIsAR == false)\n    let rescaleFactor = inputRescaleFactor;\n    let translateZ = inputTranslateZ;\n\n    if (\n      model.xrSessionIsAR &&\n      rescaleFactor === DEFAULT_RESET_FACTORS.vr.rescaleFactor\n    ) {\n      // Scale down by default in AR\n      rescaleFactor = DEFAULT_RESET_FACTORS.ar.rescaleFactor;\n    }\n\n    if (\n      model.xrSessionIsAR &&\n      translateZ === DEFAULT_RESET_FACTORS.vr.translateZ\n    ) {\n      // Default closer to the camera in AR\n      translateZ = DEFAULT_RESET_FACTORS.ar.translateZ;\n    }\n\n    const ren = model.renderable.getRenderers()[0];\n    ren.resetCamera();\n\n    const camera = ren.getActiveCamera();\n    let physicalScale = camera.getPhysicalScale();\n    const physicalTranslation = camera.getPhysicalTranslation();\n\n    physicalScale /= rescaleFactor;\n    translateZ *= physicalScale;\n    physicalTranslation[2] += translateZ;\n\n    camera.setPhysicalScale(physicalScale);\n    camera.setPhysicalTranslation(physicalTranslation);\n    // Clip at 0.1m, 100.0m in physical space by default\n    camera.setClippingRange(0.1 * physicalScale, 100.0 * physicalScale);\n  };\n\n  publicAPI.stopXR = async () => {\n    if (navigator.xr === undefined) {\n      // WebXR polyfill not available so nothing to do\n      return;\n    }\n\n    if (model.xrSession !== null) {\n      model.xrSession.cancelAnimationFrame(model.xrSceneFrame);\n      model.renderable.getInteractor().returnFromXRAnimation();\n      const gl = publicAPI.get3DContext();\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n      await model.xrSession.end().catch((error) => {\n        if (!(error instanceof DOMException)) {\n          throw error;\n        }\n      });\n      model.xrSession = null;\n    }\n\n    if (model.oldCanvasSize !== undefined) {\n      publicAPI.setSize(...model.oldCanvasSize);\n    }\n\n    // Reset to default canvas\n    const ren = model.renderable.getRenderers()[0];\n    ren.getActiveCamera().setProjectionMatrix(null);\n    ren.resetCamera();\n\n    ren.setViewport(0.0, 0, 1.0, 1.0);\n    publicAPI.traverseAllPasses();\n  };\n\n  publicAPI.xrRender = async (t, frame) => {\n    const xrSession = frame.session;\n\n    model.renderable\n      .getInteractor()\n      .updateXRGamepads(xrSession, frame, model.xrReferenceSpace);\n\n    model.xrSceneFrame = model.xrSession.requestAnimationFrame(\n      publicAPI.xrRender\n    );\n\n    const xrPose = frame.getViewerPose(model.xrReferenceSpace);\n\n    if (xrPose) {\n      const gl = publicAPI.get3DContext();\n\n      if (model.xrSessionIsAR && model.oldCanvasSize !== undefined) {\n        gl.canvas.width = model.oldCanvasSize[0];\n        gl.canvas.height = model.oldCanvasSize[1];\n      }\n\n      const glLayer = xrSession.renderState.baseLayer;\n      gl.bindFramebuffer(gl.FRAMEBUFFER, glLayer.framebuffer);\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      gl.clear(gl.DEPTH_BUFFER_BIT);\n\n      // get the first renderer\n      const ren = model.renderable.getRenderers()[0];\n\n      // Do a render pass for each eye\n      xrPose.views.forEach((view) => {\n        const viewport = glLayer.getViewport(view);\n\n        gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);\n\n        // TODO: Appropriate handling for AR passthrough on HMDs\n        // with two eyes will require further investigation.\n        if (!model.xrSessionIsAR) {\n          if (view.eye === 'left') {\n            ren.setViewport(0, 0, 0.5, 1.0);\n          } else if (view.eye === 'right') {\n            ren.setViewport(0.5, 0, 1.0, 1.0);\n          } else {\n            // No handling for non-eye viewport\n            return;\n          }\n        }\n\n        ren\n          .getActiveCamera()\n          .computeViewParametersFromPhysicalMatrix(\n            view.transform.inverse.matrix\n          );\n        ren.getActiveCamera().setProjectionMatrix(view.projectionMatrix);\n\n        publicAPI.traverseAllPasses();\n      });\n    }\n  };\n\n  publicAPI.restoreContext = () => {\n    const rp = vtkRenderPass.newInstance();\n    rp.setCurrentOperation('Release');\n    rp.traverse(publicAPI, null);\n  };\n\n  publicAPI.activateTexture = (texture) => {\n    // Only add if it isn't already there\n    const result = model._textureResourceIds.get(texture);\n    if (result !== undefined) {\n      model.context.activeTexture(model.context.TEXTURE0 + result);\n      return;\n    }\n\n    const activeUnit = publicAPI.getTextureUnitManager().allocate();\n    if (activeUnit < 0) {\n      vtkErrorMacro(\n        'Hardware does not support the number of textures defined.'\n      );\n      return;\n    }\n\n    model._textureResourceIds.set(texture, activeUnit);\n    model.context.activeTexture(model.context.TEXTURE0 + activeUnit);\n  };\n\n  publicAPI.deactivateTexture = (texture) => {\n    // Only deactivate if it isn't already there\n    const result = model._textureResourceIds.get(texture);\n    if (result !== undefined) {\n      publicAPI.getTextureUnitManager().free(result);\n      delete model._textureResourceIds.delete(texture);\n    }\n  };\n\n  publicAPI.getTextureUnitForTexture = (texture) => {\n    const result = model._textureResourceIds.get(texture);\n    if (result !== undefined) {\n      return result;\n    }\n    return -1;\n  };\n\n  publicAPI.getDefaultTextureInternalFormat = (vtktype, numComps, useFloat) => {\n    if (model.webgl2) {\n      switch (vtktype) {\n        case VtkDataTypes.UNSIGNED_CHAR:\n          switch (numComps) {\n            case 1:\n              return model.context.R8;\n            case 2:\n              return model.context.RG8;\n            case 3:\n              return model.context.RGB8;\n            case 4:\n            default:\n              return model.context.RGBA8;\n          }\n        case VtkDataTypes.FLOAT:\n        default:\n          switch (numComps) {\n            case 1:\n              return model.context.R16F;\n            case 2:\n              return model.context.RG16F;\n            case 3:\n              return model.context.RGB16F;\n            case 4:\n            default:\n              return model.context.RGBA16F;\n          }\n      }\n    }\n\n    // webgl1 only supports four types\n    switch (numComps) {\n      case 1:\n        return model.context.LUMINANCE;\n      case 2:\n        return model.context.LUMINANCE_ALPHA;\n      case 3:\n        return model.context.RGB;\n      case 4:\n      default:\n        return model.context.RGBA;\n    }\n  };\n\n  publicAPI.setBackgroundImage = (img) => {\n    model.bgImage.src = img.src;\n  };\n\n  publicAPI.setUseBackgroundImage = (value) => {\n    model.useBackgroundImage = value;\n\n    // Add or remove the background image from the\n    // DOM as specified.\n    if (model.useBackgroundImage && !model.el.contains(model.bgImage)) {\n      model.el.appendChild(model.bgImage);\n    } else if (!model.useBackgroundImage && model.el.contains(model.bgImage)) {\n      model.el.removeChild(model.bgImage);\n    }\n  };\n\n  function getCanvasDataURL(format = model.imageFormat) {\n    // Copy current canvas to not modify the original\n    const temporaryCanvas = document.createElement('canvas');\n    const temporaryContext = temporaryCanvas.getContext('2d');\n    temporaryCanvas.width = model.canvas.width;\n    temporaryCanvas.height = model.canvas.height;\n    temporaryContext.drawImage(model.canvas, 0, 0);\n\n    // Get current client rect to place canvas\n    const mainBoundingClientRect = model.canvas.getBoundingClientRect();\n\n    const renderWindow = model.renderable;\n    const renderers = renderWindow.getRenderers();\n    renderers.forEach((renderer) => {\n      const viewProps = renderer.getViewProps();\n      viewProps.forEach((viewProp) => {\n        // Check if the prop has a container that should have canvas\n        if (viewProp.getContainer) {\n          const container = viewProp.getContainer();\n          const canvasList = container.getElementsByTagName('canvas');\n          // Go throughout all canvas and copy it into temporary main canvas\n          for (let i = 0; i < canvasList.length; i++) {\n            const currentCanvas = canvasList[i];\n            const boundingClientRect = currentCanvas.getBoundingClientRect();\n            const newXPosition =\n              boundingClientRect.x - mainBoundingClientRect.x;\n            const newYPosition =\n              boundingClientRect.y - mainBoundingClientRect.y;\n            temporaryContext.drawImage(\n              currentCanvas,\n              newXPosition,\n              newYPosition\n            );\n          }\n        }\n      });\n    });\n\n    const screenshot = temporaryCanvas.toDataURL(format);\n    temporaryCanvas.remove();\n    publicAPI.invokeImageReady(screenshot);\n  }\n\n  publicAPI.captureNextImage = (\n    format = 'image/png',\n    { resetCamera = false, size = null, scale = 1 } = {}\n  ) => {\n    if (model.deleted) {\n      return null;\n    }\n    model.imageFormat = format;\n    const previous = model.notifyStartCaptureImage;\n    model.notifyStartCaptureImage = true;\n\n    model._screenshot = {\n      size:\n        !!size || scale !== 1\n          ? size || model.size.map((val) => val * scale)\n          : null,\n    };\n\n    return new Promise((resolve, reject) => {\n      const subscription = publicAPI.onImageReady((imageURL) => {\n        if (model._screenshot.size === null) {\n          model.notifyStartCaptureImage = previous;\n          subscription.unsubscribe();\n          if (model._screenshot.placeHolder) {\n            // resize the main canvas back to its original size and show it\n            model.size = model._screenshot.originalSize;\n\n            // process the resize\n            publicAPI.modified();\n\n            // restore the saved camera parameters, if applicable\n            if (model._screenshot.cameras) {\n              model._screenshot.cameras.forEach(({ restoreParamsFn, arg }) =>\n                restoreParamsFn(arg)\n              );\n            }\n\n            // Trigger a render at the original size\n            publicAPI.traverseAllPasses();\n\n            // Remove and clean up the placeholder, revealing the original\n            model.el.removeChild(model._screenshot.placeHolder);\n            model._screenshot.placeHolder.remove();\n            model._screenshot = null;\n          }\n          resolve(imageURL);\n        } else {\n          // Create a placeholder image overlay while we resize and render\n          const tmpImg = document.createElement('img');\n          tmpImg.style = SCREENSHOT_PLACEHOLDER;\n          tmpImg.src = imageURL;\n          model._screenshot.placeHolder = model.el.appendChild(tmpImg);\n\n          // hide the main canvas\n          model.canvas.style.display = 'none';\n\n          // remember the main canvas original size, then resize it\n          model._screenshot.originalSize = model.size;\n          model.size = model._screenshot.size;\n          model._screenshot.size = null;\n\n          // process the resize\n          publicAPI.modified();\n\n          if (resetCamera) {\n            const isUserResetCamera = resetCamera !== true;\n\n            // If resetCamera was requested, we first save camera parameters\n            // from all the renderers, so we can restore them later\n            model._screenshot.cameras = model.renderable\n              .getRenderers()\n              .map((renderer) => {\n                const camera = renderer.getActiveCamera();\n                const params = camera.get(\n                  'focalPoint',\n                  'position',\n                  'parallelScale'\n                );\n\n                return {\n                  resetCameraArgs: isUserResetCamera ? { renderer } : undefined,\n                  resetCameraFn: isUserResetCamera\n                    ? resetCamera\n                    : renderer.resetCamera,\n                  restoreParamsFn: camera.set,\n                  // \"clone\" the params so we don't keep refs to properties\n                  arg: JSON.parse(JSON.stringify(params)),\n                };\n              });\n\n            // Perform the resetCamera() on each renderer only after capturing\n            // the params from all active cameras, in case there happen to be\n            // linked cameras among the renderers.\n            model._screenshot.cameras.forEach(\n              ({ resetCameraFn, resetCameraArgs }) =>\n                resetCameraFn(resetCameraArgs)\n            );\n          }\n\n          // Trigger a render at the custom size\n          publicAPI.traverseAllPasses();\n        }\n      });\n    });\n  };\n\n  let hardwareMaximumLineWidth;\n  publicAPI.getHardwareMaximumLineWidth = () => {\n    // We cache the result of this function because `getParameter` is slow\n    if (hardwareMaximumLineWidth != null) {\n      return hardwareMaximumLineWidth;\n    }\n\n    const gl = publicAPI.get3DContext();\n    const lineWidthRange = gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE);\n\n    hardwareMaximumLineWidth = lineWidthRange[1];\n\n    return lineWidthRange[1];\n  };\n\n  publicAPI.getGLInformations = () => {\n    const gl = publicAPI.get3DContext();\n\n    const glTextureFloat = gl.getExtension('OES_texture_float');\n    const glTextureHalfFloat = gl.getExtension('OES_texture_half_float');\n    const glDebugRendererInfo = gl.getExtension('WEBGL_debug_renderer_info');\n    const glDrawBuffers = gl.getExtension('WEBGL_draw_buffers');\n    const glAnisotropic =\n      gl.getExtension('EXT_texture_filter_anisotropic') ||\n      gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n\n    const params = [\n      [\n        'Max Vertex Attributes',\n        'MAX_VERTEX_ATTRIBS',\n        gl.getParameter(gl.MAX_VERTEX_ATTRIBS),\n      ],\n      [\n        'Max Varying Vectors',\n        'MAX_VARYING_VECTORS',\n        gl.getParameter(gl.MAX_VARYING_VECTORS),\n      ],\n      [\n        'Max Vertex Uniform Vectors',\n        'MAX_VERTEX_UNIFORM_VECTORS',\n        gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS),\n      ],\n      [\n        'Max Fragment Uniform Vectors',\n        'MAX_FRAGMENT_UNIFORM_VECTORS',\n        gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS),\n      ],\n      [\n        'Max Fragment Texture Image Units',\n        'MAX_TEXTURE_IMAGE_UNITS',\n        gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS),\n      ],\n      [\n        'Max Vertex Texture Image Units',\n        'MAX_VERTEX_TEXTURE_IMAGE_UNITS',\n        gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS),\n      ],\n      [\n        'Max Combined Texture Image Units',\n        'MAX_COMBINED_TEXTURE_IMAGE_UNITS',\n        gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),\n      ],\n      [\n        'Max 2D Texture Size',\n        'MAX_TEXTURE_SIZE',\n        gl.getParameter(gl.MAX_TEXTURE_SIZE),\n      ],\n      [\n        'Max Cube Texture Size',\n        'MAX_CUBE_MAP_TEXTURE_SIZE',\n        gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE),\n      ],\n      [\n        'Max Texture Anisotropy',\n        'MAX_TEXTURE_MAX_ANISOTROPY_EXT',\n        glAnisotropic &&\n          gl.getParameter(glAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT),\n      ],\n      [\n        'Point Size Range',\n        'ALIASED_POINT_SIZE_RANGE',\n        gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE).join(' - '),\n      ],\n      [\n        'Line Width Range',\n        'ALIASED_LINE_WIDTH_RANGE',\n        gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE).join(' - '),\n      ],\n      [\n        'Max Viewport Dimensions',\n        'MAX_VIEWPORT_DIMS',\n        gl.getParameter(gl.MAX_VIEWPORT_DIMS).join(' - '),\n      ],\n      [\n        'Max Renderbuffer Size',\n        'MAX_RENDERBUFFER_SIZE',\n        gl.getParameter(gl.MAX_RENDERBUFFER_SIZE),\n      ],\n      ['Framebuffer Red Bits', 'RED_BITS', gl.getParameter(gl.RED_BITS)],\n      ['Framebuffer Green Bits', 'GREEN_BITS', gl.getParameter(gl.GREEN_BITS)],\n      ['Framebuffer Blue Bits', 'BLUE_BITS', gl.getParameter(gl.BLUE_BITS)],\n      ['Framebuffer Alpha Bits', 'ALPHA_BITS', gl.getParameter(gl.ALPHA_BITS)],\n      ['Framebuffer Depth Bits', 'DEPTH_BITS', gl.getParameter(gl.DEPTH_BITS)],\n      [\n        'Framebuffer Stencil Bits',\n        'STENCIL_BITS',\n        gl.getParameter(gl.STENCIL_BITS),\n      ],\n      [\n        'Framebuffer Subpixel Bits',\n        'SUBPIXEL_BITS',\n        gl.getParameter(gl.SUBPIXEL_BITS),\n      ],\n      ['MSAA Samples', 'SAMPLES', gl.getParameter(gl.SAMPLES)],\n      [\n        'MSAA Sample Buffers',\n        'SAMPLE_BUFFERS',\n        gl.getParameter(gl.SAMPLE_BUFFERS),\n      ],\n      [\n        'Supported Formats for UByte Render Targets     ',\n        'UNSIGNED_BYTE RENDER TARGET FORMATS',\n        [\n          glTextureFloat &&\n          checkRenderTargetSupport(gl, gl.RGBA, gl.UNSIGNED_BYTE)\n            ? 'RGBA'\n            : '',\n          glTextureFloat &&\n          checkRenderTargetSupport(gl, gl.RGB, gl.UNSIGNED_BYTE)\n            ? 'RGB'\n            : '',\n          glTextureFloat &&\n          checkRenderTargetSupport(gl, gl.LUMINANCE, gl.UNSIGNED_BYTE)\n            ? 'LUMINANCE'\n            : '',\n          glTextureFloat &&\n          checkRenderTargetSupport(gl, gl.ALPHA, gl.UNSIGNED_BYTE)\n            ? 'ALPHA'\n            : '',\n          glTextureFloat &&\n          checkRenderTargetSupport(gl, gl.LUMINANCE_ALPHA, gl.UNSIGNED_BYTE)\n            ? 'LUMINANCE_ALPHA'\n            : '',\n        ].join(' '),\n      ],\n      [\n        'Supported Formats for Half Float Render Targets',\n        'HALF FLOAT RENDER TARGET FORMATS',\n        [\n          glTextureHalfFloat &&\n          checkRenderTargetSupport(\n            gl,\n            gl.RGBA,\n            glTextureHalfFloat.HALF_FLOAT_OES\n          )\n            ? 'RGBA'\n            : '',\n          glTextureHalfFloat &&\n          checkRenderTargetSupport(\n            gl,\n            gl.RGB,\n            glTextureHalfFloat.HALF_FLOAT_OES\n          )\n            ? 'RGB'\n            : '',\n          glTextureHalfFloat &&\n          checkRenderTargetSupport(\n            gl,\n            gl.LUMINANCE,\n            glTextureHalfFloat.HALF_FLOAT_OES\n          )\n            ? 'LUMINANCE'\n            : '',\n          glTextureHalfFloat &&\n          checkRenderTargetSupport(\n            gl,\n            gl.ALPHA,\n            glTextureHalfFloat.HALF_FLOAT_OES\n          )\n            ? 'ALPHA'\n            : '',\n          glTextureHalfFloat &&\n          checkRenderTargetSupport(\n            gl,\n            gl.LUMINANCE_ALPHA,\n            glTextureHalfFloat.HALF_FLOAT_OES\n          )\n            ? 'LUMINANCE_ALPHA'\n            : '',\n        ].join(' '),\n      ],\n      [\n        'Supported Formats for Full Float Render Targets',\n        'FLOAT RENDER TARGET FORMATS',\n        [\n          glTextureFloat && checkRenderTargetSupport(gl, gl.RGBA, gl.FLOAT)\n            ? 'RGBA'\n            : '',\n          glTextureFloat && checkRenderTargetSupport(gl, gl.RGB, gl.FLOAT)\n            ? 'RGB'\n            : '',\n          glTextureFloat && checkRenderTargetSupport(gl, gl.LUMINANCE, gl.FLOAT)\n            ? 'LUMINANCE'\n            : '',\n          glTextureFloat && checkRenderTargetSupport(gl, gl.ALPHA, gl.FLOAT)\n            ? 'ALPHA'\n            : '',\n          glTextureFloat &&\n          checkRenderTargetSupport(gl, gl.LUMINANCE_ALPHA, gl.FLOAT)\n            ? 'LUMINANCE_ALPHA'\n            : '',\n        ].join(' '),\n      ],\n      [\n        'Max Multiple Render Targets Buffers',\n        'MAX_DRAW_BUFFERS_WEBGL',\n        glDrawBuffers\n          ? gl.getParameter(glDrawBuffers.MAX_DRAW_BUFFERS_WEBGL)\n          : 0,\n      ],\n      [\n        'High Float Precision in Vertex Shader',\n        'HIGH_FLOAT VERTEX_SHADER',\n        [\n          gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT)\n            .precision,\n          ' (-2<sup>',\n          gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).rangeMin,\n          '</sup> - 2<sup>',\n          gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).rangeMax,\n          '</sup>)',\n        ].join(''),\n      ],\n      [\n        'Medium Float Precision in Vertex Shader',\n        'MEDIUM_FLOAT VERTEX_SHADER',\n        [\n          gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT)\n            .precision,\n          ' (-2<sup>',\n          gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT)\n            .rangeMin,\n          '</sup> - 2<sup>',\n          gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT)\n            .rangeMax,\n          '</sup>)',\n        ].join(''),\n      ],\n      [\n        'Low Float Precision in Vertex Shader',\n        'LOW_FLOAT VERTEX_SHADER',\n        [\n          gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT).precision,\n          ' (-2<sup>',\n          gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT).rangeMin,\n          '</sup> - 2<sup>',\n          gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT).rangeMax,\n          '</sup>)',\n        ].join(''),\n      ],\n      [\n        'High Float Precision in Fragment Shader',\n        'HIGH_FLOAT FRAGMENT_SHADER',\n        [\n          gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT)\n            .precision,\n          ' (-2<sup>',\n          gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT)\n            .rangeMin,\n          '</sup> - 2<sup>',\n          gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT)\n            .rangeMax,\n          '</sup>)',\n        ].join(''),\n      ],\n      [\n        'Medium Float Precision in Fragment Shader',\n        'MEDIUM_FLOAT FRAGMENT_SHADER',\n        [\n          gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT)\n            .precision,\n          ' (-2<sup>',\n          gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT)\n            .rangeMin,\n          '</sup> - 2<sup>',\n          gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT)\n            .rangeMax,\n          '</sup>)',\n        ].join(''),\n      ],\n      [\n        'Low Float Precision in Fragment Shader',\n        'LOW_FLOAT FRAGMENT_SHADER',\n        [\n          gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT)\n            .precision,\n          ' (-2<sup>',\n          gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT)\n            .rangeMin,\n          '</sup> - 2<sup>',\n          gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT)\n            .rangeMax,\n          '</sup>)',\n        ].join(''),\n      ],\n      [\n        'High Int Precision in Vertex Shader',\n        'HIGH_INT VERTEX_SHADER',\n        [\n          gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT).precision,\n          ' (-2<sup>',\n          gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT).rangeMin,\n          '</sup> - 2<sup>',\n          gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT).rangeMax,\n          '</sup>)',\n        ].join(''),\n      ],\n      [\n        'Medium Int Precision in Vertex Shader',\n        'MEDIUM_INT VERTEX_SHADER',\n        [\n          gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT)\n            .precision,\n          ' (-2<sup>',\n          gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT).rangeMin,\n          '</sup> - 2<sup>',\n          gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT).rangeMax,\n          '</sup>)',\n        ].join(''),\n      ],\n      [\n        'Low Int Precision in Vertex Shader',\n        'LOW_INT VERTEX_SHADER',\n        [\n          gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT).precision,\n          ' (-2<sup>',\n          gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT).rangeMin,\n          '</sup> - 2<sup>',\n          gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT).rangeMax,\n          '</sup>)',\n        ].join(''),\n      ],\n      [\n        'High Int Precision in Fragment Shader',\n        'HIGH_INT FRAGMENT_SHADER',\n        [\n          gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT)\n            .precision,\n          ' (-2<sup>',\n          gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT).rangeMin,\n          '</sup> - 2<sup>',\n          gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT).rangeMax,\n          '</sup>)',\n        ].join(''),\n      ],\n      [\n        'Medium Int Precision in Fragment Shader',\n        'MEDIUM_INT FRAGMENT_SHADER',\n        [\n          gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT)\n            .precision,\n          ' (-2<sup>',\n          gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT)\n            .rangeMin,\n          '</sup> - 2<sup>',\n          gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT)\n            .rangeMax,\n          '</sup>)',\n        ].join(''),\n      ],\n      [\n        'Low Int Precision in Fragment Shader',\n        'LOW_INT FRAGMENT_SHADER',\n        [\n          gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT).precision,\n          ' (-2<sup>',\n          gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT).rangeMin,\n          '</sup> - 2<sup>',\n          gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT).rangeMax,\n          '</sup>)',\n        ].join(''),\n      ],\n      [\n        'Supported Extensions',\n        'EXTENSIONS',\n        gl.getSupportedExtensions().join('<br/>\\t\\t\\t\\t\\t    '),\n      ],\n      ['WebGL Renderer', 'RENDERER', gl.getParameter(gl.RENDERER)],\n      ['WebGL Vendor', 'VENDOR', gl.getParameter(gl.VENDOR)],\n      ['WebGL Version', 'VERSION', gl.getParameter(gl.VERSION)],\n      [\n        'Shading Language Version',\n        'SHADING_LANGUAGE_VERSION',\n        gl.getParameter(gl.SHADING_LANGUAGE_VERSION),\n      ],\n      [\n        'Unmasked Renderer',\n        'UNMASKED_RENDERER',\n        glDebugRendererInfo &&\n          gl.getParameter(glDebugRendererInfo.UNMASKED_RENDERER_WEBGL),\n      ],\n      [\n        'Unmasked Vendor',\n        'UNMASKED_VENDOR',\n        glDebugRendererInfo &&\n          gl.getParameter(glDebugRendererInfo.UNMASKED_VENDOR_WEBGL),\n      ],\n      ['WebGL Version', 'WEBGL_VERSION', model.webgl2 ? 2 : 1],\n    ];\n\n    const result = {};\n    while (params.length) {\n      const [label, key, value] = params.pop();\n      if (key) {\n        result[key] = { label, value };\n      }\n    }\n    return result;\n  };\n\n  publicAPI.traverseAllPasses = () => {\n    if (model.renderPasses) {\n      for (let index = 0; index < model.renderPasses.length; ++index) {\n        model.renderPasses[index].traverse(publicAPI, null);\n      }\n    }\n    if (model.notifyStartCaptureImage) {\n      getCanvasDataURL();\n    }\n  };\n\n  publicAPI.disableCullFace = () => {\n    if (model.cullFaceEnabled) {\n      model.context.disable(model.context.CULL_FACE);\n      model.cullFaceEnabled = false;\n    }\n  };\n\n  publicAPI.enableCullFace = () => {\n    if (!model.cullFaceEnabled) {\n      model.context.enable(model.context.CULL_FACE);\n      model.cullFaceEnabled = true;\n    }\n  };\n\n  publicAPI.setViewStream = (stream) => {\n    if (model.viewStream === stream) {\n      return false;\n    }\n    if (model.subscription) {\n      model.subscription.unsubscribe();\n      model.subscription = null;\n    }\n    model.viewStream = stream;\n    if (model.viewStream) {\n      // Force background to be transparent + render\n      const mainRenderer = model.renderable.getRenderers()[0];\n      mainRenderer.getBackgroundByReference()[3] = 0;\n\n      // Enable display of the background image\n      publicAPI.setUseBackgroundImage(true);\n\n      // Bind to remote stream\n      model.subscription = model.viewStream.onImageReady((e) =>\n        publicAPI.setBackgroundImage(e.image)\n      );\n      model.viewStream.setSize(model.size[0], model.size[1]);\n      model.viewStream.invalidateCache();\n      model.viewStream.render();\n\n      publicAPI.modified();\n    }\n    return true;\n  };\n\n  publicAPI.createSelector = () => {\n    const ret = vtkOpenGLHardwareSelector.newInstance();\n    ret.setOpenGLRenderWindow(publicAPI);\n    return ret;\n  };\n\n  publicAPI.delete = macro.chain(\n    publicAPI.delete,\n    publicAPI.setViewStream,\n    deleteGLContext\n  );\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  cullFaceEnabled: false,\n  shaderCache: null,\n  initialized: false,\n  context: null,\n  canvas: null,\n  cursorVisibility: true,\n  cursor: 'pointer',\n  textureUnitManager: null,\n  textureResourceIds: null,\n  containerSize: null,\n  renderPasses: [],\n  notifyStartCaptureImage: false,\n  webgl2: false,\n  defaultToWebgl2: true, // attempt webgl2 on by default\n  activeFramebuffer: null,\n  xrSession: null,\n  xrSessionIsAR: false,\n  xrReferenceSpace: null,\n  xrSupported: true,\n  imageFormat: 'image/png',\n  useOffScreen: false,\n  useBackgroundImage: false,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkRenderWindowViewNode.extend(publicAPI, model, initialValues);\n\n  // Create internal instances\n  model.canvas = document.createElement('canvas');\n  model.canvas.style.width = '100%';\n  createGLContext();\n\n  if (!model.selector) {\n    model.selector = vtkOpenGLHardwareSelector.newInstance();\n    model.selector.setOpenGLRenderWindow(publicAPI);\n  }\n\n  // Create internal bgImage\n  model.bgImage = new Image();\n  model.bgImage.style.position = 'absolute';\n  model.bgImage.style.left = '0';\n  model.bgImage.style.top = '0';\n  model.bgImage.style.width = '100%';\n  model.bgImage.style.height = '100%';\n  model.bgImage.style.zIndex = '-1';\n\n  model._textureResourceIds = new Map();\n\n  model.myFactory = vtkOpenGLViewNodeFactory.newInstance();\n  /* eslint-disable no-use-before-define */\n  model.myFactory.registerOverride('vtkRenderWindow', newInstance);\n  /* eslint-enable no-use-before-define */\n\n  model.shaderCache = vtkShaderCache.newInstance();\n  model.shaderCache.setOpenGLRenderWindow(publicAPI);\n\n  // setup default forward pass rendering\n  model.renderPasses[0] = vtkForwardPass.newInstance();\n\n  macro.event(publicAPI, model, 'imageReady');\n  macro.event(publicAPI, model, 'haveVRDisplay');\n\n  // Build VTK API\n  macro.get(publicAPI, model, [\n    'shaderCache',\n    'textureUnitManager',\n    'webgl2',\n    'vrDisplay',\n    'useBackgroundImage',\n    'xrSupported',\n  ]);\n\n  macro.setGet(publicAPI, model, [\n    'initialized',\n    'context',\n    'canvas',\n    'renderPasses',\n    'notifyStartCaptureImage',\n    'defaultToWebgl2',\n    'cursor',\n    'useOffScreen',\n    // might want to make this not call modified as\n    // we change the active framebuffer a lot. Or maybe\n    // only mark modified if the size or depth\n    // of the buffer has changed\n    'activeFramebuffer',\n  ]);\n\n  macro.setGetArray(publicAPI, model, ['size'], 2);\n\n  // Object methods\n  vtkOpenGLRenderWindow(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkOpenGLRenderWindow');\n\n// ----------------------------------------------------------------------------\n// Register API specific RenderWindow implementation\n// ----------------------------------------------------------------------------\n\nregisterViewConstructor('WebGL', newInstance);\n\n// ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend,\n  pushMonitorGLContextCount,\n  popMonitorGLContextCount,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}