{"ast":null,"code":"import { mat3, mat4 } from 'gl-matrix';\nimport * as macro from 'vtk.js/Sources/macros';\nimport vtkViewNode from 'vtk.js/Sources/Rendering/SceneGraph/ViewNode';\nimport { registerOverride } from 'vtk.js/Sources/Rendering/OpenGL/ViewNodeFactory'; // ----------------------------------------------------------------------------\n// vtkOpenGLVolume methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLVolume(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLVolume'); // Builds myself.\n\n  publicAPI.buildPass = prepass => {\n    if (!model.renderable || !model.renderable.getVisibility()) {\n      return;\n    }\n\n    if (prepass) {\n      model._openGLRenderWindow = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderWindow');\n      model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model.context = model._openGLRenderWindow.getContext();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.renderable.getMapper());\n      publicAPI.removeUnusedNodes();\n    }\n  };\n\n  publicAPI.queryPass = (prepass, renderPass) => {\n    if (prepass) {\n      if (!model.renderable || !model.renderable.getVisibility()) {\n        return;\n      }\n\n      renderPass.incrementVolumeCount();\n    }\n  };\n\n  publicAPI.traverseVolumePass = renderPass => {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || model.openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n\n    publicAPI.apply(renderPass, true);\n    model.children[0].traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  }; // Renders myself\n\n\n  publicAPI.volumePass = prepass => {\n    if (!model.renderable || !model.renderable.getVisibility()) {\n      return;\n    }\n\n    model.context.depthMask(!prepass);\n  };\n\n  publicAPI.getKeyMatrices = () => {\n    // has the actor changed?\n    if (model.renderable.getMTime() > model.keyMatrixTime.getMTime()) {\n      model.renderable.computeMatrix();\n      mat4.copy(model.MCWCMatrix, model.renderable.getMatrix());\n      mat4.transpose(model.MCWCMatrix, model.MCWCMatrix);\n\n      if (model.renderable.getIsIdentity()) {\n        mat3.identity(model.normalMatrix);\n      } else {\n        mat3.fromMat4(model.normalMatrix, model.MCWCMatrix);\n        mat3.invert(model.normalMatrix, model.normalMatrix);\n      }\n\n      model.keyMatrixTime.modified();\n    }\n\n    return {\n      mcwc: model.MCWCMatrix,\n      normalMatrix: model.normalMatrix\n    };\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {// context: null,\n  // keyMatrixTime: null,\n  // normalMatrix: null,\n  // MCWCMatrix: null,\n  // _openGLRenderWindow: null,\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.keyMatrixTime = {};\n  macro.obj(model.keyMatrixTime, {\n    mtime: 0\n  }); // always set by getter\n\n  model.normalMatrix = new Float64Array(9);\n  model.MCWCMatrix = new Float64Array(16); // Build VTK API\n\n  macro.setGet(publicAPI, model, ['context']); // Object methods\n\n  vtkOpenGLVolume(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkOpenGLVolume'); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend\n}; // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkVolume', newInstance);","map":{"version":3,"names":["mat3","mat4","macro","vtkViewNode","registerOverride","vtkOpenGLVolume","publicAPI","model","classHierarchy","push","buildPass","prepass","renderable","getVisibility","_openGLRenderWindow","getFirstAncestorOfType","openGLRenderer","context","getContext","prepareNodes","addMissingNode","getMapper","removeUnusedNodes","queryPass","renderPass","incrementVolumeCount","traverseVolumePass","getNestedVisibility","getSelector","getNestedPickable","apply","children","traverse","volumePass","depthMask","getKeyMatrices","getMTime","keyMatrixTime","computeMatrix","copy","MCWCMatrix","getMatrix","transpose","getIsIdentity","identity","normalMatrix","fromMat4","invert","modified","mcwc","DEFAULT_VALUES","extend","initialValues","Object","assign","obj","mtime","Float64Array","setGet","newInstance"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/OpenGL/Volume/index.js"],"sourcesContent":["import { mat3, mat4 } from 'gl-matrix';\n\nimport * as macro from 'vtk.js/Sources/macros';\nimport vtkViewNode from 'vtk.js/Sources/Rendering/SceneGraph/ViewNode';\n\nimport { registerOverride } from 'vtk.js/Sources/Rendering/OpenGL/ViewNodeFactory';\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLVolume methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLVolume(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLVolume');\n\n  // Builds myself.\n  publicAPI.buildPass = (prepass) => {\n    if (!model.renderable || !model.renderable.getVisibility()) {\n      return;\n    }\n    if (prepass) {\n      model._openGLRenderWindow = publicAPI.getFirstAncestorOfType(\n        'vtkOpenGLRenderWindow'\n      );\n      model.openGLRenderer =\n        publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model.context = model._openGLRenderWindow.getContext();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.renderable.getMapper());\n      publicAPI.removeUnusedNodes();\n    }\n  };\n\n  publicAPI.queryPass = (prepass, renderPass) => {\n    if (prepass) {\n      if (!model.renderable || !model.renderable.getVisibility()) {\n        return;\n      }\n      renderPass.incrementVolumeCount();\n    }\n  };\n\n  publicAPI.traverseVolumePass = (renderPass) => {\n    if (\n      !model.renderable ||\n      !model.renderable.getNestedVisibility() ||\n      (model.openGLRenderer.getSelector() &&\n        !model.renderable.getNestedPickable())\n    ) {\n      return;\n    }\n\n    publicAPI.apply(renderPass, true);\n\n    model.children[0].traverse(renderPass);\n\n    publicAPI.apply(renderPass, false);\n  };\n\n  // Renders myself\n  publicAPI.volumePass = (prepass) => {\n    if (!model.renderable || !model.renderable.getVisibility()) {\n      return;\n    }\n    model.context.depthMask(!prepass);\n  };\n\n  publicAPI.getKeyMatrices = () => {\n    // has the actor changed?\n    if (model.renderable.getMTime() > model.keyMatrixTime.getMTime()) {\n      model.renderable.computeMatrix();\n      mat4.copy(model.MCWCMatrix, model.renderable.getMatrix());\n      mat4.transpose(model.MCWCMatrix, model.MCWCMatrix);\n\n      if (model.renderable.getIsIdentity()) {\n        mat3.identity(model.normalMatrix);\n      } else {\n        mat3.fromMat4(model.normalMatrix, model.MCWCMatrix);\n        mat3.invert(model.normalMatrix, model.normalMatrix);\n      }\n      model.keyMatrixTime.modified();\n    }\n\n    return { mcwc: model.MCWCMatrix, normalMatrix: model.normalMatrix };\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  // context: null,\n  // keyMatrixTime: null,\n  // normalMatrix: null,\n  // MCWCMatrix: null,\n  // _openGLRenderWindow: null,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n\n  model.keyMatrixTime = {};\n  macro.obj(model.keyMatrixTime, { mtime: 0 });\n  // always set by getter\n  model.normalMatrix = new Float64Array(9);\n  model.MCWCMatrix = new Float64Array(16);\n\n  // Build VTK API\n  macro.setGet(publicAPI, model, ['context']);\n\n  // Object methods\n  vtkOpenGLVolume(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkOpenGLVolume');\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend };\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkVolume', newInstance);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}