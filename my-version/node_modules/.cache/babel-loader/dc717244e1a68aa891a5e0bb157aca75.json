{"ast":null,"code":"import macro from 'vtk.js/Sources/macros';\nimport vtkWebGPURenderEncoder from 'vtk.js/Sources/Rendering/WebGPU/RenderEncoder';\nimport vtkWebGPUTexture from 'vtk.js/Sources/Rendering/WebGPU/Texture';\nimport vtkWebGPUShaderCache from 'vtk.js/Sources/Rendering/WebGPU/ShaderCache';\nimport vtkRenderPass from 'vtk.js/Sources/Rendering/SceneGraph/RenderPass'; // ----------------------------------------------------------------------------\n\nfunction vtkWebGPUHardwareSelectionPass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUHardwareSelectionPass'); // this pass implements a forward rendering pipeline\n  // if both volumes and opaque geometry are present\n  // it will mix the two together by capturing a zbuffer\n  // first\n\n  publicAPI.traverse = (viewNode, renNode) => {\n    if (model.deleted) {\n      return;\n    }\n\n    model.currentParent = null; // build\n\n    publicAPI.setCurrentOperation('buildPass');\n    viewNode.traverse(publicAPI);\n    const device = viewNode.getDevice();\n\n    if (!model.selectionRenderEncoder) {\n      publicAPI.createRenderEncoder(); // create color texture\n\n      model.colorTexture = vtkWebGPUTexture.newInstance({\n        label: 'hardwareSelectorColor'\n      });\n      model.colorTexture.create(device, {\n        width: viewNode.getCanvas().width,\n        height: viewNode.getCanvas().height,\n        format: 'rgba32uint',\n\n        /* eslint-disable no-undef */\n\n        /* eslint-disable no-bitwise */\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC\n      });\n      const v1 = model.colorTexture.createView('hardwareSelectColorTexture');\n      model.selectionRenderEncoder.setColorTextureView(0, v1); // create depth texture\n\n      model.depthTexture = vtkWebGPUTexture.newInstance({\n        label: 'hardwareSelectorDepth'\n      });\n      model.depthTexture.create(device, {\n        width: viewNode.getCanvas().width,\n        height: viewNode.getCanvas().height,\n        format: 'depth32float',\n\n        /* eslint-disable no-undef */\n\n        /* eslint-disable no-bitwise */\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC\n      });\n      const v2 = model.depthTexture.createView('hardwareSelectDepthTexture');\n      model.selectionRenderEncoder.setDepthTextureView(v2);\n    } else {\n      model.colorTexture.resize(viewNode.getCanvas().width, viewNode.getCanvas().height);\n      model.depthTexture.resizeToMatch(model.colorTexture);\n    }\n\n    model.selectionRenderEncoder.attachTextureViews();\n    renNode.setRenderEncoder(model.selectionRenderEncoder);\n    publicAPI.setCurrentOperation('cameraPass');\n    renNode.traverse(publicAPI); // opaque pass is used for selection\n\n    publicAPI.setCurrentOperation('opaquePass');\n    renNode.traverse(publicAPI);\n  };\n\n  publicAPI.createRenderEncoder = () => {\n    model.selectionRenderEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'HardwareSelectionPass'\n    }); // default settings are fine for this\n\n    model.selectionRenderEncoder.setPipelineHash('sel');\n    model.selectionRenderEncoder.setReplaceShaderCodeFunction(pipeline => {\n      const fDesc = pipeline.getShaderDescription('fragment');\n      fDesc.addOutput('vec4<u32>', 'outColor');\n      let code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::RenderEncoder::Impl', ['output.outColor = vec4<u32>(mapperUBO.PropID, compositeID, 0u, 0u);']).result;\n      fDesc.setCode(code);\n    });\n    const renDesc = model.selectionRenderEncoder.getDescription();\n    renDesc.colorAttachments[0].clearValue = [0.0, 0.0, 0.0, 0.0];\n    model.selectionRenderEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      depthStencil: {\n        depthWriteEnabled: true,\n        depthCompare: 'greater',\n        format: 'depth32float'\n      },\n      fragment: {\n        targets: [{\n          format: 'rgba32uint',\n          blend: undefined\n        }]\n      }\n    });\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  selectionRenderEncoder: null,\n  colorTexture: null,\n  depthTexture: null\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  macro.get(publicAPI, model, ['colorTexture', 'depthTexture']); // Object methods\n\n  vtkWebGPUHardwareSelectionPass(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkWebGPUHardwareSelectionPass'); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend\n};","map":{"version":3,"names":["macro","vtkWebGPURenderEncoder","vtkWebGPUTexture","vtkWebGPUShaderCache","vtkRenderPass","vtkWebGPUHardwareSelectionPass","publicAPI","model","classHierarchy","push","traverse","viewNode","renNode","deleted","currentParent","setCurrentOperation","device","getDevice","selectionRenderEncoder","createRenderEncoder","colorTexture","newInstance","label","create","width","getCanvas","height","format","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","v1","createView","setColorTextureView","depthTexture","v2","setDepthTextureView","resize","resizeToMatch","attachTextureViews","setRenderEncoder","setPipelineHash","setReplaceShaderCodeFunction","pipeline","fDesc","getShaderDescription","addOutput","code","getCode","substitute","result","setCode","renDesc","getDescription","colorAttachments","clearValue","setPipelineSettings","primitive","cullMode","depthStencil","depthWriteEnabled","depthCompare","fragment","targets","blend","undefined","DEFAULT_VALUES","extend","initialValues","Object","assign","get"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/WebGPU/HardwareSelectionPass/index.js"],"sourcesContent":["import macro from 'vtk.js/Sources/macros';\nimport vtkWebGPURenderEncoder from 'vtk.js/Sources/Rendering/WebGPU/RenderEncoder';\nimport vtkWebGPUTexture from 'vtk.js/Sources/Rendering/WebGPU/Texture';\nimport vtkWebGPUShaderCache from 'vtk.js/Sources/Rendering/WebGPU/ShaderCache';\nimport vtkRenderPass from 'vtk.js/Sources/Rendering/SceneGraph/RenderPass';\n\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUHardwareSelectionPass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUHardwareSelectionPass');\n\n  // this pass implements a forward rendering pipeline\n  // if both volumes and opaque geometry are present\n  // it will mix the two together by capturing a zbuffer\n  // first\n  publicAPI.traverse = (viewNode, renNode) => {\n    if (model.deleted) {\n      return;\n    }\n\n    model.currentParent = null;\n\n    // build\n    publicAPI.setCurrentOperation('buildPass');\n    viewNode.traverse(publicAPI);\n\n    const device = viewNode.getDevice();\n\n    if (!model.selectionRenderEncoder) {\n      publicAPI.createRenderEncoder();\n\n      // create color texture\n      model.colorTexture = vtkWebGPUTexture.newInstance({\n        label: 'hardwareSelectorColor',\n      });\n      model.colorTexture.create(device, {\n        width: viewNode.getCanvas().width,\n        height: viewNode.getCanvas().height,\n        format: 'rgba32uint',\n        /* eslint-disable no-undef */\n        /* eslint-disable no-bitwise */\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      });\n      const v1 = model.colorTexture.createView('hardwareSelectColorTexture');\n      model.selectionRenderEncoder.setColorTextureView(0, v1);\n\n      // create depth texture\n      model.depthTexture = vtkWebGPUTexture.newInstance({\n        label: 'hardwareSelectorDepth',\n      });\n      model.depthTexture.create(device, {\n        width: viewNode.getCanvas().width,\n        height: viewNode.getCanvas().height,\n        format: 'depth32float',\n        /* eslint-disable no-undef */\n        /* eslint-disable no-bitwise */\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      });\n      const v2 = model.depthTexture.createView('hardwareSelectDepthTexture');\n      model.selectionRenderEncoder.setDepthTextureView(v2);\n    } else {\n      model.colorTexture.resize(\n        viewNode.getCanvas().width,\n        viewNode.getCanvas().height\n      );\n      model.depthTexture.resizeToMatch(model.colorTexture);\n    }\n\n    model.selectionRenderEncoder.attachTextureViews();\n    renNode.setRenderEncoder(model.selectionRenderEncoder);\n\n    publicAPI.setCurrentOperation('cameraPass');\n    renNode.traverse(publicAPI);\n    // opaque pass is used for selection\n    publicAPI.setCurrentOperation('opaquePass');\n    renNode.traverse(publicAPI);\n  };\n\n  publicAPI.createRenderEncoder = () => {\n    model.selectionRenderEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'HardwareSelectionPass',\n    });\n    // default settings are fine for this\n    model.selectionRenderEncoder.setPipelineHash('sel');\n    model.selectionRenderEncoder.setReplaceShaderCodeFunction((pipeline) => {\n      const fDesc = pipeline.getShaderDescription('fragment');\n      fDesc.addOutput('vec4<u32>', 'outColor');\n      let code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(\n        code,\n        '//VTK::RenderEncoder::Impl',\n        ['output.outColor = vec4<u32>(mapperUBO.PropID, compositeID, 0u, 0u);']\n      ).result;\n      fDesc.setCode(code);\n    });\n    const renDesc = model.selectionRenderEncoder.getDescription();\n    renDesc.colorAttachments[0].clearValue = [0.0, 0.0, 0.0, 0.0];\n\n    model.selectionRenderEncoder.setPipelineSettings({\n      primitive: { cullMode: 'none' },\n      depthStencil: {\n        depthWriteEnabled: true,\n        depthCompare: 'greater',\n        format: 'depth32float',\n      },\n      fragment: {\n        targets: [\n          {\n            format: 'rgba32uint',\n            blend: undefined,\n          },\n        ],\n      },\n    });\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  selectionRenderEncoder: null,\n  colorTexture: null,\n  depthTexture: null,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n\n  macro.get(publicAPI, model, ['colorTexture', 'depthTexture']);\n\n  // Object methods\n  vtkWebGPUHardwareSelectionPass(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(\n  extend,\n  'vtkWebGPUHardwareSelectionPass'\n);\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}