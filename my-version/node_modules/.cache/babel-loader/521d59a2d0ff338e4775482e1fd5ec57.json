{"ast":null,"code":"import macro from 'vtk.js/Sources/macros';\nimport vtkWebGPUFullScreenQuad from 'vtk.js/Sources/Rendering/WebGPU/FullScreenQuad';\nimport vtkWebGPUOpaquePass from 'vtk.js/Sources/Rendering/WebGPU/OpaquePass';\nimport vtkWebGPUOrderIndepenentTranslucentPass from 'vtk.js/Sources/Rendering/WebGPU/OrderIndependentTranslucentPass';\nimport vtkWebGPURenderEncoder from 'vtk.js/Sources/Rendering/WebGPU/RenderEncoder';\nimport vtkWebGPUVolumePass from 'vtk.js/Sources/Rendering/WebGPU/VolumePass';\nimport vtkRenderPass from 'vtk.js/Sources/Rendering/SceneGraph/RenderPass';\nimport vtkWebGPUSampler from 'vtk.js/Sources/Rendering/WebGPU/Sampler';\nimport vtkWebGPUTextureView from 'vtk.js/Sources/Rendering/WebGPU/TextureView';\nconst finalBlitFragTemplate = `\n//VTK::Mapper::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output: fragmentOutput;\n\n  var computedColor: vec4<f32> = clamp(textureSampleLevel(opaquePassColorTexture, finalPassSampler, input.tcoordVS, 0),vec4<f32>(0.0),vec4<f32>(1.0));\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n`; // ----------------------------------------------------------------------------\n\nfunction vtkForwardPass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkForwardPass'); // this pass implements a forward rendering pipeline\n  // if both volumes and opaque geometry are present\n  // it will mix the two together by capturing a zbuffer\n  // first\n\n  publicAPI.traverse = function (viewNode) {\n    let parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (model.deleted) {\n      return;\n    } // we just render our delegates in order\n\n\n    model.currentParent = parent; // build\n\n    publicAPI.setCurrentOperation('buildPass');\n    viewNode.traverse(publicAPI);\n\n    if (!model.opaquePass) {\n      model.opaquePass = vtkWebGPUOpaquePass.newInstance();\n    }\n\n    const numlayers = viewNode.getRenderable().getNumberOfLayers(); // iterate over renderers\n\n    const renderers = viewNode.getChildren();\n\n    for (let i = 0; i < numlayers; i++) {\n      for (let index = 0; index < renderers.length; index++) {\n        const renNode = renderers[index];\n        const ren = viewNode.getRenderable().getRenderers()[index];\n\n        if (ren.getDraw() && ren.getLayer() === i) {\n          // check for both opaque and volume actors\n          model.opaqueActorCount = 0;\n          model.translucentActorCount = 0;\n          model.volumes = [];\n          publicAPI.setCurrentOperation('queryPass');\n          renNode.traverse(publicAPI);\n          publicAPI.setCurrentOperation('cameraPass');\n          renNode.traverse(publicAPI); // always do opaque pass to get a valid color and zbuffer, even if empty\n\n          model.opaquePass.traverse(renNode, viewNode); // optional translucent pass\n\n          if (model.translucentActorCount > 0) {\n            if (!model.translucentPass) {\n              model.translucentPass = vtkWebGPUOrderIndepenentTranslucentPass.newInstance();\n            }\n\n            model.translucentPass.setColorTextureView(model.opaquePass.getColorTextureView());\n            model.translucentPass.setDepthTextureView(model.opaquePass.getDepthTextureView());\n            model.translucentPass.traverse(renNode, viewNode);\n          } // optional volume pass\n\n\n          if (model.volumes.length > 0) {\n            if (!model.volumePass) {\n              model.volumePass = vtkWebGPUVolumePass.newInstance();\n            }\n\n            model.volumePass.setColorTextureView(model.opaquePass.getColorTextureView());\n            model.volumePass.setDepthTextureView(model.opaquePass.getDepthTextureView());\n            model.volumePass.setVolumes(model.volumes);\n            model.volumePass.traverse(renNode, viewNode);\n          } // blit the result into the swap chain\n\n\n          publicAPI.finalPass(viewNode, renNode);\n        }\n      }\n    }\n  };\n\n  publicAPI.finalPass = (viewNode, renNode) => {\n    if (!model._finalBlitEncoder) {\n      publicAPI.createFinalBlitEncoder(viewNode);\n    }\n\n    model._finalBlitOutputTextureView.createFromTextureHandle(viewNode.getCurrentTexture(), {\n      depth: 1,\n      format: viewNode.getPresentationFormat()\n    });\n\n    model._finalBlitEncoder.attachTextureViews();\n\n    model._finalBlitEncoder.begin(viewNode.getCommandEncoder());\n\n    renNode.scissorAndViewport(model._finalBlitEncoder);\n\n    model._fullScreenQuad.prepareAndDraw(model._finalBlitEncoder);\n\n    model._finalBlitEncoder.end();\n  };\n\n  publicAPI.createFinalBlitEncoder = viewNode => {\n    model._finalBlitEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'forwardPassBlit'\n    });\n\n    model._finalBlitEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        loadOp: 'load',\n        storeOp: 'store'\n      }]\n    });\n\n    model._finalBlitEncoder.setPipelineHash('fpf');\n\n    model._finalBlitEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: viewNode.getPresentationFormat(),\n          blend: {\n            color: {\n              srcFactor: 'src-alpha',\n              dstFactor: 'one-minus-src-alpha'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n\n    model._fsqSampler = vtkWebGPUSampler.newInstance({\n      label: 'finalPassSampler'\n    });\n\n    model._fsqSampler.create(viewNode.getDevice(), {\n      minFilter: 'linear',\n      magFilter: 'linear'\n    });\n\n    model._fullScreenQuad = vtkWebGPUFullScreenQuad.newInstance();\n\n    model._fullScreenQuad.setDevice(viewNode.getDevice());\n\n    model._fullScreenQuad.setPipelineHash('fpfsq');\n\n    model._fullScreenQuad.setTextureViews([model.opaquePass.getColorTextureView()]);\n\n    model._fullScreenQuad.setAdditionalBindables([model._fsqSampler]);\n\n    model._fullScreenQuad.setFragmentShaderTemplate(finalBlitFragTemplate);\n\n    model._finalBlitOutputTextureView = vtkWebGPUTextureView.newInstance();\n\n    model._finalBlitEncoder.setColorTextureView(0, model._finalBlitOutputTextureView);\n  };\n\n  publicAPI.incrementOpaqueActorCount = () => model.opaqueActorCount++;\n\n  publicAPI.incrementTranslucentActorCount = () => model.translucentActorCount++;\n\n  publicAPI.addVolume = volume => {\n    model.volumes.push(volume);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  opaqueActorCount: 0,\n  translucentActorCount: 0,\n  volumes: null,\n  opaqueRenderEncoder: null,\n  translucentPass: null,\n  volumePass: null\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['opaquePass', 'translucentPass', 'volumePass']); // Object methods\n\n  vtkForwardPass(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkForwardPass'); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend\n};","map":{"version":3,"names":["macro","vtkWebGPUFullScreenQuad","vtkWebGPUOpaquePass","vtkWebGPUOrderIndepenentTranslucentPass","vtkWebGPURenderEncoder","vtkWebGPUVolumePass","vtkRenderPass","vtkWebGPUSampler","vtkWebGPUTextureView","finalBlitFragTemplate","vtkForwardPass","publicAPI","model","classHierarchy","push","traverse","viewNode","parent","deleted","currentParent","setCurrentOperation","opaquePass","newInstance","numlayers","getRenderable","getNumberOfLayers","renderers","getChildren","i","index","length","renNode","ren","getRenderers","getDraw","getLayer","opaqueActorCount","translucentActorCount","volumes","translucentPass","setColorTextureView","getColorTextureView","setDepthTextureView","getDepthTextureView","volumePass","setVolumes","finalPass","_finalBlitEncoder","createFinalBlitEncoder","_finalBlitOutputTextureView","createFromTextureHandle","getCurrentTexture","depth","format","getPresentationFormat","attachTextureViews","begin","getCommandEncoder","scissorAndViewport","_fullScreenQuad","prepareAndDraw","end","label","setDescription","colorAttachments","view","loadOp","storeOp","setPipelineHash","setPipelineSettings","primitive","cullMode","fragment","targets","blend","color","srcFactor","dstFactor","alpha","srcfactor","_fsqSampler","create","getDevice","minFilter","magFilter","setDevice","setTextureViews","setAdditionalBindables","setFragmentShaderTemplate","incrementOpaqueActorCount","incrementTranslucentActorCount","addVolume","volume","DEFAULT_VALUES","opaqueRenderEncoder","extend","initialValues","Object","assign","setGet"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/WebGPU/ForwardPass/index.js"],"sourcesContent":["import macro from 'vtk.js/Sources/macros';\nimport vtkWebGPUFullScreenQuad from 'vtk.js/Sources/Rendering/WebGPU/FullScreenQuad';\nimport vtkWebGPUOpaquePass from 'vtk.js/Sources/Rendering/WebGPU/OpaquePass';\nimport vtkWebGPUOrderIndepenentTranslucentPass from 'vtk.js/Sources/Rendering/WebGPU/OrderIndependentTranslucentPass';\nimport vtkWebGPURenderEncoder from 'vtk.js/Sources/Rendering/WebGPU/RenderEncoder';\nimport vtkWebGPUVolumePass from 'vtk.js/Sources/Rendering/WebGPU/VolumePass';\nimport vtkRenderPass from 'vtk.js/Sources/Rendering/SceneGraph/RenderPass';\nimport vtkWebGPUSampler from 'vtk.js/Sources/Rendering/WebGPU/Sampler';\nimport vtkWebGPUTextureView from 'vtk.js/Sources/Rendering/WebGPU/TextureView';\n\nconst finalBlitFragTemplate = `\n//VTK::Mapper::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output: fragmentOutput;\n\n  var computedColor: vec4<f32> = clamp(textureSampleLevel(opaquePassColorTexture, finalPassSampler, input.tcoordVS, 0),vec4<f32>(0.0),vec4<f32>(1.0));\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n`;\n\n// ----------------------------------------------------------------------------\n\nfunction vtkForwardPass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkForwardPass');\n\n  // this pass implements a forward rendering pipeline\n  // if both volumes and opaque geometry are present\n  // it will mix the two together by capturing a zbuffer\n  // first\n  publicAPI.traverse = (viewNode, parent = null) => {\n    if (model.deleted) {\n      return;\n    }\n\n    // we just render our delegates in order\n    model.currentParent = parent;\n\n    // build\n    publicAPI.setCurrentOperation('buildPass');\n    viewNode.traverse(publicAPI);\n\n    if (!model.opaquePass) {\n      model.opaquePass = vtkWebGPUOpaquePass.newInstance();\n    }\n\n    const numlayers = viewNode.getRenderable().getNumberOfLayers();\n\n    // iterate over renderers\n    const renderers = viewNode.getChildren();\n    for (let i = 0; i < numlayers; i++) {\n      for (let index = 0; index < renderers.length; index++) {\n        const renNode = renderers[index];\n        const ren = viewNode.getRenderable().getRenderers()[index];\n\n        if (ren.getDraw() && ren.getLayer() === i) {\n          // check for both opaque and volume actors\n          model.opaqueActorCount = 0;\n          model.translucentActorCount = 0;\n          model.volumes = [];\n          publicAPI.setCurrentOperation('queryPass');\n\n          renNode.traverse(publicAPI);\n\n          publicAPI.setCurrentOperation('cameraPass');\n          renNode.traverse(publicAPI);\n\n          // always do opaque pass to get a valid color and zbuffer, even if empty\n          model.opaquePass.traverse(renNode, viewNode);\n\n          // optional translucent pass\n          if (model.translucentActorCount > 0) {\n            if (!model.translucentPass) {\n              model.translucentPass =\n                vtkWebGPUOrderIndepenentTranslucentPass.newInstance();\n            }\n            model.translucentPass.setColorTextureView(\n              model.opaquePass.getColorTextureView()\n            );\n            model.translucentPass.setDepthTextureView(\n              model.opaquePass.getDepthTextureView()\n            );\n            model.translucentPass.traverse(renNode, viewNode);\n          }\n\n          // optional volume pass\n          if (model.volumes.length > 0) {\n            if (!model.volumePass) {\n              model.volumePass = vtkWebGPUVolumePass.newInstance();\n            }\n            model.volumePass.setColorTextureView(\n              model.opaquePass.getColorTextureView()\n            );\n            model.volumePass.setDepthTextureView(\n              model.opaquePass.getDepthTextureView()\n            );\n            model.volumePass.setVolumes(model.volumes);\n            model.volumePass.traverse(renNode, viewNode);\n          }\n\n          // blit the result into the swap chain\n          publicAPI.finalPass(viewNode, renNode);\n        }\n      }\n    }\n  };\n\n  publicAPI.finalPass = (viewNode, renNode) => {\n    if (!model._finalBlitEncoder) {\n      publicAPI.createFinalBlitEncoder(viewNode);\n    }\n    model._finalBlitOutputTextureView.createFromTextureHandle(\n      viewNode.getCurrentTexture(),\n      { depth: 1, format: viewNode.getPresentationFormat() }\n    );\n\n    model._finalBlitEncoder.attachTextureViews();\n    model._finalBlitEncoder.begin(viewNode.getCommandEncoder());\n    renNode.scissorAndViewport(model._finalBlitEncoder);\n    model._fullScreenQuad.prepareAndDraw(model._finalBlitEncoder);\n    model._finalBlitEncoder.end();\n  };\n\n  publicAPI.createFinalBlitEncoder = (viewNode) => {\n    model._finalBlitEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'forwardPassBlit',\n    });\n    model._finalBlitEncoder.setDescription({\n      colorAttachments: [\n        {\n          view: null,\n          loadOp: 'load',\n          storeOp: 'store',\n        },\n      ],\n    });\n    model._finalBlitEncoder.setPipelineHash('fpf');\n    model._finalBlitEncoder.setPipelineSettings({\n      primitive: { cullMode: 'none' },\n      fragment: {\n        targets: [\n          {\n            format: viewNode.getPresentationFormat(),\n            blend: {\n              color: {\n                srcFactor: 'src-alpha',\n                dstFactor: 'one-minus-src-alpha',\n              },\n              alpha: { srcfactor: 'one', dstFactor: 'one-minus-src-alpha' },\n            },\n          },\n        ],\n      },\n    });\n    model._fsqSampler = vtkWebGPUSampler.newInstance({\n      label: 'finalPassSampler',\n    });\n    model._fsqSampler.create(viewNode.getDevice(), {\n      minFilter: 'linear',\n      magFilter: 'linear',\n    });\n    model._fullScreenQuad = vtkWebGPUFullScreenQuad.newInstance();\n    model._fullScreenQuad.setDevice(viewNode.getDevice());\n    model._fullScreenQuad.setPipelineHash('fpfsq');\n    model._fullScreenQuad.setTextureViews([\n      model.opaquePass.getColorTextureView(),\n    ]);\n    model._fullScreenQuad.setAdditionalBindables([model._fsqSampler]);\n    model._fullScreenQuad.setFragmentShaderTemplate(finalBlitFragTemplate);\n    model._finalBlitOutputTextureView = vtkWebGPUTextureView.newInstance();\n    model._finalBlitEncoder.setColorTextureView(\n      0,\n      model._finalBlitOutputTextureView\n    );\n  };\n\n  publicAPI.incrementOpaqueActorCount = () => model.opaqueActorCount++;\n  publicAPI.incrementTranslucentActorCount = () =>\n    model.translucentActorCount++;\n  publicAPI.addVolume = (volume) => {\n    model.volumes.push(volume);\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  opaqueActorCount: 0,\n  translucentActorCount: 0,\n  volumes: null,\n  opaqueRenderEncoder: null,\n  translucentPass: null,\n  volumePass: null,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n\n  macro.setGet(publicAPI, model, [\n    'opaquePass',\n    'translucentPass',\n    'volumePass',\n  ]);\n\n  // Object methods\n  vtkForwardPass(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkForwardPass');\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}