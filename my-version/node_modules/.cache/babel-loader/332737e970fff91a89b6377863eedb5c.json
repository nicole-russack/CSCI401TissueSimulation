{"ast":null,"code":"const TinyEmitter = require('./tiny-emitter');\n\nconst MESSAGE_RESULT = 0;\nconst MESSAGE_EVENT = 1;\nconst RESULT_ERROR = 0;\nconst RESULT_SUCCESS = 1;\n\nclass Worker extends TinyEmitter {\n  /**\n   *\n   * @param worker {Worker}\n   */\n  constructor(worker) {\n    super();\n    this._messageId = 1;\n    this._messages = new Map();\n    this._worker = worker;\n    this._worker.onmessage = this._onMessage.bind(this);\n    this._id = Math.ceil(Math.random() * 10000000);\n  }\n\n  terminate() {\n    this._worker.terminate();\n  }\n  /**\n   * return true if there is no unresolved jobs\n   * @returns {boolean}\n   */\n\n\n  isFree() {\n    return this._messages.size === 0;\n  }\n\n  jobsLength() {\n    return this._messages.size;\n  }\n  /**\n   * @param operationName string\n   * @param data any\n   * @param transferable array\n   * @param onEvent function\n   * @returns {Promise}\n   */\n\n\n  exec(operationName) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let transferable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let onEvent = arguments.length > 3 ? arguments[3] : undefined;\n    return new Promise((res, rej) => {\n      const messageId = this._messageId++;\n\n      this._messages.set(messageId, [res, rej, onEvent]);\n\n      this._worker.postMessage([messageId, data, operationName], transferable || []);\n    });\n  }\n  /**\n   *\n   * @param data any\n   * @param transferable array\n   * @param onEvent function\n   * @returns {Promise}\n   */\n\n\n  postMessage() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let transferable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let onEvent = arguments.length > 2 ? arguments[2] : undefined;\n    return new Promise((res, rej) => {\n      const messageId = this._messageId++;\n\n      this._messages.set(messageId, [res, rej, onEvent]);\n\n      this._worker.postMessage([messageId, data], transferable || []);\n    });\n  }\n\n  emit(eventName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    this._worker.postMessage({\n      eventName,\n      args\n    });\n  }\n\n  _onMessage(e) {\n    //if we got usual event, just emit it locally\n    if (!Array.isArray(e.data) && e.data.eventName) {\n      return super.emit(e.data.eventName, ...e.data.args);\n    }\n\n    const [type, ...args] = e.data;\n    if (type === MESSAGE_EVENT) this._onEvent(...args);else if (type === MESSAGE_RESULT) this._onResult(...args);else throw new Error(`Wrong message type '${type}'`);\n  }\n\n  _onResult(messageId, success, payload) {\n    const [res, rej] = this._messages.get(messageId);\n\n    this._messages.delete(messageId);\n\n    return success === RESULT_SUCCESS ? res(payload) : rej(payload);\n  }\n\n  _onEvent(messageId, eventName, data) {\n    const [,, onEvent] = this._messages.get(messageId);\n\n    if (onEvent) {\n      onEvent(eventName, data);\n    }\n  }\n\n}\n\nmodule.exports = Worker;","map":{"version":3,"names":["TinyEmitter","require","MESSAGE_RESULT","MESSAGE_EVENT","RESULT_ERROR","RESULT_SUCCESS","Worker","constructor","worker","_messageId","_messages","Map","_worker","onmessage","_onMessage","bind","_id","Math","ceil","random","terminate","isFree","size","jobsLength","exec","operationName","data","transferable","onEvent","Promise","res","rej","messageId","set","postMessage","emit","eventName","args","e","Array","isArray","type","_onEvent","_onResult","Error","success","payload","get","delete","module","exports"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/webworker-promise/src/index.js"],"sourcesContent":["const TinyEmitter = require('./tiny-emitter');\n\nconst MESSAGE_RESULT = 0;\nconst MESSAGE_EVENT = 1;\n\nconst RESULT_ERROR = 0;\nconst RESULT_SUCCESS = 1;\n\nclass Worker extends TinyEmitter {\n  /**\n   *\n   * @param worker {Worker}\n   */\n  constructor(worker) {\n    super();\n\n    this._messageId = 1;\n    this._messages = new Map();\n\n    this._worker = worker;\n    this._worker.onmessage = this._onMessage.bind(this);\n    this._id = Math.ceil(Math.random() * 10000000);\n  }\n\n  terminate() {\n    this._worker.terminate();\n  }\n\n  /**\n   * return true if there is no unresolved jobs\n   * @returns {boolean}\n   */\n  isFree() {\n    return this._messages.size === 0;\n  }\n\n  jobsLength() {\n    return this._messages.size;\n  }\n\n  /**\n   * @param operationName string\n   * @param data any\n   * @param transferable array\n   * @param onEvent function\n   * @returns {Promise}\n   */\n  exec(operationName, data = null, transferable = [], onEvent) {\n    return new Promise((res, rej) => {\n      const messageId = this._messageId++;\n      this._messages.set(messageId, [res, rej, onEvent]);\n      this._worker.postMessage([messageId, data, operationName], transferable || []);\n    });\n  }\n\n  /**\n   *\n   * @param data any\n   * @param transferable array\n   * @param onEvent function\n   * @returns {Promise}\n   */\n  postMessage(data = null, transferable = [], onEvent) {\n    return new Promise((res, rej) => {\n      const messageId = this._messageId++;\n      this._messages.set(messageId, [res, rej, onEvent]);\n      this._worker.postMessage([messageId, data], transferable || []);\n    });\n  }\n\n  emit(eventName, ...args) {\n    this._worker.postMessage({eventName, args});\n  }\n\n  _onMessage(e) {\n    //if we got usual event, just emit it locally\n    if(!Array.isArray(e.data) && e.data.eventName) {\n      return super.emit(e.data.eventName, ...e.data.args);\n    }\n\n    const [type, ...args] = e.data;\n\n    if(type === MESSAGE_EVENT)\n      this._onEvent(...args);\n    else if(type === MESSAGE_RESULT)\n      this._onResult(...args);\n    else\n      throw new Error(`Wrong message type '${type}'`);\n  }\n\n  _onResult(messageId, success, payload) {\n    const [res, rej] = this._messages.get(messageId);\n    this._messages.delete(messageId);\n\n    return success === RESULT_SUCCESS ? res(payload) : rej(payload);\n  }\n\n  _onEvent(messageId, eventName, data) {\n    const [,,onEvent] = this._messages.get(messageId);\n\n    if(onEvent) {\n      onEvent(eventName, data);\n    }\n  }\n\n}\n\nmodule.exports = Worker;\n"],"mappings":"AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAA3B;;AAEA,MAAMC,cAAc,GAAG,CAAvB;AACA,MAAMC,aAAa,GAAG,CAAtB;AAEA,MAAMC,YAAY,GAAG,CAArB;AACA,MAAMC,cAAc,GAAG,CAAvB;;AAEA,MAAMC,MAAN,SAAqBN,WAArB,CAAiC;EAC/B;AACF;AACA;AACA;EACEO,WAAW,CAACC,MAAD,EAAS;IAClB;IAEA,KAAKC,UAAL,GAAkB,CAAlB;IACA,KAAKC,SAAL,GAAiB,IAAIC,GAAJ,EAAjB;IAEA,KAAKC,OAAL,GAAeJ,MAAf;IACA,KAAKI,OAAL,CAAaC,SAAb,GAAyB,KAAKC,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAzB;IACA,KAAKC,GAAL,GAAWC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,KAAgB,QAA1B,CAAX;EACD;;EAEDC,SAAS,GAAG;IACV,KAAKR,OAAL,CAAaQ,SAAb;EACD;EAED;AACF;AACA;AACA;;;EACEC,MAAM,GAAG;IACP,OAAO,KAAKX,SAAL,CAAeY,IAAf,KAAwB,CAA/B;EACD;;EAEDC,UAAU,GAAG;IACX,OAAO,KAAKb,SAAL,CAAeY,IAAtB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEE,IAAI,CAACC,aAAD,EAAyD;IAAA,IAAzCC,IAAyC,uEAAlC,IAAkC;IAAA,IAA5BC,YAA4B,uEAAb,EAAa;IAAA,IAATC,OAAS;IAC3D,OAAO,IAAIC,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;MAC/B,MAAMC,SAAS,GAAG,KAAKvB,UAAL,EAAlB;;MACA,KAAKC,SAAL,CAAeuB,GAAf,CAAmBD,SAAnB,EAA8B,CAACF,GAAD,EAAMC,GAAN,EAAWH,OAAX,CAA9B;;MACA,KAAKhB,OAAL,CAAasB,WAAb,CAAyB,CAACF,SAAD,EAAYN,IAAZ,EAAkBD,aAAlB,CAAzB,EAA2DE,YAAY,IAAI,EAA3E;IACD,CAJM,CAAP;EAKD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEO,WAAW,GAA0C;IAAA,IAAzCR,IAAyC,uEAAlC,IAAkC;IAAA,IAA5BC,YAA4B,uEAAb,EAAa;IAAA,IAATC,OAAS;IACnD,OAAO,IAAIC,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;MAC/B,MAAMC,SAAS,GAAG,KAAKvB,UAAL,EAAlB;;MACA,KAAKC,SAAL,CAAeuB,GAAf,CAAmBD,SAAnB,EAA8B,CAACF,GAAD,EAAMC,GAAN,EAAWH,OAAX,CAA9B;;MACA,KAAKhB,OAAL,CAAasB,WAAb,CAAyB,CAACF,SAAD,EAAYN,IAAZ,CAAzB,EAA4CC,YAAY,IAAI,EAA5D;IACD,CAJM,CAAP;EAKD;;EAEDQ,IAAI,CAACC,SAAD,EAAqB;IAAA,kCAANC,IAAM;MAANA,IAAM;IAAA;;IACvB,KAAKzB,OAAL,CAAasB,WAAb,CAAyB;MAACE,SAAD;MAAYC;IAAZ,CAAzB;EACD;;EAEDvB,UAAU,CAACwB,CAAD,EAAI;IACZ;IACA,IAAG,CAACC,KAAK,CAACC,OAAN,CAAcF,CAAC,CAACZ,IAAhB,CAAD,IAA0BY,CAAC,CAACZ,IAAF,CAAOU,SAApC,EAA+C;MAC7C,OAAO,MAAMD,IAAN,CAAWG,CAAC,CAACZ,IAAF,CAAOU,SAAlB,EAA6B,GAAGE,CAAC,CAACZ,IAAF,CAAOW,IAAvC,CAAP;IACD;;IAED,MAAM,CAACI,IAAD,EAAO,GAAGJ,IAAV,IAAkBC,CAAC,CAACZ,IAA1B;IAEA,IAAGe,IAAI,KAAKtC,aAAZ,EACE,KAAKuC,QAAL,CAAc,GAAGL,IAAjB,EADF,KAEK,IAAGI,IAAI,KAAKvC,cAAZ,EACH,KAAKyC,SAAL,CAAe,GAAGN,IAAlB,EADG,KAGH,MAAM,IAAIO,KAAJ,CAAW,uBAAsBH,IAAK,GAAtC,CAAN;EACH;;EAEDE,SAAS,CAACX,SAAD,EAAYa,OAAZ,EAAqBC,OAArB,EAA8B;IACrC,MAAM,CAAChB,GAAD,EAAMC,GAAN,IAAa,KAAKrB,SAAL,CAAeqC,GAAf,CAAmBf,SAAnB,CAAnB;;IACA,KAAKtB,SAAL,CAAesC,MAAf,CAAsBhB,SAAtB;;IAEA,OAAOa,OAAO,KAAKxC,cAAZ,GAA6ByB,GAAG,CAACgB,OAAD,CAAhC,GAA4Cf,GAAG,CAACe,OAAD,CAAtD;EACD;;EAEDJ,QAAQ,CAACV,SAAD,EAAYI,SAAZ,EAAuBV,IAAvB,EAA6B;IACnC,MAAM,IAAGE,OAAH,IAAc,KAAKlB,SAAL,CAAeqC,GAAf,CAAmBf,SAAnB,CAApB;;IAEA,IAAGJ,OAAH,EAAY;MACVA,OAAO,CAACQ,SAAD,EAAYV,IAAZ,CAAP;IACD;EACF;;AA/F8B;;AAmGjCuB,MAAM,CAACC,OAAP,GAAiB5C,MAAjB"},"metadata":{},"sourceType":"script"}