{"ast":null,"code":"import { mat3, mat4 } from 'gl-matrix';\nimport * as macro from 'vtk.js/Sources/macros';\nimport vtkViewNode from 'vtk.js/Sources/Rendering/SceneGraph/ViewNode';\nimport { registerOverride } from 'vtk.js/Sources/Rendering/OpenGL/ViewNodeFactory'; // ----------------------------------------------------------------------------\n// vtkOpenGLCamera methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLCamera(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLCamera');\n\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model._openGLRenderWindow = model.openGLRenderer.getParent();\n      model.context = model._openGLRenderWindow.getContext();\n    }\n  }; // Renders myself\n\n\n  publicAPI.opaquePass = prepass => {\n    if (prepass) {\n      const tsize = model.openGLRenderer.getTiledSizeAndOrigin();\n      model.context.viewport(tsize.lowerLeftU, tsize.lowerLeftV, tsize.usize, tsize.vsize);\n      model.context.scissor(tsize.lowerLeftU, tsize.lowerLeftV, tsize.usize, tsize.vsize);\n    }\n  };\n\n  publicAPI.translucentPass = publicAPI.opaquePass;\n  publicAPI.opaqueZBufferPass = publicAPI.opaquePass;\n  publicAPI.volumePass = publicAPI.opaquePass;\n\n  publicAPI.getKeyMatrices = ren => {\n    // has the camera changed?\n    if (ren !== model.lastRenderer || model._openGLRenderWindow.getMTime() > model.keyMatrixTime.getMTime() || publicAPI.getMTime() > model.keyMatrixTime.getMTime() || ren.getMTime() > model.keyMatrixTime.getMTime() || model.renderable.getMTime() > model.keyMatrixTime.getMTime()) {\n      mat4.copy(model.keyMatrices.wcvc, model.renderable.getViewMatrix());\n      mat3.fromMat4(model.keyMatrices.normalMatrix, model.keyMatrices.wcvc);\n      mat3.invert(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);\n      mat4.transpose(model.keyMatrices.wcvc, model.keyMatrices.wcvc);\n      const aspectRatio = model.openGLRenderer.getAspectRatio();\n      mat4.copy(model.keyMatrices.vcpc, model.renderable.getProjectionMatrix(aspectRatio, -1, 1));\n      mat4.transpose(model.keyMatrices.vcpc, model.keyMatrices.vcpc);\n      mat4.multiply(model.keyMatrices.wcpc, model.keyMatrices.vcpc, model.keyMatrices.wcvc);\n      model.keyMatrixTime.modified();\n      model.lastRenderer = ren;\n    }\n\n    return model.keyMatrices;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  context: null,\n  lastRenderer: null,\n  keyMatrixTime: null,\n  keyMatrices: null\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.keyMatrixTime = {};\n  macro.obj(model.keyMatrixTime); // values always get set by the get method\n\n  model.keyMatrices = {\n    normalMatrix: new Float64Array(9),\n    vcpc: new Float64Array(16),\n    wcvc: new Float64Array(16),\n    wcpc: new Float64Array(16)\n  }; // Build VTK API\n\n  macro.setGet(publicAPI, model, ['context', 'keyMatrixTime']); // Object methods\n\n  vtkOpenGLCamera(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend\n}; // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkCamera', newInstance);","map":{"version":3,"names":["mat3","mat4","macro","vtkViewNode","registerOverride","vtkOpenGLCamera","publicAPI","model","classHierarchy","push","buildPass","prepass","openGLRenderer","getFirstAncestorOfType","_openGLRenderWindow","getParent","context","getContext","opaquePass","tsize","getTiledSizeAndOrigin","viewport","lowerLeftU","lowerLeftV","usize","vsize","scissor","translucentPass","opaqueZBufferPass","volumePass","getKeyMatrices","ren","lastRenderer","getMTime","keyMatrixTime","renderable","copy","keyMatrices","wcvc","getViewMatrix","fromMat4","normalMatrix","invert","transpose","aspectRatio","getAspectRatio","vcpc","getProjectionMatrix","multiply","wcpc","modified","DEFAULT_VALUES","extend","initialValues","Object","assign","obj","Float64Array","setGet","newInstance"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/OpenGL/Camera/index.js"],"sourcesContent":["import { mat3, mat4 } from 'gl-matrix';\n\nimport * as macro from 'vtk.js/Sources/macros';\nimport vtkViewNode from 'vtk.js/Sources/Rendering/SceneGraph/ViewNode';\n\nimport { registerOverride } from 'vtk.js/Sources/Rendering/OpenGL/ViewNodeFactory';\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLCamera methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLCamera(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLCamera');\n\n  publicAPI.buildPass = (prepass) => {\n    if (prepass) {\n      model.openGLRenderer =\n        publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model._openGLRenderWindow = model.openGLRenderer.getParent();\n      model.context = model._openGLRenderWindow.getContext();\n    }\n  };\n\n  // Renders myself\n  publicAPI.opaquePass = (prepass) => {\n    if (prepass) {\n      const tsize = model.openGLRenderer.getTiledSizeAndOrigin();\n      model.context.viewport(\n        tsize.lowerLeftU,\n        tsize.lowerLeftV,\n        tsize.usize,\n        tsize.vsize\n      );\n      model.context.scissor(\n        tsize.lowerLeftU,\n        tsize.lowerLeftV,\n        tsize.usize,\n        tsize.vsize\n      );\n    }\n  };\n  publicAPI.translucentPass = publicAPI.opaquePass;\n  publicAPI.opaqueZBufferPass = publicAPI.opaquePass;\n  publicAPI.volumePass = publicAPI.opaquePass;\n\n  publicAPI.getKeyMatrices = (ren) => {\n    // has the camera changed?\n    if (\n      ren !== model.lastRenderer ||\n      model._openGLRenderWindow.getMTime() > model.keyMatrixTime.getMTime() ||\n      publicAPI.getMTime() > model.keyMatrixTime.getMTime() ||\n      ren.getMTime() > model.keyMatrixTime.getMTime() ||\n      model.renderable.getMTime() > model.keyMatrixTime.getMTime()\n    ) {\n      mat4.copy(model.keyMatrices.wcvc, model.renderable.getViewMatrix());\n\n      mat3.fromMat4(model.keyMatrices.normalMatrix, model.keyMatrices.wcvc);\n      mat3.invert(\n        model.keyMatrices.normalMatrix,\n        model.keyMatrices.normalMatrix\n      );\n      mat4.transpose(model.keyMatrices.wcvc, model.keyMatrices.wcvc);\n\n      const aspectRatio = model.openGLRenderer.getAspectRatio();\n\n      mat4.copy(\n        model.keyMatrices.vcpc,\n        model.renderable.getProjectionMatrix(aspectRatio, -1, 1)\n      );\n      mat4.transpose(model.keyMatrices.vcpc, model.keyMatrices.vcpc);\n\n      mat4.multiply(\n        model.keyMatrices.wcpc,\n        model.keyMatrices.vcpc,\n        model.keyMatrices.wcvc\n      );\n\n      model.keyMatrixTime.modified();\n      model.lastRenderer = ren;\n    }\n\n    return model.keyMatrices;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  context: null,\n  lastRenderer: null,\n  keyMatrixTime: null,\n  keyMatrices: null,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n\n  model.keyMatrixTime = {};\n  macro.obj(model.keyMatrixTime);\n\n  // values always get set by the get method\n  model.keyMatrices = {\n    normalMatrix: new Float64Array(9),\n    vcpc: new Float64Array(16),\n    wcvc: new Float64Array(16),\n    wcpc: new Float64Array(16),\n  };\n\n  // Build VTK API\n  macro.setGet(publicAPI, model, ['context', 'keyMatrixTime']);\n\n  // Object methods\n  vtkOpenGLCamera(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend);\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend };\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkCamera', newInstance);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}