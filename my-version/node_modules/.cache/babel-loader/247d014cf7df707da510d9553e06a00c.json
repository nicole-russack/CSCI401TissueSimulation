{"ast":null,"code":"import * as macro from 'vtk.js/Sources/macros';\nimport vtkViewNode from 'vtk.js/Sources/Rendering/SceneGraph/ViewNode';\nimport { registerOverride } from 'vtk.js/Sources/Rendering/OpenGL/ViewNodeFactory';\nconst {\n  vtkDebugMacro\n} = macro; // ----------------------------------------------------------------------------\n// vtkOpenGLRenderer methods\n// ----------------------------------------------------------------------------\n\n/* eslint-disable no-bitwise */\n\nfunction vtkOpenGLRenderer(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLRenderer'); // Builds myself.\n\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n\n      publicAPI.updateLights();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.renderable.getActiveCamera());\n      publicAPI.addMissingNodes(model.renderable.getViewPropsWithNestedProps());\n      publicAPI.removeUnusedNodes();\n    }\n  };\n\n  publicAPI.updateLights = () => {\n    let count = 0;\n    const lights = model.renderable.getLightsByReference();\n\n    for (let index = 0; index < lights.length; ++index) {\n      if (lights[index].getSwitch() > 0.0) {\n        count++;\n      }\n    }\n\n    if (!count) {\n      vtkDebugMacro('No lights are on, creating one.');\n      model.renderable.createLight();\n    }\n\n    return count;\n  };\n\n  publicAPI.opaqueZBufferPass = prepass => {\n    if (prepass) {\n      let clearMask = 0;\n      const gl = model.context;\n\n      if (!model.renderable.getTransparent()) {\n        model.context.clearColor(1.0, 0.0, 0.0, 1.0);\n        clearMask |= gl.COLOR_BUFFER_BIT;\n      }\n\n      if (!model.renderable.getPreserveDepthBuffer()) {\n        gl.clearDepth(1.0);\n        clearMask |= gl.DEPTH_BUFFER_BIT;\n        model.context.depthMask(true);\n      }\n\n      const ts = publicAPI.getTiledSizeAndOrigin();\n      gl.enable(gl.SCISSOR_TEST);\n      gl.scissor(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n      gl.viewport(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n      gl.colorMask(true, true, true, true);\n\n      if (clearMask) {\n        gl.clear(clearMask);\n      }\n\n      gl.enable(gl.DEPTH_TEST);\n    }\n  }; // Renders myself\n\n\n  publicAPI.cameraPass = prepass => {\n    if (prepass) {\n      publicAPI.clear();\n    }\n  };\n\n  publicAPI.getAspectRatio = () => {\n    const size = model._parent.getSizeByReference();\n\n    const viewport = model.renderable.getViewportByReference();\n    return size[0] * (viewport[2] - viewport[0]) / ((viewport[3] - viewport[1]) * size[1]);\n  };\n\n  publicAPI.getTiledSizeAndOrigin = () => {\n    const vport = model.renderable.getViewportByReference(); // if there is no window assume 0 1\n\n    const tileViewPort = [0.0, 0.0, 1.0, 1.0]; // find the lower left corner of the viewport, taking into account the\n    // lower left boundary of this tile\n\n    const vpu = vport[0] - tileViewPort[0];\n    const vpv = vport[1] - tileViewPort[1]; // store the result as a pixel value\n\n    const ndvp = model._parent.normalizedDisplayToDisplay(vpu, vpv);\n\n    const lowerLeftU = Math.round(ndvp[0]);\n    const lowerLeftV = Math.round(ndvp[1]); // find the upper right corner of the viewport, taking into account the\n    // lower left boundary of this tile\n\n    const vpu2 = vport[2] - tileViewPort[0];\n    const vpv2 = vport[3] - tileViewPort[1];\n\n    const ndvp2 = model._parent.normalizedDisplayToDisplay(vpu2, vpv2); // now compute the size of the intersection of the viewport with the\n    // current tile\n\n\n    let usize = Math.round(ndvp2[0]) - lowerLeftU;\n    let vsize = Math.round(ndvp2[1]) - lowerLeftV;\n\n    if (usize < 0) {\n      usize = 0;\n    }\n\n    if (vsize < 0) {\n      vsize = 0;\n    }\n\n    return {\n      usize,\n      vsize,\n      lowerLeftU,\n      lowerLeftV\n    };\n  };\n\n  publicAPI.clear = () => {\n    let clearMask = 0;\n    const gl = model.context;\n\n    if (!model.renderable.getTransparent()) {\n      const background = model.renderable.getBackgroundByReference(); // renderable ensures that background has 4 entries.\n\n      model.context.clearColor(background[0], background[1], background[2], background[3]);\n      clearMask |= gl.COLOR_BUFFER_BIT;\n    }\n\n    if (!model.renderable.getPreserveDepthBuffer()) {\n      gl.clearDepth(1.0);\n      clearMask |= gl.DEPTH_BUFFER_BIT;\n      model.context.depthMask(true);\n    }\n\n    gl.colorMask(true, true, true, true);\n    const ts = publicAPI.getTiledSizeAndOrigin();\n    gl.enable(gl.SCISSOR_TEST);\n    gl.scissor(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n    gl.viewport(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n\n    if (clearMask) {\n      gl.clear(clearMask);\n    }\n\n    gl.enable(gl.DEPTH_TEST);\n    /* eslint-enable no-bitwise */\n  };\n\n  publicAPI.releaseGraphicsResources = () => {\n    if (model.selector !== null) {\n      model.selector.releaseGraphicsResources();\n    }\n  };\n\n  publicAPI.setOpenGLRenderWindow = rw => {\n    if (model._openGLRenderWindow === rw) {\n      return;\n    }\n\n    publicAPI.releaseGraphicsResources();\n    model._openGLRenderWindow = rw;\n    model.context = null;\n\n    if (rw) {\n      model.context = model._openGLRenderWindow.getContext();\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  context: null,\n  // _openGLRenderWindow: null,\n  selector: null\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues); // Build VTK API\n\n  macro.get(publicAPI, model, ['shaderCache']);\n  macro.setGet(publicAPI, model, ['selector']);\n  macro.moveToProtected(publicAPI, model, ['openGLRenderWindow']); // Object methods\n\n  vtkOpenGLRenderer(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkOpenGLRenderer'); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend\n}; // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkRenderer', newInstance);","map":{"version":3,"names":["macro","vtkViewNode","registerOverride","vtkDebugMacro","vtkOpenGLRenderer","publicAPI","model","classHierarchy","push","buildPass","prepass","renderable","updateLights","prepareNodes","addMissingNode","getActiveCamera","addMissingNodes","getViewPropsWithNestedProps","removeUnusedNodes","count","lights","getLightsByReference","index","length","getSwitch","createLight","opaqueZBufferPass","clearMask","gl","context","getTransparent","clearColor","COLOR_BUFFER_BIT","getPreserveDepthBuffer","clearDepth","DEPTH_BUFFER_BIT","depthMask","ts","getTiledSizeAndOrigin","enable","SCISSOR_TEST","scissor","lowerLeftU","lowerLeftV","usize","vsize","viewport","colorMask","clear","DEPTH_TEST","cameraPass","getAspectRatio","size","_parent","getSizeByReference","getViewportByReference","vport","tileViewPort","vpu","vpv","ndvp","normalizedDisplayToDisplay","Math","round","vpu2","vpv2","ndvp2","background","getBackgroundByReference","releaseGraphicsResources","selector","setOpenGLRenderWindow","rw","_openGLRenderWindow","getContext","DEFAULT_VALUES","extend","initialValues","Object","assign","get","setGet","moveToProtected","newInstance"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/OpenGL/Renderer/index.js"],"sourcesContent":["import * as macro from 'vtk.js/Sources/macros';\nimport vtkViewNode from 'vtk.js/Sources/Rendering/SceneGraph/ViewNode';\n\nimport { registerOverride } from 'vtk.js/Sources/Rendering/OpenGL/ViewNodeFactory';\n\nconst { vtkDebugMacro } = macro;\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLRenderer methods\n// ----------------------------------------------------------------------------\n/* eslint-disable no-bitwise */\n\nfunction vtkOpenGLRenderer(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLRenderer');\n\n  // Builds myself.\n  publicAPI.buildPass = (prepass) => {\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n\n      publicAPI.updateLights();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.renderable.getActiveCamera());\n      publicAPI.addMissingNodes(model.renderable.getViewPropsWithNestedProps());\n      publicAPI.removeUnusedNodes();\n    }\n  };\n\n  publicAPI.updateLights = () => {\n    let count = 0;\n\n    const lights = model.renderable.getLightsByReference();\n    for (let index = 0; index < lights.length; ++index) {\n      if (lights[index].getSwitch() > 0.0) {\n        count++;\n      }\n    }\n\n    if (!count) {\n      vtkDebugMacro('No lights are on, creating one.');\n      model.renderable.createLight();\n    }\n\n    return count;\n  };\n\n  publicAPI.opaqueZBufferPass = (prepass) => {\n    if (prepass) {\n      let clearMask = 0;\n      const gl = model.context;\n      if (!model.renderable.getTransparent()) {\n        model.context.clearColor(1.0, 0.0, 0.0, 1.0);\n        clearMask |= gl.COLOR_BUFFER_BIT;\n      }\n\n      if (!model.renderable.getPreserveDepthBuffer()) {\n        gl.clearDepth(1.0);\n        clearMask |= gl.DEPTH_BUFFER_BIT;\n        model.context.depthMask(true);\n      }\n\n      const ts = publicAPI.getTiledSizeAndOrigin();\n      gl.enable(gl.SCISSOR_TEST);\n      gl.scissor(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n      gl.viewport(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n\n      gl.colorMask(true, true, true, true);\n      if (clearMask) {\n        gl.clear(clearMask);\n      }\n      gl.enable(gl.DEPTH_TEST);\n    }\n  };\n\n  // Renders myself\n  publicAPI.cameraPass = (prepass) => {\n    if (prepass) {\n      publicAPI.clear();\n    }\n  };\n\n  publicAPI.getAspectRatio = () => {\n    const size = model._parent.getSizeByReference();\n    const viewport = model.renderable.getViewportByReference();\n    return (\n      (size[0] * (viewport[2] - viewport[0])) /\n      ((viewport[3] - viewport[1]) * size[1])\n    );\n  };\n\n  publicAPI.getTiledSizeAndOrigin = () => {\n    const vport = model.renderable.getViewportByReference();\n\n    // if there is no window assume 0 1\n    const tileViewPort = [0.0, 0.0, 1.0, 1.0];\n\n    // find the lower left corner of the viewport, taking into account the\n    // lower left boundary of this tile\n    const vpu = vport[0] - tileViewPort[0];\n    const vpv = vport[1] - tileViewPort[1];\n\n    // store the result as a pixel value\n    const ndvp = model._parent.normalizedDisplayToDisplay(vpu, vpv);\n    const lowerLeftU = Math.round(ndvp[0]);\n    const lowerLeftV = Math.round(ndvp[1]);\n\n    // find the upper right corner of the viewport, taking into account the\n    // lower left boundary of this tile\n    const vpu2 = vport[2] - tileViewPort[0];\n    const vpv2 = vport[3] - tileViewPort[1];\n    const ndvp2 = model._parent.normalizedDisplayToDisplay(vpu2, vpv2);\n\n    // now compute the size of the intersection of the viewport with the\n    // current tile\n    let usize = Math.round(ndvp2[0]) - lowerLeftU;\n    let vsize = Math.round(ndvp2[1]) - lowerLeftV;\n\n    if (usize < 0) {\n      usize = 0;\n    }\n    if (vsize < 0) {\n      vsize = 0;\n    }\n\n    return { usize, vsize, lowerLeftU, lowerLeftV };\n  };\n\n  publicAPI.clear = () => {\n    let clearMask = 0;\n    const gl = model.context;\n\n    if (!model.renderable.getTransparent()) {\n      const background = model.renderable.getBackgroundByReference();\n      // renderable ensures that background has 4 entries.\n      model.context.clearColor(\n        background[0],\n        background[1],\n        background[2],\n        background[3]\n      );\n      clearMask |= gl.COLOR_BUFFER_BIT;\n    }\n\n    if (!model.renderable.getPreserveDepthBuffer()) {\n      gl.clearDepth(1.0);\n      clearMask |= gl.DEPTH_BUFFER_BIT;\n      model.context.depthMask(true);\n    }\n\n    gl.colorMask(true, true, true, true);\n\n    const ts = publicAPI.getTiledSizeAndOrigin();\n    gl.enable(gl.SCISSOR_TEST);\n    gl.scissor(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n    gl.viewport(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n\n    if (clearMask) {\n      gl.clear(clearMask);\n    }\n\n    gl.enable(gl.DEPTH_TEST);\n    /* eslint-enable no-bitwise */\n  };\n\n  publicAPI.releaseGraphicsResources = () => {\n    if (model.selector !== null) {\n      model.selector.releaseGraphicsResources();\n    }\n  };\n\n  publicAPI.setOpenGLRenderWindow = (rw) => {\n    if (model._openGLRenderWindow === rw) {\n      return;\n    }\n    publicAPI.releaseGraphicsResources();\n    model._openGLRenderWindow = rw;\n    model.context = null;\n    if (rw) {\n      model.context = model._openGLRenderWindow.getContext();\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  context: null,\n  // _openGLRenderWindow: null,\n  selector: null,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkViewNode.extend(publicAPI, model, initialValues);\n\n  // Build VTK API\n  macro.get(publicAPI, model, ['shaderCache']);\n\n  macro.setGet(publicAPI, model, ['selector']);\n\n  macro.moveToProtected(publicAPI, model, ['openGLRenderWindow']);\n\n  // Object methods\n  vtkOpenGLRenderer(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkOpenGLRenderer');\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend };\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkRenderer', newInstance);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}