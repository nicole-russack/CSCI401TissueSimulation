{"ast":null,"code":"import { vtkErrorMacro } from 'vtk.js/Sources/macros'; // ----------------------------------------------------------------------------\n// vtkWebGPUDevice static functions\n//\n// WebGPU uses types in a many places and calls, and often those types\n// need to be associated with byte sizes, alignments, native arrays etc.\n// The folowing methods are designed to help vtk.js introspect those types.\n// WebGPU currently tends to use multiple type formats:\n//  - buffer types such as float32x4\n//  - shader types suchs as vec4<f32>\n//  - texture types such as rgba32float\n// ----------------------------------------------------------------------------\n// see https://gpuweb.github.io/gpuweb/#texture-formats\n// for possible formats, there are a lot of them\n\nconst textureDetails = {\n  // 8-bit formats\n  r8unorm: {\n    numComponents: 1,\n    nativeType: Uint8Array,\n    stride: 1,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  r8snorm: {\n    numComponents: 1,\n    nativeType: Int8Array,\n    stride: 1,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  r8uint: {\n    numComponents: 1,\n    nativeType: Uint8Array,\n    stride: 1,\n    elementSize: 1,\n    sampleType: 'uint'\n  },\n  r8sint: {\n    numComponents: 1,\n    nativeType: Int8Array,\n    stride: 1,\n    elementSize: 1,\n    sampleType: 'sint'\n  },\n  // 16-bit formats\n  r16uint: {\n    numComponents: 1,\n    nativeType: Uint16Array,\n    stride: 2,\n    elementSize: 2,\n    sampleType: 'uint'\n  },\n  r16sint: {\n    numComponents: 1,\n    nativeType: Int16Array,\n    stride: 2,\n    elementSize: 2,\n    sampleType: 'sint'\n  },\n  r16float: {\n    numComponents: 1,\n    nativeType: Float32Array,\n    stride: 2,\n    elementSize: 2,\n    sampleType: 'float'\n  },\n  rg8unorm: {\n    numComponents: 2,\n    nativeType: Uint8Array,\n    stride: 2,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  rg8snorm: {\n    numComponents: 2,\n    nativeType: Int8Array,\n    stride: 2,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  rg8uint: {\n    numComponents: 2,\n    nativeType: Uint8Array,\n    stride: 2,\n    elementSize: 1,\n    sampleType: 'uint'\n  },\n  rg8sint: {\n    numComponents: 2,\n    nativeType: Int8Array,\n    stride: 2,\n    elementSize: 1,\n    sampleType: 'sint'\n  },\n  // 32-bit formats\n  r32uint: {\n    numComponents: 1,\n    nativeType: Uint32Array,\n    stride: 4,\n    elementSize: 4,\n    sampleType: 'uint'\n  },\n  r32sint: {\n    numComponents: 1,\n    nativeType: Int32Array,\n    stride: 4,\n    elementSize: 4,\n    sampleType: 'sint'\n  },\n  r32float: {\n    numComponents: 1,\n    nativeType: Float32Array,\n    stride: 4,\n    elementSize: 4,\n    sampleType: 'unfilterable-float'\n  },\n  rg16uint: {\n    numComponents: 2,\n    nativeType: Uint16Array,\n    stride: 4,\n    elementSize: 2,\n    sampleType: 'uint'\n  },\n  rg16sint: {\n    numComponents: 2,\n    nativeType: Int16Array,\n    stride: 4,\n    elementSize: 2,\n    sampleType: 'sint'\n  },\n  rg16float: {\n    numComponents: 2,\n    nativeType: Float32Array,\n    stride: 4,\n    elementSize: 2,\n    sampleType: 'float'\n  },\n  rgba8unorm: {\n    numComponents: 4,\n    nativeType: Uint8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  'rgba8unorm-srgb': {\n    numComponents: 4,\n    nativeType: Uint8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  rgba8snorm: {\n    numComponents: 4,\n    nativeType: Int8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  rgba8uint: {\n    numComponents: 4,\n    nativeType: Uint8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'uint'\n  },\n  rgba8sint: {\n    numComponents: 4,\n    nativeType: Int8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'sint'\n  },\n  bgra8unorm: {\n    numComponents: 4,\n    nativeType: Uint8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  'bgra8unorm-srgb': {\n    numComponents: 4,\n    nativeType: Uint8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  // Packed 32-bit formats\n  rgb9e5ufloat: {\n    numComponents: 4,\n    nativeType: Uint32Array,\n    stride: 4,\n    sampleType: 'float'\n  },\n  rgb10a2unorm: {\n    numComponents: 4,\n    nativeType: Uint32Array,\n    stride: 4,\n    sampleType: 'float'\n  },\n  rg11b10ufloat: {\n    numComponents: 4,\n    nativeType: Float32Array,\n    stride: 4,\n    sampleType: 'float'\n  },\n  // 64-bit formats\n  rg32uint: {\n    numComponents: 2,\n    nativeType: Uint32Array,\n    stride: 8,\n    elementSize: 4,\n    sampleType: 'uint'\n  },\n  rg32sint: {\n    numComponents: 2,\n    nativeType: Int32Array,\n    stride: 8,\n    elementSize: 4,\n    sampleType: 'sint'\n  },\n  rg32float: {\n    numComponents: 2,\n    nativeType: Float32Array,\n    stride: 8,\n    elementSize: 4,\n    sampleType: 'unfilterable-float'\n  },\n  rgba16uint: {\n    numComponents: 4,\n    nativeType: Uint16Array,\n    stride: 8,\n    elementSize: 2,\n    sampleType: 'uint'\n  },\n  rgba16sint: {\n    numComponents: 4,\n    nativeType: Int16Array,\n    stride: 8,\n    elementSize: 2,\n    sampleType: 'sint'\n  },\n  rgba16float: {\n    numComponents: 4,\n    nativeType: Float32Array,\n    stride: 8,\n    elementSize: 2,\n    sampleType: 'float'\n  },\n  // 128-bit formats\n  rgba32uint: {\n    numComponents: 4,\n    nativeType: Uint32Array,\n    stride: 16,\n    elementSize: 4,\n    sampleType: 'uint'\n  },\n  rgba32sint: {\n    numComponents: 4,\n    nativeType: Int32Array,\n    stride: 16,\n    elementSize: 4,\n    sampleType: 'sint'\n  },\n  rgba32float: {\n    numComponents: 4,\n    nativeType: Float32Array,\n    stride: 16,\n    elementSize: 4,\n    sampleType: 'unfilterable-float'\n  },\n  // Depth and stencil formats\n  stencil8: {\n    numComponents: 1,\n    nativeType: Uint8Array,\n    stride: 1,\n    elementSize: 1,\n    sampleType: 'uint'\n  },\n  depth16unorm: {\n    numComponents: 1,\n    nativeType: Uint16Array,\n    stride: 2,\n    elementSize: 2,\n    sampleType: 'depth'\n  },\n  depth24plus: {\n    numComponents: 1,\n    nativeType: Uint32Array,\n    stride: 4,\n    elementSize: 3,\n    sampleType: 'depth'\n  },\n  'depth24plus-stencil8': {\n    numComponents: 2,\n    nativeType: Uint32Array,\n    stride: 4,\n    sampleType: 'mixed'\n  },\n  depth32float: {\n    numComponents: 1,\n    nativeType: Float32Array,\n    stride: 4,\n    elementSize: 4,\n    sampleType: 'depth'\n  }\n};\n\nfunction getDetailsFromTextureFormat(format) {\n  if (!format || format.length < 6) return 0;\n\n  if (format in textureDetails === true) {\n    return textureDetails[format];\n  }\n\n  vtkErrorMacro(`unknown format ${format}`);\n  return null;\n} // see https://gpuweb.github.io/gpuweb/#enumdef-gpuvertexformat\n// for possible formats\n\n\nfunction getByteStrideFromBufferFormat(format) {\n  if (!format || format.length < 5) return 0; // options are x2, x3, x4 or nothing\n\n  let numComp = 1;\n\n  if (format[format.length - 2] === 'x') {\n    numComp = Number(format[format.length - 1]);\n  }\n\n  const sizeStart = numComp === 1 ? format.length - 1 : format.length - 3; // options are 8, 16, 32 resulting in 8, 6, 2 as the last char\n  // plugged into the formula below gives 1, 2, 4 respectively\n\n  const num = Number(format[sizeStart]);\n\n  if (Number.isNaN(num)) {\n    vtkErrorMacro(`unknown format ${format}`);\n    return 0;\n  }\n\n  const typeSize = 5 - num / 2;\n  return numComp * typeSize;\n} // see https://gpuweb.github.io/gpuweb/#enumdef-gpuvertexformat\n// for possible formats\n\n\nfunction getNumberOfComponentsFromBufferFormat(format) {\n  if (!format || format.length < 5) return 0; // options are x2, x3, x4 or nothing\n\n  let numComp = 1;\n\n  if (format[format.length - 2] === 'x') {\n    numComp = Number(format[format.length - 1]);\n  }\n\n  return numComp;\n} // see https://gpuweb.github.io/gpuweb/#enumdef-gpuvertexformat\n// for possible formats\n\n\nfunction getNativeTypeFromBufferFormat(format) {\n  if (!format || format.length < 5) return 0; // raw types are Uint Int or Float as follows\n\n  let result;\n\n  if (format[0] === 'f') {\n    result = 'Float';\n  } else if (format[0] === 's') {\n    result = 'Int';\n  } else if (format[0] === 'u') {\n    result = 'Uint';\n  } else {\n    vtkErrorMacro(`unknown format ${format}`);\n    return undefined;\n  } // options are 8, 16, 32 resulting in 8, 6, 2 as the last char\n  // plugged into the formula below gives 1, 2, 4 respectively\n\n\n  const base = format.split('x')[0];\n  const num = Number(base[base.length - 1]);\n\n  if (Number.isNaN(num)) {\n    vtkErrorMacro(`unknown format ${format}`);\n    return undefined;\n  }\n\n  result += 8 * (5 - num / 2);\n  result += 'Array';\n  return result;\n}\n\nfunction getShaderTypeFromBufferFormat(format) {\n  let dataType;\n\n  if (format[0] === 'f' || format[1] === 'n') {\n    dataType = 'f32';\n  } else if (format[0] === 's' && format[1] === 'i') {\n    dataType = 'i32';\n  } else if (format[0] === 'u' && format[1] === 'i') {\n    dataType = 'u32';\n  } else {\n    vtkErrorMacro(`unknown format ${format}`);\n    return undefined;\n  } // options are x2, x3, x4 or nothing\n\n\n  let numComp = 1;\n\n  if (format[format.length - 2] === 'x') {\n    numComp = Number(format[format.length - 1]);\n  }\n\n  if (numComp === 4) return `vec4<${dataType}>`;\n  if (numComp === 3) return `vec3<${dataType}>`;\n  if (numComp === 2) return `vec2<${dataType}>`;\n  return dataType;\n}\n\nfunction getByteStrideFromShaderFormat(format) {\n  if (!format) return 0;\n  let numComp = 1;\n\n  if (format.substring(0, 3) === 'vec') {\n    numComp = Number(format[3]);\n  } else if (format.substring(0, 3) === 'mat') {\n    numComp = format[3] * format[5];\n  }\n\n  const typeSize = 4;\n  return numComp * typeSize;\n}\n\nfunction getNativeTypeFromShaderFormat(format) {\n  if (!format) return undefined;\n  if (format.includes('f32')) return 'Float32Array';\n  if (format.includes('i32')) return 'Int32Array';\n  if (format.includes('u32')) return 'Uint32Array';\n  vtkErrorMacro(`unknown format ${format}`);\n  return undefined;\n}\n\nexport default {\n  getDetailsFromTextureFormat,\n  getByteStrideFromBufferFormat,\n  getNumberOfComponentsFromBufferFormat,\n  getNativeTypeFromBufferFormat,\n  getShaderTypeFromBufferFormat,\n  getByteStrideFromShaderFormat,\n  getNativeTypeFromShaderFormat\n};","map":{"version":3,"names":["vtkErrorMacro","textureDetails","r8unorm","numComponents","nativeType","Uint8Array","stride","elementSize","sampleType","r8snorm","Int8Array","r8uint","r8sint","r16uint","Uint16Array","r16sint","Int16Array","r16float","Float32Array","rg8unorm","rg8snorm","rg8uint","rg8sint","r32uint","Uint32Array","r32sint","Int32Array","r32float","rg16uint","rg16sint","rg16float","rgba8unorm","rgba8snorm","rgba8uint","rgba8sint","bgra8unorm","rgb9e5ufloat","rgb10a2unorm","rg11b10ufloat","rg32uint","rg32sint","rg32float","rgba16uint","rgba16sint","rgba16float","rgba32uint","rgba32sint","rgba32float","stencil8","depth16unorm","depth24plus","depth32float","getDetailsFromTextureFormat","format","length","getByteStrideFromBufferFormat","numComp","Number","sizeStart","num","isNaN","typeSize","getNumberOfComponentsFromBufferFormat","getNativeTypeFromBufferFormat","result","undefined","base","split","getShaderTypeFromBufferFormat","dataType","getByteStrideFromShaderFormat","substring","getNativeTypeFromShaderFormat","includes"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/WebGPU/Types/index.js"],"sourcesContent":["import { vtkErrorMacro } from 'vtk.js/Sources/macros';\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUDevice static functions\n//\n// WebGPU uses types in a many places and calls, and often those types\n// need to be associated with byte sizes, alignments, native arrays etc.\n// The folowing methods are designed to help vtk.js introspect those types.\n// WebGPU currently tends to use multiple type formats:\n//  - buffer types such as float32x4\n//  - shader types suchs as vec4<f32>\n//  - texture types such as rgba32float\n// ----------------------------------------------------------------------------\n\n// see https://gpuweb.github.io/gpuweb/#texture-formats\n// for possible formats, there are a lot of them\nconst textureDetails = {\n  // 8-bit formats\n  r8unorm: {\n    numComponents: 1,\n    nativeType: Uint8Array,\n    stride: 1,\n    elementSize: 1,\n    sampleType: 'float',\n  },\n  r8snorm: {\n    numComponents: 1,\n    nativeType: Int8Array,\n    stride: 1,\n    elementSize: 1,\n    sampleType: 'float',\n  },\n  r8uint: {\n    numComponents: 1,\n    nativeType: Uint8Array,\n    stride: 1,\n    elementSize: 1,\n    sampleType: 'uint',\n  },\n  r8sint: {\n    numComponents: 1,\n    nativeType: Int8Array,\n    stride: 1,\n    elementSize: 1,\n    sampleType: 'sint',\n  },\n\n  // 16-bit formats\n  r16uint: {\n    numComponents: 1,\n    nativeType: Uint16Array,\n    stride: 2,\n    elementSize: 2,\n    sampleType: 'uint',\n  },\n  r16sint: {\n    numComponents: 1,\n    nativeType: Int16Array,\n    stride: 2,\n    elementSize: 2,\n    sampleType: 'sint',\n  },\n  r16float: {\n    numComponents: 1,\n    nativeType: Float32Array,\n    stride: 2,\n    elementSize: 2,\n    sampleType: 'float',\n  },\n  rg8unorm: {\n    numComponents: 2,\n    nativeType: Uint8Array,\n    stride: 2,\n    elementSize: 1,\n    sampleType: 'float',\n  },\n  rg8snorm: {\n    numComponents: 2,\n    nativeType: Int8Array,\n    stride: 2,\n    elementSize: 1,\n    sampleType: 'float',\n  },\n  rg8uint: {\n    numComponents: 2,\n    nativeType: Uint8Array,\n    stride: 2,\n    elementSize: 1,\n    sampleType: 'uint',\n  },\n  rg8sint: {\n    numComponents: 2,\n    nativeType: Int8Array,\n    stride: 2,\n    elementSize: 1,\n    sampleType: 'sint',\n  },\n\n  // 32-bit formats\n  r32uint: {\n    numComponents: 1,\n    nativeType: Uint32Array,\n    stride: 4,\n    elementSize: 4,\n    sampleType: 'uint',\n  },\n  r32sint: {\n    numComponents: 1,\n    nativeType: Int32Array,\n    stride: 4,\n    elementSize: 4,\n    sampleType: 'sint',\n  },\n  r32float: {\n    numComponents: 1,\n    nativeType: Float32Array,\n    stride: 4,\n    elementSize: 4,\n    sampleType: 'unfilterable-float',\n  },\n  rg16uint: {\n    numComponents: 2,\n    nativeType: Uint16Array,\n    stride: 4,\n    elementSize: 2,\n    sampleType: 'uint',\n  },\n  rg16sint: {\n    numComponents: 2,\n    nativeType: Int16Array,\n    stride: 4,\n    elementSize: 2,\n    sampleType: 'sint',\n  },\n  rg16float: {\n    numComponents: 2,\n    nativeType: Float32Array,\n    stride: 4,\n    elementSize: 2,\n    sampleType: 'float',\n  },\n  rgba8unorm: {\n    numComponents: 4,\n    nativeType: Uint8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'float',\n  },\n  'rgba8unorm-srgb': {\n    numComponents: 4,\n    nativeType: Uint8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'float',\n  },\n  rgba8snorm: {\n    numComponents: 4,\n    nativeType: Int8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'float',\n  },\n  rgba8uint: {\n    numComponents: 4,\n    nativeType: Uint8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'uint',\n  },\n  rgba8sint: {\n    numComponents: 4,\n    nativeType: Int8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'sint',\n  },\n  bgra8unorm: {\n    numComponents: 4,\n    nativeType: Uint8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'float',\n  },\n  'bgra8unorm-srgb': {\n    numComponents: 4,\n    nativeType: Uint8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'float',\n  },\n  // Packed 32-bit formats\n  rgb9e5ufloat: {\n    numComponents: 4,\n    nativeType: Uint32Array,\n    stride: 4,\n    sampleType: 'float',\n  },\n  rgb10a2unorm: {\n    numComponents: 4,\n    nativeType: Uint32Array,\n    stride: 4,\n    sampleType: 'float',\n  },\n  rg11b10ufloat: {\n    numComponents: 4,\n    nativeType: Float32Array,\n    stride: 4,\n    sampleType: 'float',\n  },\n\n  // 64-bit formats\n  rg32uint: {\n    numComponents: 2,\n    nativeType: Uint32Array,\n    stride: 8,\n    elementSize: 4,\n    sampleType: 'uint',\n  },\n  rg32sint: {\n    numComponents: 2,\n    nativeType: Int32Array,\n    stride: 8,\n    elementSize: 4,\n    sampleType: 'sint',\n  },\n  rg32float: {\n    numComponents: 2,\n    nativeType: Float32Array,\n    stride: 8,\n    elementSize: 4,\n    sampleType: 'unfilterable-float',\n  },\n  rgba16uint: {\n    numComponents: 4,\n    nativeType: Uint16Array,\n    stride: 8,\n    elementSize: 2,\n    sampleType: 'uint',\n  },\n  rgba16sint: {\n    numComponents: 4,\n    nativeType: Int16Array,\n    stride: 8,\n    elementSize: 2,\n    sampleType: 'sint',\n  },\n  rgba16float: {\n    numComponents: 4,\n    nativeType: Float32Array,\n    stride: 8,\n    elementSize: 2,\n    sampleType: 'float',\n  },\n\n  // 128-bit formats\n  rgba32uint: {\n    numComponents: 4,\n    nativeType: Uint32Array,\n    stride: 16,\n    elementSize: 4,\n    sampleType: 'uint',\n  },\n  rgba32sint: {\n    numComponents: 4,\n    nativeType: Int32Array,\n    stride: 16,\n    elementSize: 4,\n    sampleType: 'sint',\n  },\n  rgba32float: {\n    numComponents: 4,\n    nativeType: Float32Array,\n    stride: 16,\n    elementSize: 4,\n    sampleType: 'unfilterable-float',\n  },\n\n  // Depth and stencil formats\n  stencil8: {\n    numComponents: 1,\n    nativeType: Uint8Array,\n    stride: 1,\n    elementSize: 1,\n    sampleType: 'uint',\n  },\n  depth16unorm: {\n    numComponents: 1,\n    nativeType: Uint16Array,\n    stride: 2,\n    elementSize: 2,\n    sampleType: 'depth',\n  },\n  depth24plus: {\n    numComponents: 1,\n    nativeType: Uint32Array,\n    stride: 4,\n    elementSize: 3,\n    sampleType: 'depth',\n  },\n  'depth24plus-stencil8': {\n    numComponents: 2,\n    nativeType: Uint32Array,\n    stride: 4,\n    sampleType: 'mixed',\n  },\n  depth32float: {\n    numComponents: 1,\n    nativeType: Float32Array,\n    stride: 4,\n    elementSize: 4,\n    sampleType: 'depth',\n  },\n};\n\nfunction getDetailsFromTextureFormat(format) {\n  if (!format || format.length < 6) return 0;\n\n  if (format in textureDetails === true) {\n    return textureDetails[format];\n  }\n  vtkErrorMacro(`unknown format ${format}`);\n  return null;\n}\n\n// see https://gpuweb.github.io/gpuweb/#enumdef-gpuvertexformat\n// for possible formats\nfunction getByteStrideFromBufferFormat(format) {\n  if (!format || format.length < 5) return 0;\n\n  // options are x2, x3, x4 or nothing\n  let numComp = 1;\n  if (format[format.length - 2] === 'x') {\n    numComp = Number(format[format.length - 1]);\n  }\n\n  const sizeStart = numComp === 1 ? format.length - 1 : format.length - 3;\n  // options are 8, 16, 32 resulting in 8, 6, 2 as the last char\n  // plugged into the formula below gives 1, 2, 4 respectively\n  const num = Number(format[sizeStart]);\n  if (Number.isNaN(num)) {\n    vtkErrorMacro(`unknown format ${format}`);\n    return 0;\n  }\n  const typeSize = 5 - num / 2;\n  return numComp * typeSize;\n}\n\n// see https://gpuweb.github.io/gpuweb/#enumdef-gpuvertexformat\n// for possible formats\nfunction getNumberOfComponentsFromBufferFormat(format) {\n  if (!format || format.length < 5) return 0;\n\n  // options are x2, x3, x4 or nothing\n  let numComp = 1;\n  if (format[format.length - 2] === 'x') {\n    numComp = Number(format[format.length - 1]);\n  }\n  return numComp;\n}\n\n// see https://gpuweb.github.io/gpuweb/#enumdef-gpuvertexformat\n// for possible formats\nfunction getNativeTypeFromBufferFormat(format) {\n  if (!format || format.length < 5) return 0;\n\n  // raw types are Uint Int or Float as follows\n  let result;\n  if (format[0] === 'f') {\n    result = 'Float';\n  } else if (format[0] === 's') {\n    result = 'Int';\n  } else if (format[0] === 'u') {\n    result = 'Uint';\n  } else {\n    vtkErrorMacro(`unknown format ${format}`);\n    return undefined;\n  }\n\n  // options are 8, 16, 32 resulting in 8, 6, 2 as the last char\n  // plugged into the formula below gives 1, 2, 4 respectively\n  const base = format.split('x')[0];\n  const num = Number(base[base.length - 1]);\n  if (Number.isNaN(num)) {\n    vtkErrorMacro(`unknown format ${format}`);\n    return undefined;\n  }\n  result += 8 * (5 - num / 2);\n  result += 'Array';\n\n  return result;\n}\n\nfunction getShaderTypeFromBufferFormat(format) {\n  let dataType;\n  if (format[0] === 'f' || format[1] === 'n') {\n    dataType = 'f32';\n  } else if (format[0] === 's' && format[1] === 'i') {\n    dataType = 'i32';\n  } else if (format[0] === 'u' && format[1] === 'i') {\n    dataType = 'u32';\n  } else {\n    vtkErrorMacro(`unknown format ${format}`);\n    return undefined;\n  }\n\n  // options are x2, x3, x4 or nothing\n  let numComp = 1;\n  if (format[format.length - 2] === 'x') {\n    numComp = Number(format[format.length - 1]);\n  }\n  if (numComp === 4) return `vec4<${dataType}>`;\n  if (numComp === 3) return `vec3<${dataType}>`;\n  if (numComp === 2) return `vec2<${dataType}>`;\n  return dataType;\n}\n\nfunction getByteStrideFromShaderFormat(format) {\n  if (!format) return 0;\n  let numComp = 1;\n\n  if (format.substring(0, 3) === 'vec') {\n    numComp = Number(format[3]);\n  } else if (format.substring(0, 3) === 'mat') {\n    numComp = format[3] * format[5];\n  }\n\n  const typeSize = 4;\n  return numComp * typeSize;\n}\n\nfunction getNativeTypeFromShaderFormat(format) {\n  if (!format) return undefined;\n  if (format.includes('f32')) return 'Float32Array';\n  if (format.includes('i32')) return 'Int32Array';\n  if (format.includes('u32')) return 'Uint32Array';\n  vtkErrorMacro(`unknown format ${format}`);\n  return undefined;\n}\n\nexport default {\n  getDetailsFromTextureFormat,\n  getByteStrideFromBufferFormat,\n  getNumberOfComponentsFromBufferFormat,\n  getNativeTypeFromBufferFormat,\n  getShaderTypeFromBufferFormat,\n  getByteStrideFromShaderFormat,\n  getNativeTypeFromShaderFormat,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}