{"ast":null,"code":"import macro from 'vtk.js/Sources/macros';\nimport vtkWebGPUSampler from 'vtk.js/Sources/Rendering/WebGPU/Sampler';\nimport vtkWebGPUTypes from 'vtk.js/Sources/Rendering/WebGPU/Types'; // ----------------------------------------------------------------------------\n// vtkWebGPUTextureView methods\n// ----------------------------------------------------------------------------\n\n/* eslint-disable no-bitwise */\n\nfunction vtkWebGPUTextureView(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUTextureView');\n\n  publicAPI.create = (texture, options) => {\n    model.texture = texture;\n    model.options = options;\n    model.options.dimension = model.options.dimension || '2d';\n    model.options.label = model.label;\n    model.textureHandle = texture.getHandle();\n    model.handle = model.textureHandle.createView(model.options);\n    model.bindGroupLayoutEntry.texture.viewDimension = model.options.dimension;\n    const tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.texture.getFormat());\n    model.bindGroupLayoutEntry.texture.sampleType = tDetails.sampleType;\n  };\n\n  publicAPI.createFromTextureHandle = (textureHandle, options) => {\n    model.texture = null;\n    model.options = options;\n    model.options.dimension = model.options.dimension || '2d';\n    model.options.label = model.label;\n    model.textureHandle = textureHandle;\n    model.handle = model.textureHandle.createView(model.options);\n    model.bindGroupLayoutEntry.texture.viewDimension = model.options.dimension;\n    const tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(options.format);\n    model.bindGroupLayoutEntry.texture.sampleType = tDetails.sampleType;\n    model.bindGroupTime.modified();\n  };\n\n  publicAPI.getBindGroupEntry = () => {\n    const foo = {\n      resource: publicAPI.getHandle()\n    };\n    return foo;\n  };\n\n  publicAPI.getShaderCode = (binding, group) => {\n    let ttype = 'f32';\n\n    if (model.bindGroupLayoutEntry.texture.sampleType === 'sint') {\n      ttype = 'i32';\n    } else if (model.bindGroupLayoutEntry.texture.sampleType === 'uint') {\n      ttype = 'u32';\n    }\n\n    let result = `@binding(${binding}) @group(${group}) var ${model.label}: texture_${model.options.dimension}<${ttype}>;`;\n\n    if (model.bindGroupLayoutEntry.texture.sampleType === 'depth') {\n      result = `@binding(${binding}) @group(${group}) var ${model.label}: texture_depth_${model.options.dimension};`;\n    }\n\n    return result;\n  };\n\n  publicAPI.addSampler = (device, options) => {\n    const newSamp = vtkWebGPUSampler.newInstance({\n      label: `${model.label}Sampler`\n    });\n    newSamp.create(device, options);\n    publicAPI.setSampler(newSamp);\n  };\n\n  publicAPI.getBindGroupTime = () => {\n    // check if the handle changed\n    if (model.texture && model.texture.getHandle() !== model.textureHandle) {\n      model.textureHandle = model.texture.getHandle();\n      model.handle = model.textureHandle.createView(model.options);\n      model.bindGroupTime.modified();\n    }\n\n    return model.bindGroupTime;\n  }; // if the texture has changed then get a new view\n\n\n  publicAPI.getHandle = () => {\n    if (model.texture && model.texture.getHandle() !== model.textureHandle) {\n      model.textureHandle = model.texture.getHandle();\n      model.handle = model.textureHandle.createView(model.options);\n      model.bindGroupTime.modified();\n    }\n\n    return model.handle;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  texture: null,\n  handle: null,\n  sampler: null,\n  label: null\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods\n\n  macro.obj(publicAPI, model);\n  model.bindGroupLayoutEntry = {\n    /* eslint-disable no-undef */\n    visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,\n\n    /* eslint-enable no-undef */\n    texture: {\n      sampleType: 'float',\n      viewDimension: '2d' // multisampled: false,\n\n    }\n  };\n  model.bindGroupTime = {};\n  macro.obj(model.bindGroupTime, {\n    mtime: 0\n  });\n  macro.get(publicAPI, model, ['bindGroupTime', 'texture']);\n  macro.setGet(publicAPI, model, ['bindGroupLayoutEntry', 'label', 'sampler']);\n  vtkWebGPUTextureView(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend\n};","map":{"version":3,"names":["macro","vtkWebGPUSampler","vtkWebGPUTypes","vtkWebGPUTextureView","publicAPI","model","classHierarchy","push","create","texture","options","dimension","label","textureHandle","getHandle","handle","createView","bindGroupLayoutEntry","viewDimension","tDetails","getDetailsFromTextureFormat","getFormat","sampleType","createFromTextureHandle","format","bindGroupTime","modified","getBindGroupEntry","foo","resource","getShaderCode","binding","group","ttype","result","addSampler","device","newSamp","newInstance","setSampler","getBindGroupTime","DEFAULT_VALUES","sampler","extend","initialValues","Object","assign","obj","visibility","GPUShaderStage","VERTEX","FRAGMENT","mtime","get","setGet"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/WebGPU/TextureView/index.js"],"sourcesContent":["import macro from 'vtk.js/Sources/macros';\nimport vtkWebGPUSampler from 'vtk.js/Sources/Rendering/WebGPU/Sampler';\nimport vtkWebGPUTypes from 'vtk.js/Sources/Rendering/WebGPU/Types';\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUTextureView methods\n// ----------------------------------------------------------------------------\n\n/* eslint-disable no-bitwise */\n\nfunction vtkWebGPUTextureView(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUTextureView');\n\n  publicAPI.create = (texture, options) => {\n    model.texture = texture;\n    model.options = options;\n    model.options.dimension = model.options.dimension || '2d';\n    model.options.label = model.label;\n    model.textureHandle = texture.getHandle();\n    model.handle = model.textureHandle.createView(model.options);\n    model.bindGroupLayoutEntry.texture.viewDimension = model.options.dimension;\n    const tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(\n      model.texture.getFormat()\n    );\n    model.bindGroupLayoutEntry.texture.sampleType = tDetails.sampleType;\n  };\n\n  publicAPI.createFromTextureHandle = (textureHandle, options) => {\n    model.texture = null;\n    model.options = options;\n    model.options.dimension = model.options.dimension || '2d';\n    model.options.label = model.label;\n    model.textureHandle = textureHandle;\n    model.handle = model.textureHandle.createView(model.options);\n    model.bindGroupLayoutEntry.texture.viewDimension = model.options.dimension;\n    const tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(options.format);\n    model.bindGroupLayoutEntry.texture.sampleType = tDetails.sampleType;\n    model.bindGroupTime.modified();\n  };\n\n  publicAPI.getBindGroupEntry = () => {\n    const foo = {\n      resource: publicAPI.getHandle(),\n    };\n    return foo;\n  };\n\n  publicAPI.getShaderCode = (binding, group) => {\n    let ttype = 'f32';\n    if (model.bindGroupLayoutEntry.texture.sampleType === 'sint') {\n      ttype = 'i32';\n    } else if (model.bindGroupLayoutEntry.texture.sampleType === 'uint') {\n      ttype = 'u32';\n    }\n    let result = `@binding(${binding}) @group(${group}) var ${model.label}: texture_${model.options.dimension}<${ttype}>;`;\n    if (model.bindGroupLayoutEntry.texture.sampleType === 'depth') {\n      result = `@binding(${binding}) @group(${group}) var ${model.label}: texture_depth_${model.options.dimension};`;\n    }\n    return result;\n  };\n\n  publicAPI.addSampler = (device, options) => {\n    const newSamp = vtkWebGPUSampler.newInstance({\n      label: `${model.label}Sampler`,\n    });\n    newSamp.create(device, options);\n    publicAPI.setSampler(newSamp);\n  };\n\n  publicAPI.getBindGroupTime = () => {\n    // check if the handle changed\n    if (model.texture && model.texture.getHandle() !== model.textureHandle) {\n      model.textureHandle = model.texture.getHandle();\n      model.handle = model.textureHandle.createView(model.options);\n      model.bindGroupTime.modified();\n    }\n    return model.bindGroupTime;\n  };\n\n  // if the texture has changed then get a new view\n  publicAPI.getHandle = () => {\n    if (model.texture && model.texture.getHandle() !== model.textureHandle) {\n      model.textureHandle = model.texture.getHandle();\n      model.handle = model.textureHandle.createView(model.options);\n      model.bindGroupTime.modified();\n    }\n    return model.handle;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  texture: null,\n  handle: null,\n  sampler: null,\n  label: null,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n\n  model.bindGroupLayoutEntry = {\n    /* eslint-disable no-undef */\n    visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,\n    /* eslint-enable no-undef */\n    texture: {\n      sampleType: 'float',\n      viewDimension: '2d',\n      // multisampled: false,\n    },\n  };\n\n  model.bindGroupTime = {};\n  macro.obj(model.bindGroupTime, { mtime: 0 });\n\n  macro.get(publicAPI, model, ['bindGroupTime', 'texture']);\n  macro.setGet(publicAPI, model, ['bindGroupLayoutEntry', 'label', 'sampler']);\n\n  vtkWebGPUTextureView(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend);\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}