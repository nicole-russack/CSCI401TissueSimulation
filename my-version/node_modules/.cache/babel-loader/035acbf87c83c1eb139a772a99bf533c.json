{"ast":null,"code":"import * as vtkMath from 'vtk.js/Sources/Common/Core/Math';\nimport macro from 'vtk.js/Sources/macros';\nconst PLANE_TOLERANCE = 1.0e-6;\nconst COINCIDE = 'coincide';\nconst DISJOINT = 'disjoint'; // ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nfunction evaluate(normal, origin, x) {\n  return normal[0] * (x[0] - origin[0]) + normal[1] * (x[1] - origin[1]) + normal[2] * (x[2] - origin[2]);\n}\n\nfunction distanceToPlane(x, origin, normal) {\n  const distance = normal[0] * (x[0] - origin[0]) + normal[1] * (x[1] - origin[1]) + normal[2] * (x[2] - origin[2]);\n  return Math.abs(distance);\n}\n\nfunction projectPoint(x, origin, normal, xproj) {\n  const xo = [];\n  vtkMath.subtract(x, origin, xo);\n  const t = vtkMath.dot(normal, xo);\n  xproj[0] = x[0] - t * normal[0];\n  xproj[1] = x[1] - t * normal[1];\n  xproj[2] = x[2] - t * normal[2];\n}\n\nfunction projectVector(v, normal, vproj) {\n  const t = vtkMath.dot(v, normal);\n  let n2 = vtkMath.dot(normal, normal);\n\n  if (n2 === 0) {\n    n2 = 1.0;\n  }\n\n  vproj[0] = v[0] - t * normal[0] / n2;\n  vproj[1] = v[1] - t * normal[1] / n2;\n  vproj[2] = v[2] - t * normal[2] / n2;\n  return vproj;\n}\n\nfunction generalizedProjectPoint(x, origin, normal, xproj) {\n  const xo = [];\n  vtkMath.subtract(x, origin, xo);\n  const t = vtkMath.dot(normal, xo);\n  const n2 = vtkMath.dot(normal, normal);\n\n  if (n2 !== 0) {\n    xproj[0] = x[0] - t * normal[0] / n2;\n    xproj[1] = x[1] - t * normal[1] / n2;\n    xproj[2] = x[2] - t * normal[2] / n2;\n  } else {\n    xproj[0] = x[0];\n    xproj[1] = x[1];\n    xproj[2] = x[2];\n  }\n}\n\nfunction intersectWithLine(p1, p2, origin, normal) {\n  const outObj = {\n    intersection: false,\n    betweenPoints: false,\n    t: Number.MAX_VALUE,\n    x: []\n  };\n  const p21 = [];\n  const p1Origin = []; // Compute line vector\n\n  vtkMath.subtract(p2, p1, p21);\n  vtkMath.subtract(origin, p1, p1Origin); // Compute denominator.  If ~0, line and plane are parallel.\n  // const num = vtkMath.dot(normal, origin) - vtkMath.dot(normal, p1);\n\n  const num = vtkMath.dot(normal, p1Origin);\n  const den = vtkMath.dot(normal, p21); // If denominator with respect to numerator is \"zero\", then the line and\n  // plane are considered parallel.\n\n  let fabsden;\n  let fabstolerance; // Trying to avoid an expensive call to fabs()\n\n  if (den < 0.0) {\n    fabsden = -den;\n  } else {\n    fabsden = den;\n  }\n\n  if (num < 0.0) {\n    fabstolerance = -num * PLANE_TOLERANCE;\n  } else {\n    fabstolerance = num * PLANE_TOLERANCE;\n  }\n\n  if (fabsden <= fabstolerance) {\n    return outObj;\n  } // Where on the line between p1 and p2 is the intersection\n  // If between 0 and 1, it is between the two points. If < 0 it's before p1, if > 1 it's after p2\n\n\n  outObj.t = num / den;\n  outObj.x[0] = p1[0] + outObj.t * p21[0];\n  outObj.x[1] = p1[1] + outObj.t * p21[1];\n  outObj.x[2] = p1[2] + outObj.t * p21[2];\n  outObj.intersection = true;\n  outObj.betweenPoints = outObj.t >= 0.0 && outObj.t <= 1.0;\n  return outObj;\n}\n\nfunction intersectWithPlane(plane1Origin, plane1Normal, plane2Origin, plane2Normal) {\n  const outObj = {\n    intersection: false,\n    l0: [],\n    l1: [],\n    error: null\n  };\n  const cross = [];\n  vtkMath.cross(plane1Normal, plane2Normal, cross);\n  const absCross = cross.map(n => Math.abs(n)); // test if the two planes are parallel\n\n  if (absCross[0] + absCross[1] + absCross[2] < PLANE_TOLERANCE) {\n    // test if disjoint or coincide\n    const v = [];\n    vtkMath.subtract(plane1Origin, plane2Origin, v);\n\n    if (vtkMath.dot(plane1Normal, v) === 0) {\n      outObj.error = COINCIDE;\n    } else {\n      outObj.error = DISJOINT;\n    }\n\n    return outObj;\n  } // Plane1 and Plane2 intersect in a line\n  // first determine max abs coordinate of the cross product\n\n\n  let maxc;\n\n  if (absCross[0] > absCross[1] && absCross[0] > absCross[2]) {\n    maxc = 'x';\n  } else if (absCross[1] > absCross[2]) {\n    maxc = 'y';\n  } else {\n    maxc = 'z';\n  } // To get a point on the intersect line, zero the max coord, and solve for the other two\n\n\n  const iP = []; // intersectionPoint\n  // the constants in the 2 plane equations\n\n  const d1 = -vtkMath.dot(plane1Normal, plane1Origin);\n  const d2 = -vtkMath.dot(plane2Normal, plane2Origin); // eslint-disable-next-line default-case\n\n  switch (maxc) {\n    case 'x':\n      // intersect with x=0\n      iP[0] = 0;\n      iP[1] = (d2 * plane1Normal[2] - d1 * plane2Normal[2]) / cross[0];\n      iP[2] = (d1 * plane2Normal[1] - d2 * plane1Normal[1]) / cross[0];\n      break;\n\n    case 'y':\n      // intersect with y=0\n      iP[0] = (d1 * plane2Normal[2] - d2 * plane1Normal[2]) / cross[1];\n      iP[1] = 0;\n      iP[2] = (d2 * plane1Normal[0] - d1 * plane2Normal[0]) / cross[1];\n      break;\n\n    case 'z':\n      // intersect with z=0\n      iP[0] = (d2 * plane1Normal[1] - d1 * plane2Normal[1]) / cross[2];\n      iP[1] = (d1 * plane2Normal[0] - d2 * plane1Normal[0]) / cross[2];\n      iP[2] = 0;\n      break;\n  }\n\n  outObj.l0 = iP;\n  vtkMath.add(iP, cross, outObj.l1);\n  outObj.intersection = true;\n  return outObj;\n} // ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\n\nexport const STATIC = {\n  evaluate,\n  distanceToPlane,\n  projectPoint,\n  projectVector,\n  generalizedProjectPoint,\n  intersectWithLine,\n  intersectWithPlane,\n  DISJOINT,\n  COINCIDE\n}; // ----------------------------------------------------------------------------\n// vtkPlane methods\n// ----------------------------------------------------------------------------\n\nexport function vtkPlane(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkPlane');\n\n  publicAPI.distanceToPlane = x => distanceToPlane(x, model.origin, model.normal);\n\n  publicAPI.projectPoint = (x, xproj) => {\n    projectPoint(x, model.origin, model.normal, xproj);\n  };\n\n  publicAPI.projectVector = (v, vproj) => projectVector(v, model.normal, vproj);\n\n  publicAPI.push = distance => {\n    if (distance === 0.0) {\n      return;\n    }\n\n    for (let i = 0; i < 3; i++) {\n      model.origin[i] += distance * model.normal[i];\n    }\n  };\n\n  publicAPI.generalizedProjectPoint = (x, xproj) => {\n    generalizedProjectPoint(x, model.origin, model.normal, xproj);\n  };\n\n  publicAPI.evaluateFunction = (x, y, z) => {\n    if (!Array.isArray(x)) {\n      return model.normal[0] * (x - model.origin[0]) + model.normal[1] * (y - model.origin[1]) + model.normal[2] * (z - model.origin[2]);\n    }\n\n    return model.normal[0] * (x[0] - model.origin[0]) + model.normal[1] * (x[1] - model.origin[1]) + model.normal[2] * (x[2] - model.origin[2]);\n  };\n\n  publicAPI.evaluateGradient = xyz => {\n    const retVal = [model.normal[0], model.normal[1], model.normal[2]];\n    return retVal;\n  };\n\n  publicAPI.intersectWithLine = (p1, p2) => intersectWithLine(p1, p2, model.origin, model.normal);\n\n  publicAPI.intersectWithPlane = (planeOrigin, planeNormal) => intersectWithPlane(planeOrigin, planeNormal, model.origin, model.normal);\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  normal: [0.0, 0.0, 1.0],\n  origin: [0.0, 0.0, 0.0]\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods\n\n  macro.obj(publicAPI, model);\n  macro.setGetArray(publicAPI, model, ['normal', 'origin'], 3);\n  vtkPlane(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkPlane'); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend,\n  ...STATIC\n};","map":{"version":3,"names":["vtkMath","macro","PLANE_TOLERANCE","COINCIDE","DISJOINT","evaluate","normal","origin","x","distanceToPlane","distance","Math","abs","projectPoint","xproj","xo","subtract","t","dot","projectVector","v","vproj","n2","generalizedProjectPoint","intersectWithLine","p1","p2","outObj","intersection","betweenPoints","Number","MAX_VALUE","p21","p1Origin","num","den","fabsden","fabstolerance","intersectWithPlane","plane1Origin","plane1Normal","plane2Origin","plane2Normal","l0","l1","error","cross","absCross","map","n","maxc","iP","d1","d2","add","STATIC","vtkPlane","publicAPI","model","classHierarchy","push","i","evaluateFunction","y","z","Array","isArray","evaluateGradient","xyz","retVal","planeOrigin","planeNormal","DEFAULT_VALUES","extend","initialValues","Object","assign","obj","setGetArray","newInstance"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Common/DataModel/Plane/index.js"],"sourcesContent":["import * as vtkMath from 'vtk.js/Sources/Common/Core/Math';\nimport macro from 'vtk.js/Sources/macros';\n\nconst PLANE_TOLERANCE = 1.0e-6;\nconst COINCIDE = 'coincide';\nconst DISJOINT = 'disjoint';\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nfunction evaluate(normal, origin, x) {\n  return (\n    normal[0] * (x[0] - origin[0]) +\n    normal[1] * (x[1] - origin[1]) +\n    normal[2] * (x[2] - origin[2])\n  );\n}\n\nfunction distanceToPlane(x, origin, normal) {\n  const distance =\n    normal[0] * (x[0] - origin[0]) +\n    normal[1] * (x[1] - origin[1]) +\n    normal[2] * (x[2] - origin[2]);\n\n  return Math.abs(distance);\n}\n\nfunction projectPoint(x, origin, normal, xproj) {\n  const xo = [];\n  vtkMath.subtract(x, origin, xo);\n\n  const t = vtkMath.dot(normal, xo);\n\n  xproj[0] = x[0] - t * normal[0];\n  xproj[1] = x[1] - t * normal[1];\n  xproj[2] = x[2] - t * normal[2];\n}\n\nfunction projectVector(v, normal, vproj) {\n  const t = vtkMath.dot(v, normal);\n\n  let n2 = vtkMath.dot(normal, normal);\n  if (n2 === 0) {\n    n2 = 1.0;\n  }\n\n  vproj[0] = v[0] - (t * normal[0]) / n2;\n  vproj[1] = v[1] - (t * normal[1]) / n2;\n  vproj[2] = v[2] - (t * normal[2]) / n2;\n  return vproj;\n}\n\nfunction generalizedProjectPoint(x, origin, normal, xproj) {\n  const xo = [];\n  vtkMath.subtract(x, origin, xo);\n\n  const t = vtkMath.dot(normal, xo);\n  const n2 = vtkMath.dot(normal, normal);\n\n  if (n2 !== 0) {\n    xproj[0] = x[0] - (t * normal[0]) / n2;\n    xproj[1] = x[1] - (t * normal[1]) / n2;\n    xproj[2] = x[2] - (t * normal[2]) / n2;\n  } else {\n    xproj[0] = x[0];\n    xproj[1] = x[1];\n    xproj[2] = x[2];\n  }\n}\n\nfunction intersectWithLine(p1, p2, origin, normal) {\n  const outObj = {\n    intersection: false,\n    betweenPoints: false,\n    t: Number.MAX_VALUE,\n    x: [],\n  };\n\n  const p21 = [];\n  const p1Origin = [];\n  // Compute line vector\n  vtkMath.subtract(p2, p1, p21);\n  vtkMath.subtract(origin, p1, p1Origin);\n\n  // Compute denominator.  If ~0, line and plane are parallel.\n  // const num = vtkMath.dot(normal, origin) - vtkMath.dot(normal, p1);\n  const num = vtkMath.dot(normal, p1Origin);\n  const den = vtkMath.dot(normal, p21);\n\n  // If denominator with respect to numerator is \"zero\", then the line and\n  // plane are considered parallel.\n  let fabsden;\n  let fabstolerance;\n\n  // Trying to avoid an expensive call to fabs()\n  if (den < 0.0) {\n    fabsden = -den;\n  } else {\n    fabsden = den;\n  }\n  if (num < 0.0) {\n    fabstolerance = -num * PLANE_TOLERANCE;\n  } else {\n    fabstolerance = num * PLANE_TOLERANCE;\n  }\n  if (fabsden <= fabstolerance) {\n    return outObj;\n  }\n\n  // Where on the line between p1 and p2 is the intersection\n  // If between 0 and 1, it is between the two points. If < 0 it's before p1, if > 1 it's after p2\n  outObj.t = num / den;\n\n  outObj.x[0] = p1[0] + outObj.t * p21[0];\n  outObj.x[1] = p1[1] + outObj.t * p21[1];\n  outObj.x[2] = p1[2] + outObj.t * p21[2];\n\n  outObj.intersection = true;\n  outObj.betweenPoints = outObj.t >= 0.0 && outObj.t <= 1.0;\n  return outObj;\n}\n\nfunction intersectWithPlane(\n  plane1Origin,\n  plane1Normal,\n  plane2Origin,\n  plane2Normal\n) {\n  const outObj = {\n    intersection: false,\n    l0: [],\n    l1: [],\n    error: null,\n  };\n\n  const cross = [];\n  vtkMath.cross(plane1Normal, plane2Normal, cross);\n  const absCross = cross.map((n) => Math.abs(n));\n\n  // test if the two planes are parallel\n  if (absCross[0] + absCross[1] + absCross[2] < PLANE_TOLERANCE) {\n    // test if disjoint or coincide\n    const v = [];\n    vtkMath.subtract(plane1Origin, plane2Origin, v);\n    if (vtkMath.dot(plane1Normal, v) === 0) {\n      outObj.error = COINCIDE;\n    } else {\n      outObj.error = DISJOINT;\n    }\n    return outObj;\n  }\n\n  // Plane1 and Plane2 intersect in a line\n  // first determine max abs coordinate of the cross product\n  let maxc;\n  if (absCross[0] > absCross[1] && absCross[0] > absCross[2]) {\n    maxc = 'x';\n  } else if (absCross[1] > absCross[2]) {\n    maxc = 'y';\n  } else {\n    maxc = 'z';\n  }\n\n  // To get a point on the intersect line, zero the max coord, and solve for the other two\n  const iP = []; // intersectionPoint\n  // the constants in the 2 plane equations\n  const d1 = -vtkMath.dot(plane1Normal, plane1Origin);\n  const d2 = -vtkMath.dot(plane2Normal, plane2Origin);\n\n  // eslint-disable-next-line default-case\n  switch (maxc) {\n    case 'x': // intersect with x=0\n      iP[0] = 0;\n      iP[1] = (d2 * plane1Normal[2] - d1 * plane2Normal[2]) / cross[0];\n      iP[2] = (d1 * plane2Normal[1] - d2 * plane1Normal[1]) / cross[0];\n      break;\n    case 'y': // intersect with y=0\n      iP[0] = (d1 * plane2Normal[2] - d2 * plane1Normal[2]) / cross[1];\n      iP[1] = 0;\n      iP[2] = (d2 * plane1Normal[0] - d1 * plane2Normal[0]) / cross[1];\n      break;\n    case 'z': // intersect with z=0\n      iP[0] = (d2 * plane1Normal[1] - d1 * plane2Normal[1]) / cross[2];\n      iP[1] = (d1 * plane2Normal[0] - d2 * plane1Normal[0]) / cross[2];\n      iP[2] = 0;\n      break;\n  }\n\n  outObj.l0 = iP;\n  vtkMath.add(iP, cross, outObj.l1);\n  outObj.intersection = true;\n\n  return outObj;\n}\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nexport const STATIC = {\n  evaluate,\n  distanceToPlane,\n  projectPoint,\n  projectVector,\n  generalizedProjectPoint,\n  intersectWithLine,\n  intersectWithPlane,\n  DISJOINT,\n  COINCIDE,\n};\n\n// ----------------------------------------------------------------------------\n// vtkPlane methods\n// ----------------------------------------------------------------------------\n\nexport function vtkPlane(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkPlane');\n\n  publicAPI.distanceToPlane = (x) =>\n    distanceToPlane(x, model.origin, model.normal);\n\n  publicAPI.projectPoint = (x, xproj) => {\n    projectPoint(x, model.origin, model.normal, xproj);\n  };\n\n  publicAPI.projectVector = (v, vproj) => projectVector(v, model.normal, vproj);\n\n  publicAPI.push = (distance) => {\n    if (distance === 0.0) {\n      return;\n    }\n    for (let i = 0; i < 3; i++) {\n      model.origin[i] += distance * model.normal[i];\n    }\n  };\n\n  publicAPI.generalizedProjectPoint = (x, xproj) => {\n    generalizedProjectPoint(x, model.origin, model.normal, xproj);\n  };\n\n  publicAPI.evaluateFunction = (x, y, z) => {\n    if (!Array.isArray(x)) {\n      return (\n        model.normal[0] * (x - model.origin[0]) +\n        model.normal[1] * (y - model.origin[1]) +\n        model.normal[2] * (z - model.origin[2])\n      );\n    }\n    return (\n      model.normal[0] * (x[0] - model.origin[0]) +\n      model.normal[1] * (x[1] - model.origin[1]) +\n      model.normal[2] * (x[2] - model.origin[2])\n    );\n  };\n\n  publicAPI.evaluateGradient = (xyz) => {\n    const retVal = [model.normal[0], model.normal[1], model.normal[2]];\n    return retVal;\n  };\n\n  publicAPI.intersectWithLine = (p1, p2) =>\n    intersectWithLine(p1, p2, model.origin, model.normal);\n\n  publicAPI.intersectWithPlane = (planeOrigin, planeNormal) =>\n    intersectWithPlane(planeOrigin, planeNormal, model.origin, model.normal);\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  normal: [0.0, 0.0, 1.0],\n  origin: [0.0, 0.0, 0.0],\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n\n  macro.setGetArray(publicAPI, model, ['normal', 'origin'], 3);\n\n  vtkPlane(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkPlane');\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend, ...STATIC };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}