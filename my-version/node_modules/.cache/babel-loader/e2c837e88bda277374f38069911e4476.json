{"ast":null,"code":"import macro from 'vtk.js/Sources/macros';\nimport HalfFloat from 'vtk.js/Sources/Common/Core/HalfFloat';\nimport vtkWebGPUBufferManager from 'vtk.js/Sources/Rendering/WebGPU/BufferManager';\nimport vtkWebGPUTextureView from 'vtk.js/Sources/Rendering/WebGPU/TextureView';\nimport vtkWebGPUTypes from 'vtk.js/Sources/Rendering/WebGPU/Types';\nimport vtkTexture from 'vtk.js/Sources/Rendering/Core/Texture';\nconst {\n  BufferUsage\n} = vtkWebGPUBufferManager; // ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// vtkWebGPUTexture methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUTexture(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUTexture');\n\n  publicAPI.create = (device, options) => {\n    model.device = device;\n    model.width = options.width;\n    model.height = options.height;\n    model.depth = options.depth ? options.depth : 1;\n    const dimension = model.depth === 1 ? '2d' : '3d';\n    model.format = options.format ? options.format : 'rgba8unorm';\n    model.mipLevel = options.mipLevel ? options.mipLevel : 0;\n    /* eslint-disable no-undef */\n\n    /* eslint-disable no-bitwise */\n\n    model.usage = options.usage ? options.usage : GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n    /* eslint-enable no-undef */\n\n    /* eslint-enable no-bitwise */\n\n    model.handle = model.device.getHandle().createTexture({\n      size: [model.width, model.height, model.depth],\n      format: model.format,\n      // 'rgba8unorm',\n      usage: model.usage,\n      label: model.label,\n      dimension,\n      mipLevelCount: model.mipLevel + 1\n    });\n  };\n\n  publicAPI.assignFromHandle = (device, handle, options) => {\n    model.device = device;\n    model.handle = handle;\n    model.width = options.width;\n    model.height = options.height;\n    model.depth = options.depth ? options.depth : 1;\n    model.format = options.format ? options.format : 'rgba8unorm';\n    /* eslint-disable no-undef */\n\n    /* eslint-disable no-bitwise */\n\n    model.usage = options.usage ? options.usage : GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n    /* eslint-enable no-undef */\n\n    /* eslint-enable no-bitwise */\n  };\n\n  publicAPI.writeImageData = req => {\n    let nativeArray = [];\n\n    if (req.canvas) {\n      model.device.getHandle().queue.copyExternalImageToTexture({\n        source: req.canvas,\n        flipY: req.flip\n      }, {\n        texture: model.handle,\n        premultipliedAlpha: true\n      }, [model.width, model.height, model.depth]);\n      model.ready = true;\n      return;\n    }\n\n    if (req.jsImageData && !req.nativeArray) {\n      req.width = req.jsImageData.width;\n      req.height = req.jsImageData.height;\n      req.depth = 1;\n      req.format = 'rgba8unorm';\n      req.flip = true;\n      req.nativeArray = req.jsImageData.data;\n    }\n\n    const tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.format);\n    let bufferBytesPerRow = model.width * tDetails.stride;\n\n    const fixAll = (arr, height, depth) => {\n      // bytesPerRow must be a multiple of 256 so we might need to rebuild\n      // the data here before passing to the buffer. e.g. if it is unorm8x4 then\n      // we need to have width be a multiple of 64\n      const inWidthInBytes = arr.length / (height * depth) * arr.BYTES_PER_ELEMENT; // is this a half float texture?\n\n      const halfFloat = tDetails.elementSize === 2 && tDetails.sampleType === 'float'; // if we need to copy the data\n\n      if (halfFloat || inWidthInBytes % 256) {\n        const inArray = arr;\n        const inWidth = inWidthInBytes / inArray.BYTES_PER_ELEMENT;\n        const outBytesPerElement = tDetails.elementSize;\n        const outWidthInBytes = 256 * Math.floor((inWidth * outBytesPerElement + 255) / 256);\n        const outWidth = outWidthInBytes / outBytesPerElement;\n        const outArray = macro.newTypedArray(halfFloat ? 'Uint16Array' : inArray.constructor.name, outWidth * height * depth);\n\n        for (let v = 0; v < height * depth; v++) {\n          if (halfFloat) {\n            for (let i = 0; i < inWidth; i++) {\n              outArray[v * outWidth + i] = HalfFloat.toHalf(inArray[v * inWidth + i]);\n            }\n          } else {\n            outArray.set(inArray.subarray(v * inWidth, (v + 1) * inWidth), v * outWidth);\n          }\n        }\n\n        return [outArray, outWidthInBytes];\n      }\n\n      return [arr, inWidthInBytes];\n    };\n\n    if (req.nativeArray) {\n      nativeArray = req.nativeArray;\n    }\n\n    if (req.image) {\n      const canvas = document.createElement('canvas');\n      canvas.width = req.image.width;\n      canvas.height = req.image.height;\n      const ctx = canvas.getContext('2d');\n      ctx.translate(0, canvas.height);\n      ctx.scale(1, -1);\n      ctx.drawImage(req.image, 0, 0, req.image.width, req.image.height, 0, 0, canvas.width, canvas.height);\n      const imageData = ctx.getImageData(0, 0, req.image.width, req.image.height);\n      nativeArray = imageData.data;\n    }\n\n    const cmdEnc = model.device.createCommandEncoder();\n\n    if (publicAPI.getDimensionality() !== 3) {\n      // Non-3D, supports mipmaps\n      const mips = vtkTexture.generateMipmaps(nativeArray, model.width, model.height, model.mipLevel);\n      let currentWidth = model.width;\n      let currentHeight = model.height;\n\n      for (let m = 0; m <= model.mipLevel; m++) {\n        const fix = fixAll(mips[m], currentHeight, 1);\n        bufferBytesPerRow = fix[1];\n        const buffRequest = {\n          dataArray: req.dataArray ? req.dataArray : null,\n          nativeArray: fix[0],\n\n          /* eslint-disable no-undef */\n          usage: BufferUsage.Texture\n          /* eslint-enable no-undef */\n\n        };\n        const buff = model.device.getBufferManager().getBuffer(buffRequest);\n        cmdEnc.copyBufferToTexture({\n          buffer: buff.getHandle(),\n          offset: 0,\n          bytesPerRow: bufferBytesPerRow,\n          rowsPerImage: currentHeight\n        }, {\n          texture: model.handle,\n          mipLevel: m\n        }, [currentWidth, currentHeight, 1]);\n        currentWidth /= 2;\n        currentHeight /= 2;\n      }\n\n      model.device.submitCommandEncoder(cmdEnc);\n      model.ready = true;\n    } else {\n      // 3D, no mipmaps\n      const fix = fixAll(nativeArray, model.height, model.depth);\n      bufferBytesPerRow = fix[1];\n      const buffRequest = {\n        dataArray: req.dataArray ? req.dataArray : null,\n\n        /* eslint-disable no-undef */\n        usage: BufferUsage.Texture\n        /* eslint-enable no-undef */\n\n      };\n      buffRequest.nativeArray = fix[0];\n      const buff = model.device.getBufferManager().getBuffer(buffRequest);\n      cmdEnc.copyBufferToTexture({\n        buffer: buff.getHandle(),\n        offset: 0,\n        bytesPerRow: bufferBytesPerRow,\n        rowsPerImage: model.height\n      }, {\n        texture: model.handle\n      }, [model.width, model.height, model.depth]);\n      model.device.submitCommandEncoder(cmdEnc);\n      model.ready = true;\n    }\n  }; // when data is pulled out of this texture what scale must be applied to\n  // get back to the original source data. For formats such as r8unorm we\n  // have to multiply by 255.0, for formats such as r16float it is 1.0\n\n\n  publicAPI.getScale = () => {\n    const tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.format);\n    const halfFloat = tDetails.elementSize === 2 && tDetails.sampleType === 'float';\n    return halfFloat ? 1.0 : 255.0;\n  };\n\n  publicAPI.getNumberOfComponents = () => {\n    const tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.format);\n    return tDetails.numComponents;\n  };\n\n  publicAPI.getDimensionality = () => {\n    let dims = 0;\n    if (model.width > 1) dims++;\n    if (model.height > 1) dims++;\n    if (model.depth > 1) dims++;\n    return dims;\n  };\n\n  publicAPI.resizeToMatch = tex => {\n    if (tex.getWidth() !== model.width || tex.getHeight() !== model.height || tex.getDepth() !== model.depth) {\n      model.width = tex.getWidth();\n      model.height = tex.getHeight();\n      model.depth = tex.getDepth();\n      model.handle = model.device.getHandle().createTexture({\n        size: [model.width, model.height, model.depth],\n        format: model.format,\n        usage: model.usage,\n        label: model.label\n      });\n    }\n  };\n\n  publicAPI.resize = function (width, height) {\n    let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n    if (width !== model.width || height !== model.height || depth !== model.depth) {\n      model.width = width;\n      model.height = height;\n      model.depth = depth;\n      model.handle = model.device.getHandle().createTexture({\n        size: [model.width, model.height, model.depth],\n        format: model.format,\n        usage: model.usage,\n        label: model.label\n      });\n    }\n  };\n\n  publicAPI.createView = function (label) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    // if options is missing values try to add them in\n    if (!options.dimension) {\n      options.dimension = model.depth === 1 ? '2d' : '3d';\n    }\n\n    const view = vtkWebGPUTextureView.newInstance({\n      label\n    });\n    view.create(publicAPI, options);\n    return view;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nconst DEFAULT_VALUES = {\n  device: null,\n  handle: null,\n  buffer: null,\n  ready: false,\n  label: null\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods\n\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['handle', 'ready', 'width', 'height', 'depth', 'format', 'usage']);\n  macro.setGet(publicAPI, model, ['device', 'label']);\n  vtkWebGPUTexture(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend\n};","map":{"version":3,"names":["macro","HalfFloat","vtkWebGPUBufferManager","vtkWebGPUTextureView","vtkWebGPUTypes","vtkTexture","BufferUsage","vtkWebGPUTexture","publicAPI","model","classHierarchy","push","create","device","options","width","height","depth","dimension","format","mipLevel","usage","GPUTextureUsage","TEXTURE_BINDING","COPY_DST","handle","getHandle","createTexture","size","label","mipLevelCount","assignFromHandle","writeImageData","req","nativeArray","canvas","queue","copyExternalImageToTexture","source","flipY","flip","texture","premultipliedAlpha","ready","jsImageData","data","tDetails","getDetailsFromTextureFormat","bufferBytesPerRow","stride","fixAll","arr","inWidthInBytes","length","BYTES_PER_ELEMENT","halfFloat","elementSize","sampleType","inArray","inWidth","outBytesPerElement","outWidthInBytes","Math","floor","outWidth","outArray","newTypedArray","constructor","name","v","i","toHalf","set","subarray","image","document","createElement","ctx","getContext","translate","scale","drawImage","imageData","getImageData","cmdEnc","createCommandEncoder","getDimensionality","mips","generateMipmaps","currentWidth","currentHeight","m","fix","buffRequest","dataArray","Texture","buff","getBufferManager","getBuffer","copyBufferToTexture","buffer","offset","bytesPerRow","rowsPerImage","submitCommandEncoder","getScale","getNumberOfComponents","numComponents","dims","resizeToMatch","tex","getWidth","getHeight","getDepth","resize","createView","view","newInstance","DEFAULT_VALUES","extend","initialValues","Object","assign","obj","get","setGet"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/WebGPU/Texture/index.js"],"sourcesContent":["import macro from 'vtk.js/Sources/macros';\nimport HalfFloat from 'vtk.js/Sources/Common/Core/HalfFloat';\nimport vtkWebGPUBufferManager from 'vtk.js/Sources/Rendering/WebGPU/BufferManager';\nimport vtkWebGPUTextureView from 'vtk.js/Sources/Rendering/WebGPU/TextureView';\nimport vtkWebGPUTypes from 'vtk.js/Sources/Rendering/WebGPU/Types';\nimport vtkTexture from 'vtk.js/Sources/Rendering/Core/Texture';\n\nconst { BufferUsage } = vtkWebGPUBufferManager;\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUTexture methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUTexture(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUTexture');\n\n  publicAPI.create = (device, options) => {\n    model.device = device;\n    model.width = options.width;\n    model.height = options.height;\n    model.depth = options.depth ? options.depth : 1;\n    const dimension = model.depth === 1 ? '2d' : '3d';\n    model.format = options.format ? options.format : 'rgba8unorm';\n    model.mipLevel = options.mipLevel ? options.mipLevel : 0;\n    /* eslint-disable no-undef */\n    /* eslint-disable no-bitwise */\n    model.usage = options.usage\n      ? options.usage\n      : GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n    /* eslint-enable no-undef */\n    /* eslint-enable no-bitwise */\n    model.handle = model.device.getHandle().createTexture({\n      size: [model.width, model.height, model.depth],\n      format: model.format, // 'rgba8unorm',\n      usage: model.usage,\n      label: model.label,\n      dimension,\n      mipLevelCount: model.mipLevel + 1,\n    });\n  };\n\n  publicAPI.assignFromHandle = (device, handle, options) => {\n    model.device = device;\n    model.handle = handle;\n    model.width = options.width;\n    model.height = options.height;\n    model.depth = options.depth ? options.depth : 1;\n    model.format = options.format ? options.format : 'rgba8unorm';\n    /* eslint-disable no-undef */\n    /* eslint-disable no-bitwise */\n    model.usage = options.usage\n      ? options.usage\n      : GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n    /* eslint-enable no-undef */\n    /* eslint-enable no-bitwise */\n  };\n\n  publicAPI.writeImageData = (req) => {\n    let nativeArray = [];\n    if (req.canvas) {\n      model.device.getHandle().queue.copyExternalImageToTexture(\n        {\n          source: req.canvas,\n          flipY: req.flip,\n        },\n        { texture: model.handle, premultipliedAlpha: true },\n        [model.width, model.height, model.depth]\n      );\n      model.ready = true;\n      return;\n    }\n\n    if (req.jsImageData && !req.nativeArray) {\n      req.width = req.jsImageData.width;\n      req.height = req.jsImageData.height;\n      req.depth = 1;\n      req.format = 'rgba8unorm';\n      req.flip = true;\n      req.nativeArray = req.jsImageData.data;\n    }\n\n    const tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.format);\n    let bufferBytesPerRow = model.width * tDetails.stride;\n\n    const fixAll = (arr, height, depth) => {\n      // bytesPerRow must be a multiple of 256 so we might need to rebuild\n      // the data here before passing to the buffer. e.g. if it is unorm8x4 then\n      // we need to have width be a multiple of 64\n      const inWidthInBytes =\n        (arr.length / (height * depth)) * arr.BYTES_PER_ELEMENT;\n\n      // is this a half float texture?\n      const halfFloat =\n        tDetails.elementSize === 2 && tDetails.sampleType === 'float';\n\n      // if we need to copy the data\n      if (halfFloat || inWidthInBytes % 256) {\n        const inArray = arr;\n        const inWidth = inWidthInBytes / inArray.BYTES_PER_ELEMENT;\n\n        const outBytesPerElement = tDetails.elementSize;\n        const outWidthInBytes =\n          256 * Math.floor((inWidth * outBytesPerElement + 255) / 256);\n        const outWidth = outWidthInBytes / outBytesPerElement;\n\n        const outArray = macro.newTypedArray(\n          halfFloat ? 'Uint16Array' : inArray.constructor.name,\n          outWidth * height * depth\n        );\n\n        for (let v = 0; v < height * depth; v++) {\n          if (halfFloat) {\n            for (let i = 0; i < inWidth; i++) {\n              outArray[v * outWidth + i] = HalfFloat.toHalf(\n                inArray[v * inWidth + i]\n              );\n            }\n          } else {\n            outArray.set(\n              inArray.subarray(v * inWidth, (v + 1) * inWidth),\n              v * outWidth\n            );\n          }\n        }\n        return [outArray, outWidthInBytes];\n      }\n      return [arr, inWidthInBytes];\n    };\n\n    if (req.nativeArray) {\n      nativeArray = req.nativeArray;\n    }\n\n    if (req.image) {\n      const canvas = document.createElement('canvas');\n      canvas.width = req.image.width;\n      canvas.height = req.image.height;\n      const ctx = canvas.getContext('2d');\n      ctx.translate(0, canvas.height);\n      ctx.scale(1, -1);\n      ctx.drawImage(\n        req.image,\n        0,\n        0,\n        req.image.width,\n        req.image.height,\n        0,\n        0,\n        canvas.width,\n        canvas.height\n      );\n      const imageData = ctx.getImageData(\n        0,\n        0,\n        req.image.width,\n        req.image.height\n      );\n\n      nativeArray = imageData.data;\n    }\n\n    const cmdEnc = model.device.createCommandEncoder();\n\n    if (publicAPI.getDimensionality() !== 3) {\n      // Non-3D, supports mipmaps\n      const mips = vtkTexture.generateMipmaps(\n        nativeArray,\n        model.width,\n        model.height,\n        model.mipLevel\n      );\n      let currentWidth = model.width;\n      let currentHeight = model.height;\n      for (let m = 0; m <= model.mipLevel; m++) {\n        const fix = fixAll(mips[m], currentHeight, 1);\n        bufferBytesPerRow = fix[1];\n        const buffRequest = {\n          dataArray: req.dataArray ? req.dataArray : null,\n          nativeArray: fix[0],\n          /* eslint-disable no-undef */\n          usage: BufferUsage.Texture,\n          /* eslint-enable no-undef */\n        };\n        const buff = model.device.getBufferManager().getBuffer(buffRequest);\n        cmdEnc.copyBufferToTexture(\n          {\n            buffer: buff.getHandle(),\n            offset: 0,\n            bytesPerRow: bufferBytesPerRow,\n            rowsPerImage: currentHeight,\n          },\n          {\n            texture: model.handle,\n            mipLevel: m,\n          },\n          [currentWidth, currentHeight, 1]\n        );\n        currentWidth /= 2;\n        currentHeight /= 2;\n      }\n      model.device.submitCommandEncoder(cmdEnc);\n      model.ready = true;\n    } else {\n      // 3D, no mipmaps\n      const fix = fixAll(nativeArray, model.height, model.depth);\n      bufferBytesPerRow = fix[1];\n      const buffRequest = {\n        dataArray: req.dataArray ? req.dataArray : null,\n        /* eslint-disable no-undef */\n        usage: BufferUsage.Texture,\n        /* eslint-enable no-undef */\n      };\n      buffRequest.nativeArray = fix[0];\n      const buff = model.device.getBufferManager().getBuffer(buffRequest);\n      cmdEnc.copyBufferToTexture(\n        {\n          buffer: buff.getHandle(),\n          offset: 0,\n          bytesPerRow: bufferBytesPerRow,\n          rowsPerImage: model.height,\n        },\n        { texture: model.handle },\n        [model.width, model.height, model.depth]\n      );\n      model.device.submitCommandEncoder(cmdEnc);\n      model.ready = true;\n    }\n  };\n\n  // when data is pulled out of this texture what scale must be applied to\n  // get back to the original source data. For formats such as r8unorm we\n  // have to multiply by 255.0, for formats such as r16float it is 1.0\n  publicAPI.getScale = () => {\n    const tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.format);\n    const halfFloat =\n      tDetails.elementSize === 2 && tDetails.sampleType === 'float';\n    return halfFloat ? 1.0 : 255.0;\n  };\n\n  publicAPI.getNumberOfComponents = () => {\n    const tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.format);\n    return tDetails.numComponents;\n  };\n\n  publicAPI.getDimensionality = () => {\n    let dims = 0;\n    if (model.width > 1) dims++;\n    if (model.height > 1) dims++;\n    if (model.depth > 1) dims++;\n    return dims;\n  };\n\n  publicAPI.resizeToMatch = (tex) => {\n    if (\n      tex.getWidth() !== model.width ||\n      tex.getHeight() !== model.height ||\n      tex.getDepth() !== model.depth\n    ) {\n      model.width = tex.getWidth();\n      model.height = tex.getHeight();\n      model.depth = tex.getDepth();\n      model.handle = model.device.getHandle().createTexture({\n        size: [model.width, model.height, model.depth],\n        format: model.format,\n        usage: model.usage,\n        label: model.label,\n      });\n    }\n  };\n\n  publicAPI.resize = (width, height, depth = 1) => {\n    if (\n      width !== model.width ||\n      height !== model.height ||\n      depth !== model.depth\n    ) {\n      model.width = width;\n      model.height = height;\n      model.depth = depth;\n      model.handle = model.device.getHandle().createTexture({\n        size: [model.width, model.height, model.depth],\n        format: model.format,\n        usage: model.usage,\n        label: model.label,\n      });\n    }\n  };\n\n  publicAPI.createView = (label, options = {}) => {\n    // if options is missing values try to add them in\n    if (!options.dimension) {\n      options.dimension = model.depth === 1 ? '2d' : '3d';\n    }\n    const view = vtkWebGPUTextureView.newInstance({ label });\n    view.create(publicAPI, options);\n    return view;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  device: null,\n  handle: null,\n  buffer: null,\n  ready: false,\n  label: null,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n\n  macro.get(publicAPI, model, [\n    'handle',\n    'ready',\n    'width',\n    'height',\n    'depth',\n    'format',\n    'usage',\n  ]);\n  macro.setGet(publicAPI, model, ['device', 'label']);\n\n  vtkWebGPUTexture(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend);\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}