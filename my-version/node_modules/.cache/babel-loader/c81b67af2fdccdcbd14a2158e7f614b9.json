{"ast":null,"code":"import macro from 'vtk.js/Sources/macros';\nimport * as vtkMath from 'vtk.js/Sources/Common/Core/Math';\nimport Constants from 'vtk.js/Sources/Rendering/Core/VolumeMapper/Constants';\nimport vtkAbstractMapper from 'vtk.js/Sources/Rendering/Core/AbstractMapper';\nimport vtkPiecewiseFunction from 'vtk.js/Sources/Common/DataModel/PiecewiseFunction';\nconst {\n  BlendMode,\n  FilterMode\n} = Constants;\n\nfunction createRadonTransferFunction(firstAbsorbentMaterialHounsfieldValue, firstAbsorbentMaterialAbsorption, maxAbsorbentMaterialHounsfieldValue, maxAbsorbentMaterialAbsorption, outputTransferFunction) {\n  let ofun = null;\n\n  if (outputTransferFunction) {\n    ofun = outputTransferFunction;\n    ofun.removeAllPoints();\n  } else {\n    ofun = vtkPiecewiseFunction.newInstance();\n  }\n\n  ofun.addPointLong(-1024, 0, 1, 1); // air (i.e. material with no absorption)\n\n  ofun.addPoint(firstAbsorbentMaterialHounsfieldValue, firstAbsorbentMaterialAbsorption);\n  ofun.addPoint(maxAbsorbentMaterialHounsfieldValue, maxAbsorbentMaterialAbsorption);\n  return ofun;\n} // ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\n\nexport const STATIC = {\n  createRadonTransferFunction\n}; // ----------------------------------------------------------------------------\n// vtkVolumeMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkVolumeMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkVolumeMapper');\n  const superClass = { ...publicAPI\n  };\n\n  publicAPI.getBounds = () => {\n    const input = publicAPI.getInputData();\n\n    if (!input) {\n      model.bounds = vtkMath.createUninitializedBounds();\n    } else {\n      if (!model.static) {\n        publicAPI.update();\n      }\n\n      model.bounds = input.getBounds();\n    }\n\n    return model.bounds;\n  };\n\n  publicAPI.update = () => {\n    publicAPI.getInputData();\n  };\n\n  publicAPI.setBlendModeToComposite = () => {\n    publicAPI.setBlendMode(BlendMode.COMPOSITE_BLEND);\n  };\n\n  publicAPI.setBlendModeToMaximumIntensity = () => {\n    publicAPI.setBlendMode(BlendMode.MAXIMUM_INTENSITY_BLEND);\n  };\n\n  publicAPI.setBlendModeToMinimumIntensity = () => {\n    publicAPI.setBlendMode(BlendMode.MINIMUM_INTENSITY_BLEND);\n  };\n\n  publicAPI.setBlendModeToAverageIntensity = () => {\n    publicAPI.setBlendMode(BlendMode.AVERAGE_INTENSITY_BLEND);\n  };\n\n  publicAPI.setBlendModeToAdditiveIntensity = () => {\n    publicAPI.setBlendMode(BlendMode.ADDITIVE_INTENSITY_BLEND);\n  };\n\n  publicAPI.setBlendModeToRadonTransform = () => {\n    publicAPI.setBlendMode(BlendMode.RADON_TRANSFORM_BLEND);\n  };\n\n  publicAPI.getBlendModeAsString = () => macro.enumToString(BlendMode, model.blendMode);\n\n  publicAPI.setAverageIPScalarRange = (min, max) => {\n    console.warn('setAverageIPScalarRange is deprecated use setIpScalarRange');\n    publicAPI.setIpScalarRange(min, max);\n  };\n\n  publicAPI.getFilterModeAsString = () => macro.enumToString(FilterMode, model.filterMode);\n\n  publicAPI.setFilterModeToOff = () => {\n    publicAPI.setFilterMode(FilterMode.OFF);\n  };\n\n  publicAPI.setFilterModeToNormalized = () => {\n    publicAPI.setFilterMode(FilterMode.NORMALIZED);\n  };\n\n  publicAPI.setFilterModeToRaw = () => {\n    publicAPI.setFilterMode(FilterMode.RAW);\n  };\n\n  publicAPI.setGlobalIlluminationReach = gl => superClass.setGlobalIlluminationReach(vtkMath.clampValue(gl, 0.0, 1.0));\n\n  publicAPI.setVolumetricScatteringBlending = vsb => superClass.setVolumetricScatteringBlending(vtkMath.clampValue(vsb, 0.0, 1.0));\n\n  publicAPI.setVolumeShadowSamplingDistFactor = vsdf => superClass.setVolumeShadowSamplingDistFactor(vsdf >= 1.0 ? vsdf : 1.0);\n\n  publicAPI.setAnisotropy = at => superClass.setAnisotropy(vtkMath.clampValue(at, -0.99, 0.99));\n\n  publicAPI.setLAOKernelSize = ks => superClass.setLAOKernelSize(vtkMath.floor(vtkMath.clampValue(ks, 1, 32)));\n\n  publicAPI.setLAOKernelRadius = kr => superClass.setLAOKernelRadius(kr >= 1 ? kr : 1);\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n// TODO: what values to use for averageIPScalarRange to get GLSL to use max / min values like [-Math.inf, Math.inf]?\n\n\nconst DEFAULT_VALUES = {\n  bounds: [1, -1, 1, -1, 1, -1],\n  sampleDistance: 1.0,\n  imageSampleDistance: 1.0,\n  maximumSamplesPerRay: 1000,\n  autoAdjustSampleDistances: true,\n  blendMode: BlendMode.COMPOSITE_BLEND,\n  ipScalarRange: [-1000000.0, 1000000.0],\n  filterMode: FilterMode.OFF,\n  // ignored by WebGL so no behavior change\n  preferSizeOverAccuracy: false,\n  // Whether to use halfFloat representation of float, when it is inaccurate\n  computeNormalFromOpacity: false,\n  // volume shadow parameters\n  volumetricScatteringBlending: 0.0,\n  globalIlluminationReach: 0.0,\n  volumeShadowSamplingDistFactor: 5.0,\n  anisotropy: 0.0,\n  // local ambient occlusion\n  localAmbientOcclusion: false,\n  LAOKernelSize: 15,\n  LAOKernelRadius: 7\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkAbstractMapper.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['sampleDistance', 'imageSampleDistance', 'maximumSamplesPerRay', 'autoAdjustSampleDistances', 'blendMode', 'filterMode', 'preferSizeOverAccuracy', 'computeNormalFromOpacity', 'volumetricScatteringBlending', 'globalIlluminationReach', 'volumeShadowSamplingDistFactor', 'anisotropy', 'localAmbientOcclusion', 'LAOKernelSize', 'LAOKernelRadius']);\n  macro.setGetArray(publicAPI, model, ['ipScalarRange'], 2);\n  macro.event(publicAPI, model, 'lightingActivated'); // Object methods\n\n  vtkVolumeMapper(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkVolumeMapper'); // ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend,\n  ...STATIC\n};","map":{"version":3,"names":["macro","vtkMath","Constants","vtkAbstractMapper","vtkPiecewiseFunction","BlendMode","FilterMode","createRadonTransferFunction","firstAbsorbentMaterialHounsfieldValue","firstAbsorbentMaterialAbsorption","maxAbsorbentMaterialHounsfieldValue","maxAbsorbentMaterialAbsorption","outputTransferFunction","ofun","removeAllPoints","newInstance","addPointLong","addPoint","STATIC","vtkVolumeMapper","publicAPI","model","classHierarchy","push","superClass","getBounds","input","getInputData","bounds","createUninitializedBounds","static","update","setBlendModeToComposite","setBlendMode","COMPOSITE_BLEND","setBlendModeToMaximumIntensity","MAXIMUM_INTENSITY_BLEND","setBlendModeToMinimumIntensity","MINIMUM_INTENSITY_BLEND","setBlendModeToAverageIntensity","AVERAGE_INTENSITY_BLEND","setBlendModeToAdditiveIntensity","ADDITIVE_INTENSITY_BLEND","setBlendModeToRadonTransform","RADON_TRANSFORM_BLEND","getBlendModeAsString","enumToString","blendMode","setAverageIPScalarRange","min","max","console","warn","setIpScalarRange","getFilterModeAsString","filterMode","setFilterModeToOff","setFilterMode","OFF","setFilterModeToNormalized","NORMALIZED","setFilterModeToRaw","RAW","setGlobalIlluminationReach","gl","clampValue","setVolumetricScatteringBlending","vsb","setVolumeShadowSamplingDistFactor","vsdf","setAnisotropy","at","setLAOKernelSize","ks","floor","setLAOKernelRadius","kr","DEFAULT_VALUES","sampleDistance","imageSampleDistance","maximumSamplesPerRay","autoAdjustSampleDistances","ipScalarRange","preferSizeOverAccuracy","computeNormalFromOpacity","volumetricScatteringBlending","globalIlluminationReach","volumeShadowSamplingDistFactor","anisotropy","localAmbientOcclusion","LAOKernelSize","LAOKernelRadius","extend","initialValues","Object","assign","setGet","setGetArray","event"],"sources":["/Users/nicolerussack/CSCI401/CSCI401TissueSimulation/my-version/node_modules/vtk.js/Sources/Rendering/Core/VolumeMapper/index.js"],"sourcesContent":["import macro from 'vtk.js/Sources/macros';\nimport * as vtkMath from 'vtk.js/Sources/Common/Core/Math';\nimport Constants from 'vtk.js/Sources/Rendering/Core/VolumeMapper/Constants';\nimport vtkAbstractMapper from 'vtk.js/Sources/Rendering/Core/AbstractMapper';\nimport vtkPiecewiseFunction from 'vtk.js/Sources/Common/DataModel/PiecewiseFunction';\n\nconst { BlendMode, FilterMode } = Constants;\n\nfunction createRadonTransferFunction(\n  firstAbsorbentMaterialHounsfieldValue,\n  firstAbsorbentMaterialAbsorption,\n  maxAbsorbentMaterialHounsfieldValue,\n  maxAbsorbentMaterialAbsorption,\n  outputTransferFunction\n) {\n  let ofun = null;\n  if (outputTransferFunction) {\n    ofun = outputTransferFunction;\n    ofun.removeAllPoints();\n  } else {\n    ofun = vtkPiecewiseFunction.newInstance();\n  }\n  ofun.addPointLong(-1024, 0, 1, 1); // air (i.e. material with no absorption)\n  ofun.addPoint(\n    firstAbsorbentMaterialHounsfieldValue,\n    firstAbsorbentMaterialAbsorption\n  );\n  ofun.addPoint(\n    maxAbsorbentMaterialHounsfieldValue,\n    maxAbsorbentMaterialAbsorption\n  );\n\n  return ofun;\n}\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nexport const STATIC = {\n  createRadonTransferFunction,\n};\n\n// ----------------------------------------------------------------------------\n// vtkVolumeMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkVolumeMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkVolumeMapper');\n\n  const superClass = { ...publicAPI };\n\n  publicAPI.getBounds = () => {\n    const input = publicAPI.getInputData();\n    if (!input) {\n      model.bounds = vtkMath.createUninitializedBounds();\n    } else {\n      if (!model.static) {\n        publicAPI.update();\n      }\n      model.bounds = input.getBounds();\n    }\n    return model.bounds;\n  };\n\n  publicAPI.update = () => {\n    publicAPI.getInputData();\n  };\n\n  publicAPI.setBlendModeToComposite = () => {\n    publicAPI.setBlendMode(BlendMode.COMPOSITE_BLEND);\n  };\n\n  publicAPI.setBlendModeToMaximumIntensity = () => {\n    publicAPI.setBlendMode(BlendMode.MAXIMUM_INTENSITY_BLEND);\n  };\n\n  publicAPI.setBlendModeToMinimumIntensity = () => {\n    publicAPI.setBlendMode(BlendMode.MINIMUM_INTENSITY_BLEND);\n  };\n\n  publicAPI.setBlendModeToAverageIntensity = () => {\n    publicAPI.setBlendMode(BlendMode.AVERAGE_INTENSITY_BLEND);\n  };\n\n  publicAPI.setBlendModeToAdditiveIntensity = () => {\n    publicAPI.setBlendMode(BlendMode.ADDITIVE_INTENSITY_BLEND);\n  };\n\n  publicAPI.setBlendModeToRadonTransform = () => {\n    publicAPI.setBlendMode(BlendMode.RADON_TRANSFORM_BLEND);\n  };\n\n  publicAPI.getBlendModeAsString = () =>\n    macro.enumToString(BlendMode, model.blendMode);\n\n  publicAPI.setAverageIPScalarRange = (min, max) => {\n    console.warn('setAverageIPScalarRange is deprecated use setIpScalarRange');\n    publicAPI.setIpScalarRange(min, max);\n  };\n\n  publicAPI.getFilterModeAsString = () =>\n    macro.enumToString(FilterMode, model.filterMode);\n\n  publicAPI.setFilterModeToOff = () => {\n    publicAPI.setFilterMode(FilterMode.OFF);\n  };\n\n  publicAPI.setFilterModeToNormalized = () => {\n    publicAPI.setFilterMode(FilterMode.NORMALIZED);\n  };\n\n  publicAPI.setFilterModeToRaw = () => {\n    publicAPI.setFilterMode(FilterMode.RAW);\n  };\n\n  publicAPI.setGlobalIlluminationReach = (gl) =>\n    superClass.setGlobalIlluminationReach(vtkMath.clampValue(gl, 0.0, 1.0));\n\n  publicAPI.setVolumetricScatteringBlending = (vsb) =>\n    superClass.setVolumetricScatteringBlending(\n      vtkMath.clampValue(vsb, 0.0, 1.0)\n    );\n\n  publicAPI.setVolumeShadowSamplingDistFactor = (vsdf) =>\n    superClass.setVolumeShadowSamplingDistFactor(vsdf >= 1.0 ? vsdf : 1.0);\n\n  publicAPI.setAnisotropy = (at) =>\n    superClass.setAnisotropy(vtkMath.clampValue(at, -0.99, 0.99));\n\n  publicAPI.setLAOKernelSize = (ks) =>\n    superClass.setLAOKernelSize(vtkMath.floor(vtkMath.clampValue(ks, 1, 32)));\n\n  publicAPI.setLAOKernelRadius = (kr) =>\n    superClass.setLAOKernelRadius(kr >= 1 ? kr : 1);\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n// TODO: what values to use for averageIPScalarRange to get GLSL to use max / min values like [-Math.inf, Math.inf]?\nconst DEFAULT_VALUES = {\n  bounds: [1, -1, 1, -1, 1, -1],\n  sampleDistance: 1.0,\n  imageSampleDistance: 1.0,\n  maximumSamplesPerRay: 1000,\n  autoAdjustSampleDistances: true,\n  blendMode: BlendMode.COMPOSITE_BLEND,\n  ipScalarRange: [-1000000.0, 1000000.0],\n  filterMode: FilterMode.OFF, // ignored by WebGL so no behavior change\n  preferSizeOverAccuracy: false, // Whether to use halfFloat representation of float, when it is inaccurate\n  computeNormalFromOpacity: false,\n  // volume shadow parameters\n  volumetricScatteringBlending: 0.0,\n  globalIlluminationReach: 0.0,\n  volumeShadowSamplingDistFactor: 5.0,\n  anisotropy: 0.0,\n  // local ambient occlusion\n  localAmbientOcclusion: false,\n  LAOKernelSize: 15,\n  LAOKernelRadius: 7,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  vtkAbstractMapper.extend(publicAPI, model, initialValues);\n\n  macro.setGet(publicAPI, model, [\n    'sampleDistance',\n    'imageSampleDistance',\n    'maximumSamplesPerRay',\n    'autoAdjustSampleDistances',\n    'blendMode',\n    'filterMode',\n    'preferSizeOverAccuracy',\n    'computeNormalFromOpacity',\n    'volumetricScatteringBlending',\n    'globalIlluminationReach',\n    'volumeShadowSamplingDistFactor',\n    'anisotropy',\n    'localAmbientOcclusion',\n    'LAOKernelSize',\n    'LAOKernelRadius',\n  ]);\n\n  macro.setGetArray(publicAPI, model, ['ipScalarRange'], 2);\n\n  macro.event(publicAPI, model, 'lightingActivated');\n\n  // Object methods\n  vtkVolumeMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkVolumeMapper');\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend, ...STATIC };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}